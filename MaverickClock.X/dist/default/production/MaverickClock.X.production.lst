

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Nov 09 05:40:36 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F18326
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext15,global,class=STRCODE,delta=2,noexec
    22                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	cinit,global,class=CODE,merge=1,delta=2
    25                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    30                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    31                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	psect	text48,local,class=CODE,merge=1,delta=2
    87                           	psect	text49,local,class=CODE,merge=1,delta=2
    88                           	psect	text50,local,class=CODE,merge=1,delta=2
    89                           	psect	text51,local,class=CODE,merge=1,delta=2
    90                           	psect	text52,local,class=CODE,merge=1,delta=2
    91                           	psect	text53,local,class=CODE,merge=1,delta=2
    92                           	psect	text54,local,class=CODE,merge=1,delta=2
    93                           	psect	text55,local,class=CODE,merge=1,delta=2
    94                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    95                           	psect	text57,local,class=CODE,merge=1,delta=2
    96                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text59,local,class=CODE,merge=1,delta=2
    98                           	psect	text60,local,class=CODE,merge=1,delta=2
    99                           	psect	text61,local,class=CODE,merge=1,delta=2
   100                           	psect	text62,local,class=CODE,merge=1,delta=2
   101                           	psect	text63,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text65,local,class=CODE,merge=1,delta=2
   104                           	psect	text66,local,class=CODE,merge=1,delta=2
   105                           	psect	text67,local,class=CODE,merge=1,delta=2
   106                           	psect	text68,local,class=CODE,merge=1,delta=2
   107                           	psect	text69,local,class=CODE,merge=1,delta=2
   108                           	psect	text70,local,class=CODE,merge=1,delta=2
   109                           	psect	text71,local,class=CODE,merge=1,delta=2
   110                           	psect	text72,local,class=CODE,merge=1,delta=2
   111                           	psect	text73,local,class=CODE,merge=1,delta=2
   112                           	psect	text74,local,class=CODE,merge=1,delta=2
   113                           	psect	text75,local,class=CODE,merge=1,delta=2
   114                           	psect	text76,local,class=CODE,merge=1,delta=2
   115                           	psect	text77,local,class=CODE,merge=1,delta=2
   116                           	psect	text78,local,class=CODE,merge=1,delta=2
   117                           	psect	text79,local,class=CODE,merge=1,delta=2
   118                           	psect	text80,local,class=CODE,merge=1,delta=2
   119                           	psect	text81,local,class=CODE,merge=1,delta=2
   120                           	psect	text82,local,class=CODE,merge=1,delta=2
   121                           	psect	text83,local,class=CODE,merge=1,delta=2
   122                           	psect	text84,local,class=CODE,merge=1,delta=2
   123                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   124                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   125                           	dabs	1,0xCA0,32
   126                           	dabs	1,0xC20,80
   127                           	dabs	1,0xBA0,80
   128                           	dabs	1,0xB20,80
   129                           	dabs	1,0xAA0,80
   130                           	dabs	1,0xA20,80
   131                           	dabs	1,0x9A0,80
   132                           	dabs	1,0x920,80
   133                           	dabs	1,0x8DC,20
   134                           	dabs	1,0x8A0,60
   135                           	dabs	1,0x820,80
   136                           	dabs	1,0x7A0,80
   137                           	dabs	1,0x720,80
   138                           	dabs	1,0x6A0,80
   139                           	dabs	1,0x648,40
   140                           	dabs	1,0x23E8,0,_downEncodedDigitsPixelValues
   141                           	dabs	1,0x258C,0,_upEncodedDigitsPixelValues
   142                           	dabs	1,0x2730,0,_renderBuffer
   143                           	dabs	1,0x7E,2
   144  0000                     
   145                           ; Version 2.32
   146                           ; Generated 10/02/2021 GMT
   147                           ; 
   148                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   149                           ; All rights reserved.
   150                           ; 
   151                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   152                           ; 
   153                           ; Redistribution and use in source and binary forms, with or without modification, are
   154                           ; permitted provided that the following conditions are met:
   155                           ; 
   156                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   157                           ;        conditions and the following disclaimer.
   158                           ; 
   159                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   160                           ;        of conditions and the following disclaimer in the documentation and/or other
   161                           ;        materials provided with the distribution. Publication is not required when
   162                           ;        this file is used in an embedded application.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC16F18326 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000E                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001C                     	;# 
   210  001D                     	;# 
   211  001E                     	;# 
   212  001F                     	;# 
   213  008C                     	;# 
   214  008E                     	;# 
   215  0090                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0097                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010E                     	;# 
   229  0111                     	;# 
   230  0112                     	;# 
   231  0113                     	;# 
   232  0114                     	;# 
   233  0115                     	;# 
   234  0116                     	;# 
   235  0117                     	;# 
   236  0118                     	;# 
   237  0119                     	;# 
   238  018C                     	;# 
   239  018E                     	;# 
   240  0197                     	;# 
   241  0199                     	;# 
   242  0199                     	;# 
   243  0199                     	;# 
   244  019A                     	;# 
   245  019A                     	;# 
   246  019A                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019C                     	;# 
   253  019C                     	;# 
   254  019C                     	;# 
   255  019D                     	;# 
   256  019D                     	;# 
   257  019D                     	;# 
   258  019E                     	;# 
   259  019E                     	;# 
   260  019E                     	;# 
   261  019F                     	;# 
   262  019F                     	;# 
   263  019F                     	;# 
   264  019F                     	;# 
   265  019F                     	;# 
   266  020C                     	;# 
   267  020E                     	;# 
   268  0211                     	;# 
   269  0211                     	;# 
   270  0212                     	;# 
   271  0212                     	;# 
   272  0213                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0214                     	;# 
   276  0215                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0219                     	;# 
   285  021A                     	;# 
   286  021B                     	;# 
   287  021C                     	;# 
   288  021D                     	;# 
   289  021D                     	;# 
   290  021E                     	;# 
   291  021F                     	;# 
   292  028C                     	;# 
   293  028E                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0294                     	;# 
   299  0295                     	;# 
   300  0295                     	;# 
   301  0296                     	;# 
   302  0297                     	;# 
   303  0298                     	;# 
   304  029F                     	;# 
   305  030C                     	;# 
   306  030E                     	;# 
   307  0311                     	;# 
   308  0311                     	;# 
   309  0312                     	;# 
   310  0313                     	;# 
   311  0314                     	;# 
   312  0315                     	;# 
   313  0315                     	;# 
   314  0316                     	;# 
   315  0317                     	;# 
   316  0318                     	;# 
   317  038C                     	;# 
   318  038E                     	;# 
   319  0391                     	;# 
   320  0392                     	;# 
   321  0393                     	;# 
   322  0397                     	;# 
   323  0398                     	;# 
   324  0399                     	;# 
   325  039A                     	;# 
   326  039C                     	;# 
   327  039D                     	;# 
   328  039E                     	;# 
   329  039F                     	;# 
   330  0411                     	;# 
   331  0411                     	;# 
   332  0412                     	;# 
   333  0413                     	;# 
   334  0414                     	;# 
   335  0415                     	;# 
   336  0416                     	;# 
   337  0417                     	;# 
   338  0418                     	;# 
   339  0418                     	;# 
   340  0419                     	;# 
   341  041A                     	;# 
   342  041B                     	;# 
   343  041C                     	;# 
   344  041D                     	;# 
   345  041E                     	;# 
   346  041F                     	;# 
   347  0498                     	;# 
   348  0498                     	;# 
   349  0499                     	;# 
   350  049A                     	;# 
   351  049B                     	;# 
   352  049B                     	;# 
   353  049C                     	;# 
   354  049D                     	;# 
   355  049E                     	;# 
   356  049F                     	;# 
   357  0617                     	;# 
   358  0618                     	;# 
   359  0619                     	;# 
   360  0619                     	;# 
   361  061A                     	;# 
   362  061B                     	;# 
   363  061C                     	;# 
   364  061C                     	;# 
   365  061F                     	;# 
   366  0691                     	;# 
   367  0692                     	;# 
   368  0693                     	;# 
   369  0694                     	;# 
   370  0695                     	;# 
   371  0696                     	;# 
   372  0697                     	;# 
   373  0698                     	;# 
   374  0699                     	;# 
   375  0711                     	;# 
   376  0712                     	;# 
   377  0713                     	;# 
   378  0714                     	;# 
   379  0715                     	;# 
   380  0716                     	;# 
   381  0717                     	;# 
   382  0718                     	;# 
   383  0719                     	;# 
   384  0891                     	;# 
   385  0891                     	;# 
   386  0891                     	;# 
   387  0891                     	;# 
   388  0891                     	;# 
   389  0891                     	;# 
   390  0892                     	;# 
   391  0892                     	;# 
   392  0892                     	;# 
   393  0893                     	;# 
   394  0893                     	;# 
   395  0893                     	;# 
   396  0893                     	;# 
   397  0893                     	;# 
   398  0893                     	;# 
   399  0894                     	;# 
   400  0894                     	;# 
   401  0894                     	;# 
   402  0895                     	;# 
   403  0895                     	;# 
   404  0895                     	;# 
   405  0896                     	;# 
   406  0896                     	;# 
   407  0896                     	;# 
   408  089B                     	;# 
   409  0911                     	;# 
   410  0912                     	;# 
   411  0913                     	;# 
   412  0914                     	;# 
   413  0915                     	;# 
   414  0916                     	;# 
   415  0918                     	;# 
   416  0919                     	;# 
   417  091A                     	;# 
   418  091B                     	;# 
   419  091C                     	;# 
   420  091D                     	;# 
   421  091E                     	;# 
   422  091F                     	;# 
   423  0E0F                     	;# 
   424  0E10                     	;# 
   425  0E11                     	;# 
   426  0E12                     	;# 
   427  0E13                     	;# 
   428  0E14                     	;# 
   429  0E15                     	;# 
   430  0E16                     	;# 
   431  0E17                     	;# 
   432  0E18                     	;# 
   433  0E19                     	;# 
   434  0E1A                     	;# 
   435  0E1B                     	;# 
   436  0E1C                     	;# 
   437  0E1D                     	;# 
   438  0E1E                     	;# 
   439  0E1F                     	;# 
   440  0E20                     	;# 
   441  0E21                     	;# 
   442  0E22                     	;# 
   443  0E24                     	;# 
   444  0E25                     	;# 
   445  0E28                     	;# 
   446  0E29                     	;# 
   447  0E2A                     	;# 
   448  0E2B                     	;# 
   449  0E2C                     	;# 
   450  0E2D                     	;# 
   451  0E2E                     	;# 
   452  0E2F                     	;# 
   453  0E90                     	;# 
   454  0E91                     	;# 
   455  0E92                     	;# 
   456  0E94                     	;# 
   457  0E95                     	;# 
   458  0EA0                     	;# 
   459  0EA1                     	;# 
   460  0EA2                     	;# 
   461  0EA3                     	;# 
   462  0EA4                     	;# 
   463  0EA5                     	;# 
   464  0F0F                     	;# 
   465  0F10                     	;# 
   466  0F11                     	;# 
   467  0F12                     	;# 
   468  0F13                     	;# 
   469  0F14                     	;# 
   470  0F15                     	;# 
   471  0F16                     	;# 
   472  0F17                     	;# 
   473  0F18                     	;# 
   474  0F19                     	;# 
   475  0F1A                     	;# 
   476  0F1B                     	;# 
   477  0F1C                     	;# 
   478  0F1D                     	;# 
   479  0F1E                     	;# 
   480  0F1F                     	;# 
   481  0F20                     	;# 
   482  0F21                     	;# 
   483  0F22                     	;# 
   484  0F23                     	;# 
   485  0F24                     	;# 
   486  0F25                     	;# 
   487  0F26                     	;# 
   488  0F27                     	;# 
   489  0F28                     	;# 
   490  0F29                     	;# 
   491  0F2A                     	;# 
   492  0F2B                     	;# 
   493  0F2C                     	;# 
   494  0F2D                     	;# 
   495  0F2E                     	;# 
   496  0F2F                     	;# 
   497  0F30                     	;# 
   498  0F31                     	;# 
   499  0F32                     	;# 
   500  0F33                     	;# 
   501  0F34                     	;# 
   502  0F35                     	;# 
   503  0F36                     	;# 
   504  0F37                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000E                     	;# 
   530  0010                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0013                     	;# 
   534  0014                     	;# 
   535  0015                     	;# 
   536  0015                     	;# 
   537  0016                     	;# 
   538  0016                     	;# 
   539  0017                     	;# 
   540  0018                     	;# 
   541  0019                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001C                     	;# 
   546  001D                     	;# 
   547  001E                     	;# 
   548  001F                     	;# 
   549  008C                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0094                     	;# 
   556  0097                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010E                     	;# 
   565  0111                     	;# 
   566  0112                     	;# 
   567  0113                     	;# 
   568  0114                     	;# 
   569  0115                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  0118                     	;# 
   573  0119                     	;# 
   574  018C                     	;# 
   575  018E                     	;# 
   576  0197                     	;# 
   577  0199                     	;# 
   578  0199                     	;# 
   579  0199                     	;# 
   580  019A                     	;# 
   581  019A                     	;# 
   582  019A                     	;# 
   583  019B                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019C                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019D                     	;# 
   593  019D                     	;# 
   594  019E                     	;# 
   595  019E                     	;# 
   596  019E                     	;# 
   597  019F                     	;# 
   598  019F                     	;# 
   599  019F                     	;# 
   600  019F                     	;# 
   601  019F                     	;# 
   602  020C                     	;# 
   603  020E                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0216                     	;# 
   617  0216                     	;# 
   618  0217                     	;# 
   619  0217                     	;# 
   620  0219                     	;# 
   621  021A                     	;# 
   622  021B                     	;# 
   623  021C                     	;# 
   624  021D                     	;# 
   625  021D                     	;# 
   626  021E                     	;# 
   627  021F                     	;# 
   628  028C                     	;# 
   629  028E                     	;# 
   630  0291                     	;# 
   631  0291                     	;# 
   632  0292                     	;# 
   633  0293                     	;# 
   634  0294                     	;# 
   635  0295                     	;# 
   636  0295                     	;# 
   637  0296                     	;# 
   638  0297                     	;# 
   639  0298                     	;# 
   640  029F                     	;# 
   641  030C                     	;# 
   642  030E                     	;# 
   643  0311                     	;# 
   644  0311                     	;# 
   645  0312                     	;# 
   646  0313                     	;# 
   647  0314                     	;# 
   648  0315                     	;# 
   649  0315                     	;# 
   650  0316                     	;# 
   651  0317                     	;# 
   652  0318                     	;# 
   653  038C                     	;# 
   654  038E                     	;# 
   655  0391                     	;# 
   656  0392                     	;# 
   657  0393                     	;# 
   658  0397                     	;# 
   659  0398                     	;# 
   660  0399                     	;# 
   661  039A                     	;# 
   662  039C                     	;# 
   663  039D                     	;# 
   664  039E                     	;# 
   665  039F                     	;# 
   666  0411                     	;# 
   667  0411                     	;# 
   668  0412                     	;# 
   669  0413                     	;# 
   670  0414                     	;# 
   671  0415                     	;# 
   672  0416                     	;# 
   673  0417                     	;# 
   674  0418                     	;# 
   675  0418                     	;# 
   676  0419                     	;# 
   677  041A                     	;# 
   678  041B                     	;# 
   679  041C                     	;# 
   680  041D                     	;# 
   681  041E                     	;# 
   682  041F                     	;# 
   683  0498                     	;# 
   684  0498                     	;# 
   685  0499                     	;# 
   686  049A                     	;# 
   687  049B                     	;# 
   688  049B                     	;# 
   689  049C                     	;# 
   690  049D                     	;# 
   691  049E                     	;# 
   692  049F                     	;# 
   693  0617                     	;# 
   694  0618                     	;# 
   695  0619                     	;# 
   696  0619                     	;# 
   697  061A                     	;# 
   698  061B                     	;# 
   699  061C                     	;# 
   700  061C                     	;# 
   701  061F                     	;# 
   702  0691                     	;# 
   703  0692                     	;# 
   704  0693                     	;# 
   705  0694                     	;# 
   706  0695                     	;# 
   707  0696                     	;# 
   708  0697                     	;# 
   709  0698                     	;# 
   710  0699                     	;# 
   711  0711                     	;# 
   712  0712                     	;# 
   713  0713                     	;# 
   714  0714                     	;# 
   715  0715                     	;# 
   716  0716                     	;# 
   717  0717                     	;# 
   718  0718                     	;# 
   719  0719                     	;# 
   720  0891                     	;# 
   721  0891                     	;# 
   722  0891                     	;# 
   723  0891                     	;# 
   724  0891                     	;# 
   725  0891                     	;# 
   726  0892                     	;# 
   727  0892                     	;# 
   728  0892                     	;# 
   729  0893                     	;# 
   730  0893                     	;# 
   731  0893                     	;# 
   732  0893                     	;# 
   733  0893                     	;# 
   734  0893                     	;# 
   735  0894                     	;# 
   736  0894                     	;# 
   737  0894                     	;# 
   738  0895                     	;# 
   739  0895                     	;# 
   740  0895                     	;# 
   741  0896                     	;# 
   742  0896                     	;# 
   743  0896                     	;# 
   744  089B                     	;# 
   745  0911                     	;# 
   746  0912                     	;# 
   747  0913                     	;# 
   748  0914                     	;# 
   749  0915                     	;# 
   750  0916                     	;# 
   751  0918                     	;# 
   752  0919                     	;# 
   753  091A                     	;# 
   754  091B                     	;# 
   755  091C                     	;# 
   756  091D                     	;# 
   757  091E                     	;# 
   758  091F                     	;# 
   759  0E0F                     	;# 
   760  0E10                     	;# 
   761  0E11                     	;# 
   762  0E12                     	;# 
   763  0E13                     	;# 
   764  0E14                     	;# 
   765  0E15                     	;# 
   766  0E16                     	;# 
   767  0E17                     	;# 
   768  0E18                     	;# 
   769  0E19                     	;# 
   770  0E1A                     	;# 
   771  0E1B                     	;# 
   772  0E1C                     	;# 
   773  0E1D                     	;# 
   774  0E1E                     	;# 
   775  0E1F                     	;# 
   776  0E20                     	;# 
   777  0E21                     	;# 
   778  0E22                     	;# 
   779  0E24                     	;# 
   780  0E25                     	;# 
   781  0E28                     	;# 
   782  0E29                     	;# 
   783  0E2A                     	;# 
   784  0E2B                     	;# 
   785  0E2C                     	;# 
   786  0E2D                     	;# 
   787  0E2E                     	;# 
   788  0E2F                     	;# 
   789  0E90                     	;# 
   790  0E91                     	;# 
   791  0E92                     	;# 
   792  0E94                     	;# 
   793  0E95                     	;# 
   794  0EA0                     	;# 
   795  0EA1                     	;# 
   796  0EA2                     	;# 
   797  0EA3                     	;# 
   798  0EA4                     	;# 
   799  0EA5                     	;# 
   800  0F0F                     	;# 
   801  0F10                     	;# 
   802  0F11                     	;# 
   803  0F12                     	;# 
   804  0F13                     	;# 
   805  0F14                     	;# 
   806  0F15                     	;# 
   807  0F16                     	;# 
   808  0F17                     	;# 
   809  0F18                     	;# 
   810  0F19                     	;# 
   811  0F1A                     	;# 
   812  0F1B                     	;# 
   813  0F1C                     	;# 
   814  0F1D                     	;# 
   815  0F1E                     	;# 
   816  0F1F                     	;# 
   817  0F20                     	;# 
   818  0F21                     	;# 
   819  0F22                     	;# 
   820  0F23                     	;# 
   821  0F24                     	;# 
   822  0F25                     	;# 
   823  0F26                     	;# 
   824  0F27                     	;# 
   825  0F28                     	;# 
   826  0F29                     	;# 
   827  0F2A                     	;# 
   828  0F2B                     	;# 
   829  0F2C                     	;# 
   830  0F2D                     	;# 
   831  0F2E                     	;# 
   832  0F2F                     	;# 
   833  0F30                     	;# 
   834  0F31                     	;# 
   835  0F32                     	;# 
   836  0F33                     	;# 
   837  0F34                     	;# 
   838  0F35                     	;# 
   839  0F36                     	;# 
   840  0F37                     	;# 
   841  0FE4                     	;# 
   842  0FE5                     	;# 
   843  0FE6                     	;# 
   844  0FE7                     	;# 
   845  0FE8                     	;# 
   846  0FE9                     	;# 
   847  0FEA                     	;# 
   848  0FEB                     	;# 
   849  0FED                     	;# 
   850  0FEE                     	;# 
   851  0FEF                     	;# 
   852  0000                     	;# 
   853  0001                     	;# 
   854  0002                     	;# 
   855  0003                     	;# 
   856  0004                     	;# 
   857  0005                     	;# 
   858  0006                     	;# 
   859  0007                     	;# 
   860  0008                     	;# 
   861  0009                     	;# 
   862  000A                     	;# 
   863  000B                     	;# 
   864  000C                     	;# 
   865  000E                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  0019                     	;# 
   879  001A                     	;# 
   880  001B                     	;# 
   881  001C                     	;# 
   882  001D                     	;# 
   883  001E                     	;# 
   884  001F                     	;# 
   885  008C                     	;# 
   886  008E                     	;# 
   887  0090                     	;# 
   888  0091                     	;# 
   889  0092                     	;# 
   890  0093                     	;# 
   891  0094                     	;# 
   892  0097                     	;# 
   893  009B                     	;# 
   894  009B                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009E                     	;# 
   898  009F                     	;# 
   899  010C                     	;# 
   900  010E                     	;# 
   901  0111                     	;# 
   902  0112                     	;# 
   903  0113                     	;# 
   904  0114                     	;# 
   905  0115                     	;# 
   906  0116                     	;# 
   907  0117                     	;# 
   908  0118                     	;# 
   909  0119                     	;# 
   910  018C                     	;# 
   911  018E                     	;# 
   912  0197                     	;# 
   913  0199                     	;# 
   914  0199                     	;# 
   915  0199                     	;# 
   916  019A                     	;# 
   917  019A                     	;# 
   918  019A                     	;# 
   919  019B                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019C                     	;# 
   927  019D                     	;# 
   928  019D                     	;# 
   929  019D                     	;# 
   930  019E                     	;# 
   931  019E                     	;# 
   932  019E                     	;# 
   933  019F                     	;# 
   934  019F                     	;# 
   935  019F                     	;# 
   936  019F                     	;# 
   937  019F                     	;# 
   938  020C                     	;# 
   939  020E                     	;# 
   940  0211                     	;# 
   941  0211                     	;# 
   942  0212                     	;# 
   943  0212                     	;# 
   944  0213                     	;# 
   945  0213                     	;# 
   946  0214                     	;# 
   947  0214                     	;# 
   948  0215                     	;# 
   949  0215                     	;# 
   950  0215                     	;# 
   951  0215                     	;# 
   952  0216                     	;# 
   953  0216                     	;# 
   954  0217                     	;# 
   955  0217                     	;# 
   956  0219                     	;# 
   957  021A                     	;# 
   958  021B                     	;# 
   959  021C                     	;# 
   960  021D                     	;# 
   961  021D                     	;# 
   962  021E                     	;# 
   963  021F                     	;# 
   964  028C                     	;# 
   965  028E                     	;# 
   966  0291                     	;# 
   967  0291                     	;# 
   968  0292                     	;# 
   969  0293                     	;# 
   970  0294                     	;# 
   971  0295                     	;# 
   972  0295                     	;# 
   973  0296                     	;# 
   974  0297                     	;# 
   975  0298                     	;# 
   976  029F                     	;# 
   977  030C                     	;# 
   978  030E                     	;# 
   979  0311                     	;# 
   980  0311                     	;# 
   981  0312                     	;# 
   982  0313                     	;# 
   983  0314                     	;# 
   984  0315                     	;# 
   985  0315                     	;# 
   986  0316                     	;# 
   987  0317                     	;# 
   988  0318                     	;# 
   989  038C                     	;# 
   990  038E                     	;# 
   991  0391                     	;# 
   992  0392                     	;# 
   993  0393                     	;# 
   994  0397                     	;# 
   995  0398                     	;# 
   996  0399                     	;# 
   997  039A                     	;# 
   998  039C                     	;# 
   999  039D                     	;# 
  1000  039E                     	;# 
  1001  039F                     	;# 
  1002  0411                     	;# 
  1003  0411                     	;# 
  1004  0412                     	;# 
  1005  0413                     	;# 
  1006  0414                     	;# 
  1007  0415                     	;# 
  1008  0416                     	;# 
  1009  0417                     	;# 
  1010  0418                     	;# 
  1011  0418                     	;# 
  1012  0419                     	;# 
  1013  041A                     	;# 
  1014  041B                     	;# 
  1015  041C                     	;# 
  1016  041D                     	;# 
  1017  041E                     	;# 
  1018  041F                     	;# 
  1019  0498                     	;# 
  1020  0498                     	;# 
  1021  0499                     	;# 
  1022  049A                     	;# 
  1023  049B                     	;# 
  1024  049B                     	;# 
  1025  049C                     	;# 
  1026  049D                     	;# 
  1027  049E                     	;# 
  1028  049F                     	;# 
  1029  0617                     	;# 
  1030  0618                     	;# 
  1031  0619                     	;# 
  1032  0619                     	;# 
  1033  061A                     	;# 
  1034  061B                     	;# 
  1035  061C                     	;# 
  1036  061C                     	;# 
  1037  061F                     	;# 
  1038  0691                     	;# 
  1039  0692                     	;# 
  1040  0693                     	;# 
  1041  0694                     	;# 
  1042  0695                     	;# 
  1043  0696                     	;# 
  1044  0697                     	;# 
  1045  0698                     	;# 
  1046  0699                     	;# 
  1047  0711                     	;# 
  1048  0712                     	;# 
  1049  0713                     	;# 
  1050  0714                     	;# 
  1051  0715                     	;# 
  1052  0716                     	;# 
  1053  0717                     	;# 
  1054  0718                     	;# 
  1055  0719                     	;# 
  1056  0891                     	;# 
  1057  0891                     	;# 
  1058  0891                     	;# 
  1059  0891                     	;# 
  1060  0891                     	;# 
  1061  0891                     	;# 
  1062  0892                     	;# 
  1063  0892                     	;# 
  1064  0892                     	;# 
  1065  0893                     	;# 
  1066  0893                     	;# 
  1067  0893                     	;# 
  1068  0893                     	;# 
  1069  0893                     	;# 
  1070  0893                     	;# 
  1071  0894                     	;# 
  1072  0894                     	;# 
  1073  0894                     	;# 
  1074  0895                     	;# 
  1075  0895                     	;# 
  1076  0895                     	;# 
  1077  0896                     	;# 
  1078  0896                     	;# 
  1079  0896                     	;# 
  1080  089B                     	;# 
  1081  0911                     	;# 
  1082  0912                     	;# 
  1083  0913                     	;# 
  1084  0914                     	;# 
  1085  0915                     	;# 
  1086  0916                     	;# 
  1087  0918                     	;# 
  1088  0919                     	;# 
  1089  091A                     	;# 
  1090  091B                     	;# 
  1091  091C                     	;# 
  1092  091D                     	;# 
  1093  091E                     	;# 
  1094  091F                     	;# 
  1095  0E0F                     	;# 
  1096  0E10                     	;# 
  1097  0E11                     	;# 
  1098  0E12                     	;# 
  1099  0E13                     	;# 
  1100  0E14                     	;# 
  1101  0E15                     	;# 
  1102  0E16                     	;# 
  1103  0E17                     	;# 
  1104  0E18                     	;# 
  1105  0E19                     	;# 
  1106  0E1A                     	;# 
  1107  0E1B                     	;# 
  1108  0E1C                     	;# 
  1109  0E1D                     	;# 
  1110  0E1E                     	;# 
  1111  0E1F                     	;# 
  1112  0E20                     	;# 
  1113  0E21                     	;# 
  1114  0E22                     	;# 
  1115  0E24                     	;# 
  1116  0E25                     	;# 
  1117  0E28                     	;# 
  1118  0E29                     	;# 
  1119  0E2A                     	;# 
  1120  0E2B                     	;# 
  1121  0E2C                     	;# 
  1122  0E2D                     	;# 
  1123  0E2E                     	;# 
  1124  0E2F                     	;# 
  1125  0E90                     	;# 
  1126  0E91                     	;# 
  1127  0E92                     	;# 
  1128  0E94                     	;# 
  1129  0E95                     	;# 
  1130  0EA0                     	;# 
  1131  0EA1                     	;# 
  1132  0EA2                     	;# 
  1133  0EA3                     	;# 
  1134  0EA4                     	;# 
  1135  0EA5                     	;# 
  1136  0F0F                     	;# 
  1137  0F10                     	;# 
  1138  0F11                     	;# 
  1139  0F12                     	;# 
  1140  0F13                     	;# 
  1141  0F14                     	;# 
  1142  0F15                     	;# 
  1143  0F16                     	;# 
  1144  0F17                     	;# 
  1145  0F18                     	;# 
  1146  0F19                     	;# 
  1147  0F1A                     	;# 
  1148  0F1B                     	;# 
  1149  0F1C                     	;# 
  1150  0F1D                     	;# 
  1151  0F1E                     	;# 
  1152  0F1F                     	;# 
  1153  0F20                     	;# 
  1154  0F21                     	;# 
  1155  0F22                     	;# 
  1156  0F23                     	;# 
  1157  0F24                     	;# 
  1158  0F25                     	;# 
  1159  0F26                     	;# 
  1160  0F27                     	;# 
  1161  0F28                     	;# 
  1162  0F29                     	;# 
  1163  0F2A                     	;# 
  1164  0F2B                     	;# 
  1165  0F2C                     	;# 
  1166  0F2D                     	;# 
  1167  0F2E                     	;# 
  1168  0F2F                     	;# 
  1169  0F30                     	;# 
  1170  0F31                     	;# 
  1171  0F32                     	;# 
  1172  0F33                     	;# 
  1173  0F34                     	;# 
  1174  0F35                     	;# 
  1175  0F36                     	;# 
  1176  0F37                     	;# 
  1177  0FE4                     	;# 
  1178  0FE5                     	;# 
  1179  0FE6                     	;# 
  1180  0FE7                     	;# 
  1181  0FE8                     	;# 
  1182  0FE9                     	;# 
  1183  0FEA                     	;# 
  1184  0FEB                     	;# 
  1185  0FED                     	;# 
  1186  0FEE                     	;# 
  1187  0FEF                     	;# 
  1188  0000                     	;# 
  1189  0001                     	;# 
  1190  0002                     	;# 
  1191  0003                     	;# 
  1192  0004                     	;# 
  1193  0005                     	;# 
  1194  0006                     	;# 
  1195  0007                     	;# 
  1196  0008                     	;# 
  1197  0009                     	;# 
  1198  000A                     	;# 
  1199  000B                     	;# 
  1200  000C                     	;# 
  1201  000E                     	;# 
  1202  0010                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0014                     	;# 
  1207  0015                     	;# 
  1208  0015                     	;# 
  1209  0016                     	;# 
  1210  0016                     	;# 
  1211  0017                     	;# 
  1212  0018                     	;# 
  1213  0019                     	;# 
  1214  0019                     	;# 
  1215  001A                     	;# 
  1216  001B                     	;# 
  1217  001C                     	;# 
  1218  001D                     	;# 
  1219  001E                     	;# 
  1220  001F                     	;# 
  1221  008C                     	;# 
  1222  008E                     	;# 
  1223  0090                     	;# 
  1224  0091                     	;# 
  1225  0092                     	;# 
  1226  0093                     	;# 
  1227  0094                     	;# 
  1228  0097                     	;# 
  1229  009B                     	;# 
  1230  009B                     	;# 
  1231  009C                     	;# 
  1232  009D                     	;# 
  1233  009E                     	;# 
  1234  009F                     	;# 
  1235  010C                     	;# 
  1236  010E                     	;# 
  1237  0111                     	;# 
  1238  0112                     	;# 
  1239  0113                     	;# 
  1240  0114                     	;# 
  1241  0115                     	;# 
  1242  0116                     	;# 
  1243  0117                     	;# 
  1244  0118                     	;# 
  1245  0119                     	;# 
  1246  018C                     	;# 
  1247  018E                     	;# 
  1248  0197                     	;# 
  1249  0199                     	;# 
  1250  0199                     	;# 
  1251  0199                     	;# 
  1252  019A                     	;# 
  1253  019A                     	;# 
  1254  019A                     	;# 
  1255  019B                     	;# 
  1256  019B                     	;# 
  1257  019B                     	;# 
  1258  019B                     	;# 
  1259  019B                     	;# 
  1260  019C                     	;# 
  1261  019C                     	;# 
  1262  019C                     	;# 
  1263  019D                     	;# 
  1264  019D                     	;# 
  1265  019D                     	;# 
  1266  019E                     	;# 
  1267  019E                     	;# 
  1268  019E                     	;# 
  1269  019F                     	;# 
  1270  019F                     	;# 
  1271  019F                     	;# 
  1272  019F                     	;# 
  1273  019F                     	;# 
  1274  020C                     	;# 
  1275  020E                     	;# 
  1276  0211                     	;# 
  1277  0211                     	;# 
  1278  0212                     	;# 
  1279  0212                     	;# 
  1280  0213                     	;# 
  1281  0213                     	;# 
  1282  0214                     	;# 
  1283  0214                     	;# 
  1284  0215                     	;# 
  1285  0215                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0216                     	;# 
  1289  0216                     	;# 
  1290  0217                     	;# 
  1291  0217                     	;# 
  1292  0219                     	;# 
  1293  021A                     	;# 
  1294  021B                     	;# 
  1295  021C                     	;# 
  1296  021D                     	;# 
  1297  021D                     	;# 
  1298  021E                     	;# 
  1299  021F                     	;# 
  1300  028C                     	;# 
  1301  028E                     	;# 
  1302  0291                     	;# 
  1303  0291                     	;# 
  1304  0292                     	;# 
  1305  0293                     	;# 
  1306  0294                     	;# 
  1307  0295                     	;# 
  1308  0295                     	;# 
  1309  0296                     	;# 
  1310  0297                     	;# 
  1311  0298                     	;# 
  1312  029F                     	;# 
  1313  030C                     	;# 
  1314  030E                     	;# 
  1315  0311                     	;# 
  1316  0311                     	;# 
  1317  0312                     	;# 
  1318  0313                     	;# 
  1319  0314                     	;# 
  1320  0315                     	;# 
  1321  0315                     	;# 
  1322  0316                     	;# 
  1323  0317                     	;# 
  1324  0318                     	;# 
  1325  038C                     	;# 
  1326  038E                     	;# 
  1327  0391                     	;# 
  1328  0392                     	;# 
  1329  0393                     	;# 
  1330  0397                     	;# 
  1331  0398                     	;# 
  1332  0399                     	;# 
  1333  039A                     	;# 
  1334  039C                     	;# 
  1335  039D                     	;# 
  1336  039E                     	;# 
  1337  039F                     	;# 
  1338  0411                     	;# 
  1339  0411                     	;# 
  1340  0412                     	;# 
  1341  0413                     	;# 
  1342  0414                     	;# 
  1343  0415                     	;# 
  1344  0416                     	;# 
  1345  0417                     	;# 
  1346  0418                     	;# 
  1347  0418                     	;# 
  1348  0419                     	;# 
  1349  041A                     	;# 
  1350  041B                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  041F                     	;# 
  1355  0498                     	;# 
  1356  0498                     	;# 
  1357  0499                     	;# 
  1358  049A                     	;# 
  1359  049B                     	;# 
  1360  049B                     	;# 
  1361  049C                     	;# 
  1362  049D                     	;# 
  1363  049E                     	;# 
  1364  049F                     	;# 
  1365  0617                     	;# 
  1366  0618                     	;# 
  1367  0619                     	;# 
  1368  0619                     	;# 
  1369  061A                     	;# 
  1370  061B                     	;# 
  1371  061C                     	;# 
  1372  061C                     	;# 
  1373  061F                     	;# 
  1374  0691                     	;# 
  1375  0692                     	;# 
  1376  0693                     	;# 
  1377  0694                     	;# 
  1378  0695                     	;# 
  1379  0696                     	;# 
  1380  0697                     	;# 
  1381  0698                     	;# 
  1382  0699                     	;# 
  1383  0711                     	;# 
  1384  0712                     	;# 
  1385  0713                     	;# 
  1386  0714                     	;# 
  1387  0715                     	;# 
  1388  0716                     	;# 
  1389  0717                     	;# 
  1390  0718                     	;# 
  1391  0719                     	;# 
  1392  0891                     	;# 
  1393  0891                     	;# 
  1394  0891                     	;# 
  1395  0891                     	;# 
  1396  0891                     	;# 
  1397  0891                     	;# 
  1398  0892                     	;# 
  1399  0892                     	;# 
  1400  0892                     	;# 
  1401  0893                     	;# 
  1402  0893                     	;# 
  1403  0893                     	;# 
  1404  0893                     	;# 
  1405  0893                     	;# 
  1406  0893                     	;# 
  1407  0894                     	;# 
  1408  0894                     	;# 
  1409  0894                     	;# 
  1410  0895                     	;# 
  1411  0895                     	;# 
  1412  0895                     	;# 
  1413  0896                     	;# 
  1414  0896                     	;# 
  1415  0896                     	;# 
  1416  089B                     	;# 
  1417  0911                     	;# 
  1418  0912                     	;# 
  1419  0913                     	;# 
  1420  0914                     	;# 
  1421  0915                     	;# 
  1422  0916                     	;# 
  1423  0918                     	;# 
  1424  0919                     	;# 
  1425  091A                     	;# 
  1426  091B                     	;# 
  1427  091C                     	;# 
  1428  091D                     	;# 
  1429  091E                     	;# 
  1430  091F                     	;# 
  1431  0E0F                     	;# 
  1432  0E10                     	;# 
  1433  0E11                     	;# 
  1434  0E12                     	;# 
  1435  0E13                     	;# 
  1436  0E14                     	;# 
  1437  0E15                     	;# 
  1438  0E16                     	;# 
  1439  0E17                     	;# 
  1440  0E18                     	;# 
  1441  0E19                     	;# 
  1442  0E1A                     	;# 
  1443  0E1B                     	;# 
  1444  0E1C                     	;# 
  1445  0E1D                     	;# 
  1446  0E1E                     	;# 
  1447  0E1F                     	;# 
  1448  0E20                     	;# 
  1449  0E21                     	;# 
  1450  0E22                     	;# 
  1451  0E24                     	;# 
  1452  0E25                     	;# 
  1453  0E28                     	;# 
  1454  0E29                     	;# 
  1455  0E2A                     	;# 
  1456  0E2B                     	;# 
  1457  0E2C                     	;# 
  1458  0E2D                     	;# 
  1459  0E2E                     	;# 
  1460  0E2F                     	;# 
  1461  0E90                     	;# 
  1462  0E91                     	;# 
  1463  0E92                     	;# 
  1464  0E94                     	;# 
  1465  0E95                     	;# 
  1466  0EA0                     	;# 
  1467  0EA1                     	;# 
  1468  0EA2                     	;# 
  1469  0EA3                     	;# 
  1470  0EA4                     	;# 
  1471  0EA5                     	;# 
  1472  0F0F                     	;# 
  1473  0F10                     	;# 
  1474  0F11                     	;# 
  1475  0F12                     	;# 
  1476  0F13                     	;# 
  1477  0F14                     	;# 
  1478  0F15                     	;# 
  1479  0F16                     	;# 
  1480  0F17                     	;# 
  1481  0F18                     	;# 
  1482  0F19                     	;# 
  1483  0F1A                     	;# 
  1484  0F1B                     	;# 
  1485  0F1C                     	;# 
  1486  0F1D                     	;# 
  1487  0F1E                     	;# 
  1488  0F1F                     	;# 
  1489  0F20                     	;# 
  1490  0F21                     	;# 
  1491  0F22                     	;# 
  1492  0F23                     	;# 
  1493  0F24                     	;# 
  1494  0F25                     	;# 
  1495  0F26                     	;# 
  1496  0F27                     	;# 
  1497  0F28                     	;# 
  1498  0F29                     	;# 
  1499  0F2A                     	;# 
  1500  0F2B                     	;# 
  1501  0F2C                     	;# 
  1502  0F2D                     	;# 
  1503  0F2E                     	;# 
  1504  0F2F                     	;# 
  1505  0F30                     	;# 
  1506  0F31                     	;# 
  1507  0F32                     	;# 
  1508  0F33                     	;# 
  1509  0F34                     	;# 
  1510  0F35                     	;# 
  1511  0F36                     	;# 
  1512  0F37                     	;# 
  1513  0FE4                     	;# 
  1514  0FE5                     	;# 
  1515  0FE6                     	;# 
  1516  0FE7                     	;# 
  1517  0FE8                     	;# 
  1518  0FE9                     	;# 
  1519  0FEA                     	;# 
  1520  0FEB                     	;# 
  1521  0FED                     	;# 
  1522  0FEE                     	;# 
  1523  0FEF                     	;# 
  1524  0000                     	;# 
  1525  0001                     	;# 
  1526  0002                     	;# 
  1527  0003                     	;# 
  1528  0004                     	;# 
  1529  0005                     	;# 
  1530  0006                     	;# 
  1531  0007                     	;# 
  1532  0008                     	;# 
  1533  0009                     	;# 
  1534  000A                     	;# 
  1535  000B                     	;# 
  1536  000C                     	;# 
  1537  000E                     	;# 
  1538  0010                     	;# 
  1539  0011                     	;# 
  1540  0012                     	;# 
  1541  0013                     	;# 
  1542  0014                     	;# 
  1543  0015                     	;# 
  1544  0015                     	;# 
  1545  0016                     	;# 
  1546  0016                     	;# 
  1547  0017                     	;# 
  1548  0018                     	;# 
  1549  0019                     	;# 
  1550  0019                     	;# 
  1551  001A                     	;# 
  1552  001B                     	;# 
  1553  001C                     	;# 
  1554  001D                     	;# 
  1555  001E                     	;# 
  1556  001F                     	;# 
  1557  008C                     	;# 
  1558  008E                     	;# 
  1559  0090                     	;# 
  1560  0091                     	;# 
  1561  0092                     	;# 
  1562  0093                     	;# 
  1563  0094                     	;# 
  1564  0097                     	;# 
  1565  009B                     	;# 
  1566  009B                     	;# 
  1567  009C                     	;# 
  1568  009D                     	;# 
  1569  009E                     	;# 
  1570  009F                     	;# 
  1571  010C                     	;# 
  1572  010E                     	;# 
  1573  0111                     	;# 
  1574  0112                     	;# 
  1575  0113                     	;# 
  1576  0114                     	;# 
  1577  0115                     	;# 
  1578  0116                     	;# 
  1579  0117                     	;# 
  1580  0118                     	;# 
  1581  0119                     	;# 
  1582  018C                     	;# 
  1583  018E                     	;# 
  1584  0197                     	;# 
  1585  0199                     	;# 
  1586  0199                     	;# 
  1587  0199                     	;# 
  1588  019A                     	;# 
  1589  019A                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019C                     	;# 
  1597  019C                     	;# 
  1598  019C                     	;# 
  1599  019D                     	;# 
  1600  019D                     	;# 
  1601  019D                     	;# 
  1602  019E                     	;# 
  1603  019E                     	;# 
  1604  019E                     	;# 
  1605  019F                     	;# 
  1606  019F                     	;# 
  1607  019F                     	;# 
  1608  019F                     	;# 
  1609  019F                     	;# 
  1610  020C                     	;# 
  1611  020E                     	;# 
  1612  0211                     	;# 
  1613  0211                     	;# 
  1614  0212                     	;# 
  1615  0212                     	;# 
  1616  0213                     	;# 
  1617  0213                     	;# 
  1618  0214                     	;# 
  1619  0214                     	;# 
  1620  0215                     	;# 
  1621  0215                     	;# 
  1622  0215                     	;# 
  1623  0215                     	;# 
  1624  0216                     	;# 
  1625  0216                     	;# 
  1626  0217                     	;# 
  1627  0217                     	;# 
  1628  0219                     	;# 
  1629  021A                     	;# 
  1630  021B                     	;# 
  1631  021C                     	;# 
  1632  021D                     	;# 
  1633  021D                     	;# 
  1634  021E                     	;# 
  1635  021F                     	;# 
  1636  028C                     	;# 
  1637  028E                     	;# 
  1638  0291                     	;# 
  1639  0291                     	;# 
  1640  0292                     	;# 
  1641  0293                     	;# 
  1642  0294                     	;# 
  1643  0295                     	;# 
  1644  0295                     	;# 
  1645  0296                     	;# 
  1646  0297                     	;# 
  1647  0298                     	;# 
  1648  029F                     	;# 
  1649  030C                     	;# 
  1650  030E                     	;# 
  1651  0311                     	;# 
  1652  0311                     	;# 
  1653  0312                     	;# 
  1654  0313                     	;# 
  1655  0314                     	;# 
  1656  0315                     	;# 
  1657  0315                     	;# 
  1658  0316                     	;# 
  1659  0317                     	;# 
  1660  0318                     	;# 
  1661  038C                     	;# 
  1662  038E                     	;# 
  1663  0391                     	;# 
  1664  0392                     	;# 
  1665  0393                     	;# 
  1666  0397                     	;# 
  1667  0398                     	;# 
  1668  0399                     	;# 
  1669  039A                     	;# 
  1670  039C                     	;# 
  1671  039D                     	;# 
  1672  039E                     	;# 
  1673  039F                     	;# 
  1674  0411                     	;# 
  1675  0411                     	;# 
  1676  0412                     	;# 
  1677  0413                     	;# 
  1678  0414                     	;# 
  1679  0415                     	;# 
  1680  0416                     	;# 
  1681  0417                     	;# 
  1682  0418                     	;# 
  1683  0418                     	;# 
  1684  0419                     	;# 
  1685  041A                     	;# 
  1686  041B                     	;# 
  1687  041C                     	;# 
  1688  041D                     	;# 
  1689  041E                     	;# 
  1690  041F                     	;# 
  1691  0498                     	;# 
  1692  0498                     	;# 
  1693  0499                     	;# 
  1694  049A                     	;# 
  1695  049B                     	;# 
  1696  049B                     	;# 
  1697  049C                     	;# 
  1698  049D                     	;# 
  1699  049E                     	;# 
  1700  049F                     	;# 
  1701  0617                     	;# 
  1702  0618                     	;# 
  1703  0619                     	;# 
  1704  0619                     	;# 
  1705  061A                     	;# 
  1706  061B                     	;# 
  1707  061C                     	;# 
  1708  061C                     	;# 
  1709  061F                     	;# 
  1710  0691                     	;# 
  1711  0692                     	;# 
  1712  0693                     	;# 
  1713  0694                     	;# 
  1714  0695                     	;# 
  1715  0696                     	;# 
  1716  0697                     	;# 
  1717  0698                     	;# 
  1718  0699                     	;# 
  1719  0711                     	;# 
  1720  0712                     	;# 
  1721  0713                     	;# 
  1722  0714                     	;# 
  1723  0715                     	;# 
  1724  0716                     	;# 
  1725  0717                     	;# 
  1726  0718                     	;# 
  1727  0719                     	;# 
  1728  0891                     	;# 
  1729  0891                     	;# 
  1730  0891                     	;# 
  1731  0891                     	;# 
  1732  0891                     	;# 
  1733  0891                     	;# 
  1734  0892                     	;# 
  1735  0892                     	;# 
  1736  0892                     	;# 
  1737  0893                     	;# 
  1738  0893                     	;# 
  1739  0893                     	;# 
  1740  0893                     	;# 
  1741  0893                     	;# 
  1742  0893                     	;# 
  1743  0894                     	;# 
  1744  0894                     	;# 
  1745  0894                     	;# 
  1746  0895                     	;# 
  1747  0895                     	;# 
  1748  0895                     	;# 
  1749  0896                     	;# 
  1750  0896                     	;# 
  1751  0896                     	;# 
  1752  089B                     	;# 
  1753  0911                     	;# 
  1754  0912                     	;# 
  1755  0913                     	;# 
  1756  0914                     	;# 
  1757  0915                     	;# 
  1758  0916                     	;# 
  1759  0918                     	;# 
  1760  0919                     	;# 
  1761  091A                     	;# 
  1762  091B                     	;# 
  1763  091C                     	;# 
  1764  091D                     	;# 
  1765  091E                     	;# 
  1766  091F                     	;# 
  1767  0E0F                     	;# 
  1768  0E10                     	;# 
  1769  0E11                     	;# 
  1770  0E12                     	;# 
  1771  0E13                     	;# 
  1772  0E14                     	;# 
  1773  0E15                     	;# 
  1774  0E16                     	;# 
  1775  0E17                     	;# 
  1776  0E18                     	;# 
  1777  0E19                     	;# 
  1778  0E1A                     	;# 
  1779  0E1B                     	;# 
  1780  0E1C                     	;# 
  1781  0E1D                     	;# 
  1782  0E1E                     	;# 
  1783  0E1F                     	;# 
  1784  0E20                     	;# 
  1785  0E21                     	;# 
  1786  0E22                     	;# 
  1787  0E24                     	;# 
  1788  0E25                     	;# 
  1789  0E28                     	;# 
  1790  0E29                     	;# 
  1791  0E2A                     	;# 
  1792  0E2B                     	;# 
  1793  0E2C                     	;# 
  1794  0E2D                     	;# 
  1795  0E2E                     	;# 
  1796  0E2F                     	;# 
  1797  0E90                     	;# 
  1798  0E91                     	;# 
  1799  0E92                     	;# 
  1800  0E94                     	;# 
  1801  0E95                     	;# 
  1802  0EA0                     	;# 
  1803  0EA1                     	;# 
  1804  0EA2                     	;# 
  1805  0EA3                     	;# 
  1806  0EA4                     	;# 
  1807  0EA5                     	;# 
  1808  0F0F                     	;# 
  1809  0F10                     	;# 
  1810  0F11                     	;# 
  1811  0F12                     	;# 
  1812  0F13                     	;# 
  1813  0F14                     	;# 
  1814  0F15                     	;# 
  1815  0F16                     	;# 
  1816  0F17                     	;# 
  1817  0F18                     	;# 
  1818  0F19                     	;# 
  1819  0F1A                     	;# 
  1820  0F1B                     	;# 
  1821  0F1C                     	;# 
  1822  0F1D                     	;# 
  1823  0F1E                     	;# 
  1824  0F1F                     	;# 
  1825  0F20                     	;# 
  1826  0F21                     	;# 
  1827  0F22                     	;# 
  1828  0F23                     	;# 
  1829  0F24                     	;# 
  1830  0F25                     	;# 
  1831  0F26                     	;# 
  1832  0F27                     	;# 
  1833  0F28                     	;# 
  1834  0F29                     	;# 
  1835  0F2A                     	;# 
  1836  0F2B                     	;# 
  1837  0F2C                     	;# 
  1838  0F2D                     	;# 
  1839  0F2E                     	;# 
  1840  0F2F                     	;# 
  1841  0F30                     	;# 
  1842  0F31                     	;# 
  1843  0F32                     	;# 
  1844  0F33                     	;# 
  1845  0F34                     	;# 
  1846  0F35                     	;# 
  1847  0F36                     	;# 
  1848  0F37                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000E                     	;# 
  1874  0010                     	;# 
  1875  0011                     	;# 
  1876  0012                     	;# 
  1877  0013                     	;# 
  1878  0014                     	;# 
  1879  0015                     	;# 
  1880  0015                     	;# 
  1881  0016                     	;# 
  1882  0016                     	;# 
  1883  0017                     	;# 
  1884  0018                     	;# 
  1885  0019                     	;# 
  1886  0019                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001C                     	;# 
  1890  001D                     	;# 
  1891  001E                     	;# 
  1892  001F                     	;# 
  1893  008C                     	;# 
  1894  008E                     	;# 
  1895  0090                     	;# 
  1896  0091                     	;# 
  1897  0092                     	;# 
  1898  0093                     	;# 
  1899  0094                     	;# 
  1900  0097                     	;# 
  1901  009B                     	;# 
  1902  009B                     	;# 
  1903  009C                     	;# 
  1904  009D                     	;# 
  1905  009E                     	;# 
  1906  009F                     	;# 
  1907  010C                     	;# 
  1908  010E                     	;# 
  1909  0111                     	;# 
  1910  0112                     	;# 
  1911  0113                     	;# 
  1912  0114                     	;# 
  1913  0115                     	;# 
  1914  0116                     	;# 
  1915  0117                     	;# 
  1916  0118                     	;# 
  1917  0119                     	;# 
  1918  018C                     	;# 
  1919  018E                     	;# 
  1920  0197                     	;# 
  1921  0199                     	;# 
  1922  0199                     	;# 
  1923  0199                     	;# 
  1924  019A                     	;# 
  1925  019A                     	;# 
  1926  019A                     	;# 
  1927  019B                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019C                     	;# 
  1933  019C                     	;# 
  1934  019C                     	;# 
  1935  019D                     	;# 
  1936  019D                     	;# 
  1937  019D                     	;# 
  1938  019E                     	;# 
  1939  019E                     	;# 
  1940  019E                     	;# 
  1941  019F                     	;# 
  1942  019F                     	;# 
  1943  019F                     	;# 
  1944  019F                     	;# 
  1945  019F                     	;# 
  1946  020C                     	;# 
  1947  020E                     	;# 
  1948  0211                     	;# 
  1949  0211                     	;# 
  1950  0212                     	;# 
  1951  0212                     	;# 
  1952  0213                     	;# 
  1953  0213                     	;# 
  1954  0214                     	;# 
  1955  0214                     	;# 
  1956  0215                     	;# 
  1957  0215                     	;# 
  1958  0215                     	;# 
  1959  0215                     	;# 
  1960  0216                     	;# 
  1961  0216                     	;# 
  1962  0217                     	;# 
  1963  0217                     	;# 
  1964  0219                     	;# 
  1965  021A                     	;# 
  1966  021B                     	;# 
  1967  021C                     	;# 
  1968  021D                     	;# 
  1969  021D                     	;# 
  1970  021E                     	;# 
  1971  021F                     	;# 
  1972  028C                     	;# 
  1973  028E                     	;# 
  1974  0291                     	;# 
  1975  0291                     	;# 
  1976  0292                     	;# 
  1977  0293                     	;# 
  1978  0294                     	;# 
  1979  0295                     	;# 
  1980  0295                     	;# 
  1981  0296                     	;# 
  1982  0297                     	;# 
  1983  0298                     	;# 
  1984  029F                     	;# 
  1985  030C                     	;# 
  1986  030E                     	;# 
  1987  0311                     	;# 
  1988  0311                     	;# 
  1989  0312                     	;# 
  1990  0313                     	;# 
  1991  0314                     	;# 
  1992  0315                     	;# 
  1993  0315                     	;# 
  1994  0316                     	;# 
  1995  0317                     	;# 
  1996  0318                     	;# 
  1997  038C                     	;# 
  1998  038E                     	;# 
  1999  0391                     	;# 
  2000  0392                     	;# 
  2001  0393                     	;# 
  2002  0397                     	;# 
  2003  0398                     	;# 
  2004  0399                     	;# 
  2005  039A                     	;# 
  2006  039C                     	;# 
  2007  039D                     	;# 
  2008  039E                     	;# 
  2009  039F                     	;# 
  2010  0411                     	;# 
  2011  0411                     	;# 
  2012  0412                     	;# 
  2013  0413                     	;# 
  2014  0414                     	;# 
  2015  0415                     	;# 
  2016  0416                     	;# 
  2017  0417                     	;# 
  2018  0418                     	;# 
  2019  0418                     	;# 
  2020  0419                     	;# 
  2021  041A                     	;# 
  2022  041B                     	;# 
  2023  041C                     	;# 
  2024  041D                     	;# 
  2025  041E                     	;# 
  2026  041F                     	;# 
  2027  0498                     	;# 
  2028  0498                     	;# 
  2029  0499                     	;# 
  2030  049A                     	;# 
  2031  049B                     	;# 
  2032  049B                     	;# 
  2033  049C                     	;# 
  2034  049D                     	;# 
  2035  049E                     	;# 
  2036  049F                     	;# 
  2037  0617                     	;# 
  2038  0618                     	;# 
  2039  0619                     	;# 
  2040  0619                     	;# 
  2041  061A                     	;# 
  2042  061B                     	;# 
  2043  061C                     	;# 
  2044  061C                     	;# 
  2045  061F                     	;# 
  2046  0691                     	;# 
  2047  0692                     	;# 
  2048  0693                     	;# 
  2049  0694                     	;# 
  2050  0695                     	;# 
  2051  0696                     	;# 
  2052  0697                     	;# 
  2053  0698                     	;# 
  2054  0699                     	;# 
  2055  0711                     	;# 
  2056  0712                     	;# 
  2057  0713                     	;# 
  2058  0714                     	;# 
  2059  0715                     	;# 
  2060  0716                     	;# 
  2061  0717                     	;# 
  2062  0718                     	;# 
  2063  0719                     	;# 
  2064  0891                     	;# 
  2065  0891                     	;# 
  2066  0891                     	;# 
  2067  0891                     	;# 
  2068  0891                     	;# 
  2069  0891                     	;# 
  2070  0892                     	;# 
  2071  0892                     	;# 
  2072  0892                     	;# 
  2073  0893                     	;# 
  2074  0893                     	;# 
  2075  0893                     	;# 
  2076  0893                     	;# 
  2077  0893                     	;# 
  2078  0893                     	;# 
  2079  0894                     	;# 
  2080  0894                     	;# 
  2081  0894                     	;# 
  2082  0895                     	;# 
  2083  0895                     	;# 
  2084  0895                     	;# 
  2085  0896                     	;# 
  2086  0896                     	;# 
  2087  0896                     	;# 
  2088  089B                     	;# 
  2089  0911                     	;# 
  2090  0912                     	;# 
  2091  0913                     	;# 
  2092  0914                     	;# 
  2093  0915                     	;# 
  2094  0916                     	;# 
  2095  0918                     	;# 
  2096  0919                     	;# 
  2097  091A                     	;# 
  2098  091B                     	;# 
  2099  091C                     	;# 
  2100  091D                     	;# 
  2101  091E                     	;# 
  2102  091F                     	;# 
  2103  0E0F                     	;# 
  2104  0E10                     	;# 
  2105  0E11                     	;# 
  2106  0E12                     	;# 
  2107  0E13                     	;# 
  2108  0E14                     	;# 
  2109  0E15                     	;# 
  2110  0E16                     	;# 
  2111  0E17                     	;# 
  2112  0E18                     	;# 
  2113  0E19                     	;# 
  2114  0E1A                     	;# 
  2115  0E1B                     	;# 
  2116  0E1C                     	;# 
  2117  0E1D                     	;# 
  2118  0E1E                     	;# 
  2119  0E1F                     	;# 
  2120  0E20                     	;# 
  2121  0E21                     	;# 
  2122  0E22                     	;# 
  2123  0E24                     	;# 
  2124  0E25                     	;# 
  2125  0E28                     	;# 
  2126  0E29                     	;# 
  2127  0E2A                     	;# 
  2128  0E2B                     	;# 
  2129  0E2C                     	;# 
  2130  0E2D                     	;# 
  2131  0E2E                     	;# 
  2132  0E2F                     	;# 
  2133  0E90                     	;# 
  2134  0E91                     	;# 
  2135  0E92                     	;# 
  2136  0E94                     	;# 
  2137  0E95                     	;# 
  2138  0EA0                     	;# 
  2139  0EA1                     	;# 
  2140  0EA2                     	;# 
  2141  0EA3                     	;# 
  2142  0EA4                     	;# 
  2143  0EA5                     	;# 
  2144  0F0F                     	;# 
  2145  0F10                     	;# 
  2146  0F11                     	;# 
  2147  0F12                     	;# 
  2148  0F13                     	;# 
  2149  0F14                     	;# 
  2150  0F15                     	;# 
  2151  0F16                     	;# 
  2152  0F17                     	;# 
  2153  0F18                     	;# 
  2154  0F19                     	;# 
  2155  0F1A                     	;# 
  2156  0F1B                     	;# 
  2157  0F1C                     	;# 
  2158  0F1D                     	;# 
  2159  0F1E                     	;# 
  2160  0F1F                     	;# 
  2161  0F20                     	;# 
  2162  0F21                     	;# 
  2163  0F22                     	;# 
  2164  0F23                     	;# 
  2165  0F24                     	;# 
  2166  0F25                     	;# 
  2167  0F26                     	;# 
  2168  0F27                     	;# 
  2169  0F28                     	;# 
  2170  0F29                     	;# 
  2171  0F2A                     	;# 
  2172  0F2B                     	;# 
  2173  0F2C                     	;# 
  2174  0F2D                     	;# 
  2175  0F2E                     	;# 
  2176  0F2F                     	;# 
  2177  0F30                     	;# 
  2178  0F31                     	;# 
  2179  0F32                     	;# 
  2180  0F33                     	;# 
  2181  0F34                     	;# 
  2182  0F35                     	;# 
  2183  0F36                     	;# 
  2184  0F37                     	;# 
  2185  0FE4                     	;# 
  2186  0FE5                     	;# 
  2187  0FE6                     	;# 
  2188  0FE7                     	;# 
  2189  0FE8                     	;# 
  2190  0FE9                     	;# 
  2191  0FEA                     	;# 
  2192  0FEB                     	;# 
  2193  0FED                     	;# 
  2194  0FEE                     	;# 
  2195  0FEF                     	;# 
  2196  0000                     	;# 
  2197  0001                     	;# 
  2198  0002                     	;# 
  2199  0003                     	;# 
  2200  0004                     	;# 
  2201  0005                     	;# 
  2202  0006                     	;# 
  2203  0007                     	;# 
  2204  0008                     	;# 
  2205  0009                     	;# 
  2206  000A                     	;# 
  2207  000B                     	;# 
  2208  000C                     	;# 
  2209  000E                     	;# 
  2210  0010                     	;# 
  2211  0011                     	;# 
  2212  0012                     	;# 
  2213  0013                     	;# 
  2214  0014                     	;# 
  2215  0015                     	;# 
  2216  0015                     	;# 
  2217  0016                     	;# 
  2218  0016                     	;# 
  2219  0017                     	;# 
  2220  0018                     	;# 
  2221  0019                     	;# 
  2222  0019                     	;# 
  2223  001A                     	;# 
  2224  001B                     	;# 
  2225  001C                     	;# 
  2226  001D                     	;# 
  2227  001E                     	;# 
  2228  001F                     	;# 
  2229  008C                     	;# 
  2230  008E                     	;# 
  2231  0090                     	;# 
  2232  0091                     	;# 
  2233  0092                     	;# 
  2234  0093                     	;# 
  2235  0094                     	;# 
  2236  0097                     	;# 
  2237  009B                     	;# 
  2238  009B                     	;# 
  2239  009C                     	;# 
  2240  009D                     	;# 
  2241  009E                     	;# 
  2242  009F                     	;# 
  2243  010C                     	;# 
  2244  010E                     	;# 
  2245  0111                     	;# 
  2246  0112                     	;# 
  2247  0113                     	;# 
  2248  0114                     	;# 
  2249  0115                     	;# 
  2250  0116                     	;# 
  2251  0117                     	;# 
  2252  0118                     	;# 
  2253  0119                     	;# 
  2254  018C                     	;# 
  2255  018E                     	;# 
  2256  0197                     	;# 
  2257  0199                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  019A                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019C                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019D                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019E                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  020C                     	;# 
  2283  020E                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0213                     	;# 
  2290  0214                     	;# 
  2291  0214                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0216                     	;# 
  2297  0216                     	;# 
  2298  0217                     	;# 
  2299  0217                     	;# 
  2300  0219                     	;# 
  2301  021A                     	;# 
  2302  021B                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028E                     	;# 
  2310  0291                     	;# 
  2311  0291                     	;# 
  2312  0292                     	;# 
  2313  0293                     	;# 
  2314  0294                     	;# 
  2315  0295                     	;# 
  2316  0295                     	;# 
  2317  0296                     	;# 
  2318  0297                     	;# 
  2319  0298                     	;# 
  2320  029F                     	;# 
  2321  030C                     	;# 
  2322  030E                     	;# 
  2323  0311                     	;# 
  2324  0311                     	;# 
  2325  0312                     	;# 
  2326  0313                     	;# 
  2327  0314                     	;# 
  2328  0315                     	;# 
  2329  0315                     	;# 
  2330  0316                     	;# 
  2331  0317                     	;# 
  2332  0318                     	;# 
  2333  038C                     	;# 
  2334  038E                     	;# 
  2335  0391                     	;# 
  2336  0392                     	;# 
  2337  0393                     	;# 
  2338  0397                     	;# 
  2339  0398                     	;# 
  2340  0399                     	;# 
  2341  039A                     	;# 
  2342  039C                     	;# 
  2343  039D                     	;# 
  2344  039E                     	;# 
  2345  039F                     	;# 
  2346  0411                     	;# 
  2347  0411                     	;# 
  2348  0412                     	;# 
  2349  0413                     	;# 
  2350  0414                     	;# 
  2351  0415                     	;# 
  2352  0416                     	;# 
  2353  0417                     	;# 
  2354  0418                     	;# 
  2355  0418                     	;# 
  2356  0419                     	;# 
  2357  041A                     	;# 
  2358  041B                     	;# 
  2359  041C                     	;# 
  2360  041D                     	;# 
  2361  041E                     	;# 
  2362  041F                     	;# 
  2363  0498                     	;# 
  2364  0498                     	;# 
  2365  0499                     	;# 
  2366  049A                     	;# 
  2367  049B                     	;# 
  2368  049B                     	;# 
  2369  049C                     	;# 
  2370  049D                     	;# 
  2371  049E                     	;# 
  2372  049F                     	;# 
  2373  0617                     	;# 
  2374  0618                     	;# 
  2375  0619                     	;# 
  2376  0619                     	;# 
  2377  061A                     	;# 
  2378  061B                     	;# 
  2379  061C                     	;# 
  2380  061C                     	;# 
  2381  061F                     	;# 
  2382  0691                     	;# 
  2383  0692                     	;# 
  2384  0693                     	;# 
  2385  0694                     	;# 
  2386  0695                     	;# 
  2387  0696                     	;# 
  2388  0697                     	;# 
  2389  0698                     	;# 
  2390  0699                     	;# 
  2391  0711                     	;# 
  2392  0712                     	;# 
  2393  0713                     	;# 
  2394  0714                     	;# 
  2395  0715                     	;# 
  2396  0716                     	;# 
  2397  0717                     	;# 
  2398  0718                     	;# 
  2399  0719                     	;# 
  2400  0891                     	;# 
  2401  0891                     	;# 
  2402  0891                     	;# 
  2403  0891                     	;# 
  2404  0891                     	;# 
  2405  0891                     	;# 
  2406  0892                     	;# 
  2407  0892                     	;# 
  2408  0892                     	;# 
  2409  0893                     	;# 
  2410  0893                     	;# 
  2411  0893                     	;# 
  2412  0893                     	;# 
  2413  0893                     	;# 
  2414  0893                     	;# 
  2415  0894                     	;# 
  2416  0894                     	;# 
  2417  0894                     	;# 
  2418  0895                     	;# 
  2419  0895                     	;# 
  2420  0895                     	;# 
  2421  0896                     	;# 
  2422  0896                     	;# 
  2423  0896                     	;# 
  2424  089B                     	;# 
  2425  0911                     	;# 
  2426  0912                     	;# 
  2427  0913                     	;# 
  2428  0914                     	;# 
  2429  0915                     	;# 
  2430  0916                     	;# 
  2431  0918                     	;# 
  2432  0919                     	;# 
  2433  091A                     	;# 
  2434  091B                     	;# 
  2435  091C                     	;# 
  2436  091D                     	;# 
  2437  091E                     	;# 
  2438  091F                     	;# 
  2439  0E0F                     	;# 
  2440  0E10                     	;# 
  2441  0E11                     	;# 
  2442  0E12                     	;# 
  2443  0E13                     	;# 
  2444  0E14                     	;# 
  2445  0E15                     	;# 
  2446  0E16                     	;# 
  2447  0E17                     	;# 
  2448  0E18                     	;# 
  2449  0E19                     	;# 
  2450  0E1A                     	;# 
  2451  0E1B                     	;# 
  2452  0E1C                     	;# 
  2453  0E1D                     	;# 
  2454  0E1E                     	;# 
  2455  0E1F                     	;# 
  2456  0E20                     	;# 
  2457  0E21                     	;# 
  2458  0E22                     	;# 
  2459  0E24                     	;# 
  2460  0E25                     	;# 
  2461  0E28                     	;# 
  2462  0E29                     	;# 
  2463  0E2A                     	;# 
  2464  0E2B                     	;# 
  2465  0E2C                     	;# 
  2466  0E2D                     	;# 
  2467  0E2E                     	;# 
  2468  0E2F                     	;# 
  2469  0E90                     	;# 
  2470  0E91                     	;# 
  2471  0E92                     	;# 
  2472  0E94                     	;# 
  2473  0E95                     	;# 
  2474  0EA0                     	;# 
  2475  0EA1                     	;# 
  2476  0EA2                     	;# 
  2477  0EA3                     	;# 
  2478  0EA4                     	;# 
  2479  0EA5                     	;# 
  2480  0F0F                     	;# 
  2481  0F10                     	;# 
  2482  0F11                     	;# 
  2483  0F12                     	;# 
  2484  0F13                     	;# 
  2485  0F14                     	;# 
  2486  0F15                     	;# 
  2487  0F16                     	;# 
  2488  0F17                     	;# 
  2489  0F18                     	;# 
  2490  0F19                     	;# 
  2491  0F1A                     	;# 
  2492  0F1B                     	;# 
  2493  0F1C                     	;# 
  2494  0F1D                     	;# 
  2495  0F1E                     	;# 
  2496  0F1F                     	;# 
  2497  0F20                     	;# 
  2498  0F21                     	;# 
  2499  0F22                     	;# 
  2500  0F23                     	;# 
  2501  0F24                     	;# 
  2502  0F25                     	;# 
  2503  0F26                     	;# 
  2504  0F27                     	;# 
  2505  0F28                     	;# 
  2506  0F29                     	;# 
  2507  0F2A                     	;# 
  2508  0F2B                     	;# 
  2509  0F2C                     	;# 
  2510  0F2D                     	;# 
  2511  0F2E                     	;# 
  2512  0F2F                     	;# 
  2513  0F30                     	;# 
  2514  0F31                     	;# 
  2515  0F32                     	;# 
  2516  0F33                     	;# 
  2517  0F34                     	;# 
  2518  0F35                     	;# 
  2519  0F36                     	;# 
  2520  0F37                     	;# 
  2521  0FE4                     	;# 
  2522  0FE5                     	;# 
  2523  0FE6                     	;# 
  2524  0FE7                     	;# 
  2525  0FE8                     	;# 
  2526  0FE9                     	;# 
  2527  0FEA                     	;# 
  2528  0FEB                     	;# 
  2529  0FED                     	;# 
  2530  0FEE                     	;# 
  2531  0FEF                     	;# 
  2532  0000                     	;# 
  2533  0001                     	;# 
  2534  0002                     	;# 
  2535  0003                     	;# 
  2536  0004                     	;# 
  2537  0005                     	;# 
  2538  0006                     	;# 
  2539  0007                     	;# 
  2540  0008                     	;# 
  2541  0009                     	;# 
  2542  000A                     	;# 
  2543  000B                     	;# 
  2544  000C                     	;# 
  2545  000E                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0015                     	;# 
  2553  0016                     	;# 
  2554  0016                     	;# 
  2555  0017                     	;# 
  2556  0018                     	;# 
  2557  0019                     	;# 
  2558  0019                     	;# 
  2559  001A                     	;# 
  2560  001B                     	;# 
  2561  001C                     	;# 
  2562  001D                     	;# 
  2563  001E                     	;# 
  2564  001F                     	;# 
  2565  008C                     	;# 
  2566  008E                     	;# 
  2567  0090                     	;# 
  2568  0091                     	;# 
  2569  0092                     	;# 
  2570  0093                     	;# 
  2571  0094                     	;# 
  2572  0097                     	;# 
  2573  009B                     	;# 
  2574  009B                     	;# 
  2575  009C                     	;# 
  2576  009D                     	;# 
  2577  009E                     	;# 
  2578  009F                     	;# 
  2579  010C                     	;# 
  2580  010E                     	;# 
  2581  0111                     	;# 
  2582  0112                     	;# 
  2583  0113                     	;# 
  2584  0114                     	;# 
  2585  0115                     	;# 
  2586  0116                     	;# 
  2587  0117                     	;# 
  2588  0118                     	;# 
  2589  0119                     	;# 
  2590  018C                     	;# 
  2591  018E                     	;# 
  2592  0197                     	;# 
  2593  0199                     	;# 
  2594  0199                     	;# 
  2595  0199                     	;# 
  2596  019A                     	;# 
  2597  019A                     	;# 
  2598  019A                     	;# 
  2599  019B                     	;# 
  2600  019B                     	;# 
  2601  019B                     	;# 
  2602  019B                     	;# 
  2603  019B                     	;# 
  2604  019C                     	;# 
  2605  019C                     	;# 
  2606  019C                     	;# 
  2607  019D                     	;# 
  2608  019D                     	;# 
  2609  019D                     	;# 
  2610  019E                     	;# 
  2611  019E                     	;# 
  2612  019E                     	;# 
  2613  019F                     	;# 
  2614  019F                     	;# 
  2615  019F                     	;# 
  2616  019F                     	;# 
  2617  019F                     	;# 
  2618  020C                     	;# 
  2619  020E                     	;# 
  2620  0211                     	;# 
  2621  0211                     	;# 
  2622  0212                     	;# 
  2623  0212                     	;# 
  2624  0213                     	;# 
  2625  0213                     	;# 
  2626  0214                     	;# 
  2627  0214                     	;# 
  2628  0215                     	;# 
  2629  0215                     	;# 
  2630  0215                     	;# 
  2631  0215                     	;# 
  2632  0216                     	;# 
  2633  0216                     	;# 
  2634  0217                     	;# 
  2635  0217                     	;# 
  2636  0219                     	;# 
  2637  021A                     	;# 
  2638  021B                     	;# 
  2639  021C                     	;# 
  2640  021D                     	;# 
  2641  021D                     	;# 
  2642  021E                     	;# 
  2643  021F                     	;# 
  2644  028C                     	;# 
  2645  028E                     	;# 
  2646  0291                     	;# 
  2647  0291                     	;# 
  2648  0292                     	;# 
  2649  0293                     	;# 
  2650  0294                     	;# 
  2651  0295                     	;# 
  2652  0295                     	;# 
  2653  0296                     	;# 
  2654  0297                     	;# 
  2655  0298                     	;# 
  2656  029F                     	;# 
  2657  030C                     	;# 
  2658  030E                     	;# 
  2659  0311                     	;# 
  2660  0311                     	;# 
  2661  0312                     	;# 
  2662  0313                     	;# 
  2663  0314                     	;# 
  2664  0315                     	;# 
  2665  0315                     	;# 
  2666  0316                     	;# 
  2667  0317                     	;# 
  2668  0318                     	;# 
  2669  038C                     	;# 
  2670  038E                     	;# 
  2671  0391                     	;# 
  2672  0392                     	;# 
  2673  0393                     	;# 
  2674  0397                     	;# 
  2675  0398                     	;# 
  2676  0399                     	;# 
  2677  039A                     	;# 
  2678  039C                     	;# 
  2679  039D                     	;# 
  2680  039E                     	;# 
  2681  039F                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  041F                     	;# 
  2699  0498                     	;# 
  2700  0498                     	;# 
  2701  0499                     	;# 
  2702  049A                     	;# 
  2703  049B                     	;# 
  2704  049B                     	;# 
  2705  049C                     	;# 
  2706  049D                     	;# 
  2707  049E                     	;# 
  2708  049F                     	;# 
  2709  0617                     	;# 
  2710  0618                     	;# 
  2711  0619                     	;# 
  2712  0619                     	;# 
  2713  061A                     	;# 
  2714  061B                     	;# 
  2715  061C                     	;# 
  2716  061C                     	;# 
  2717  061F                     	;# 
  2718  0691                     	;# 
  2719  0692                     	;# 
  2720  0693                     	;# 
  2721  0694                     	;# 
  2722  0695                     	;# 
  2723  0696                     	;# 
  2724  0697                     	;# 
  2725  0698                     	;# 
  2726  0699                     	;# 
  2727  0711                     	;# 
  2728  0712                     	;# 
  2729  0713                     	;# 
  2730  0714                     	;# 
  2731  0715                     	;# 
  2732  0716                     	;# 
  2733  0717                     	;# 
  2734  0718                     	;# 
  2735  0719                     	;# 
  2736  0891                     	;# 
  2737  0891                     	;# 
  2738  0891                     	;# 
  2739  0891                     	;# 
  2740  0891                     	;# 
  2741  0891                     	;# 
  2742  0892                     	;# 
  2743  0892                     	;# 
  2744  0892                     	;# 
  2745  0893                     	;# 
  2746  0893                     	;# 
  2747  0893                     	;# 
  2748  0893                     	;# 
  2749  0893                     	;# 
  2750  0893                     	;# 
  2751  0894                     	;# 
  2752  0894                     	;# 
  2753  0894                     	;# 
  2754  0895                     	;# 
  2755  0895                     	;# 
  2756  0895                     	;# 
  2757  0896                     	;# 
  2758  0896                     	;# 
  2759  0896                     	;# 
  2760  089B                     	;# 
  2761  0911                     	;# 
  2762  0912                     	;# 
  2763  0913                     	;# 
  2764  0914                     	;# 
  2765  0915                     	;# 
  2766  0916                     	;# 
  2767  0918                     	;# 
  2768  0919                     	;# 
  2769  091A                     	;# 
  2770  091B                     	;# 
  2771  091C                     	;# 
  2772  091D                     	;# 
  2773  091E                     	;# 
  2774  091F                     	;# 
  2775  0E0F                     	;# 
  2776  0E10                     	;# 
  2777  0E11                     	;# 
  2778  0E12                     	;# 
  2779  0E13                     	;# 
  2780  0E14                     	;# 
  2781  0E15                     	;# 
  2782  0E16                     	;# 
  2783  0E17                     	;# 
  2784  0E18                     	;# 
  2785  0E19                     	;# 
  2786  0E1A                     	;# 
  2787  0E1B                     	;# 
  2788  0E1C                     	;# 
  2789  0E1D                     	;# 
  2790  0E1E                     	;# 
  2791  0E1F                     	;# 
  2792  0E20                     	;# 
  2793  0E21                     	;# 
  2794  0E22                     	;# 
  2795  0E24                     	;# 
  2796  0E25                     	;# 
  2797  0E28                     	;# 
  2798  0E29                     	;# 
  2799  0E2A                     	;# 
  2800  0E2B                     	;# 
  2801  0E2C                     	;# 
  2802  0E2D                     	;# 
  2803  0E2E                     	;# 
  2804  0E2F                     	;# 
  2805  0E90                     	;# 
  2806  0E91                     	;# 
  2807  0E92                     	;# 
  2808  0E94                     	;# 
  2809  0E95                     	;# 
  2810  0EA0                     	;# 
  2811  0EA1                     	;# 
  2812  0EA2                     	;# 
  2813  0EA3                     	;# 
  2814  0EA4                     	;# 
  2815  0EA5                     	;# 
  2816  0F0F                     	;# 
  2817  0F10                     	;# 
  2818  0F11                     	;# 
  2819  0F12                     	;# 
  2820  0F13                     	;# 
  2821  0F14                     	;# 
  2822  0F15                     	;# 
  2823  0F16                     	;# 
  2824  0F17                     	;# 
  2825  0F18                     	;# 
  2826  0F19                     	;# 
  2827  0F1A                     	;# 
  2828  0F1B                     	;# 
  2829  0F1C                     	;# 
  2830  0F1D                     	;# 
  2831  0F1E                     	;# 
  2832  0F1F                     	;# 
  2833  0F20                     	;# 
  2834  0F21                     	;# 
  2835  0F22                     	;# 
  2836  0F23                     	;# 
  2837  0F24                     	;# 
  2838  0F25                     	;# 
  2839  0F26                     	;# 
  2840  0F27                     	;# 
  2841  0F28                     	;# 
  2842  0F29                     	;# 
  2843  0F2A                     	;# 
  2844  0F2B                     	;# 
  2845  0F2C                     	;# 
  2846  0F2D                     	;# 
  2847  0F2E                     	;# 
  2848  0F2F                     	;# 
  2849  0F30                     	;# 
  2850  0F31                     	;# 
  2851  0F32                     	;# 
  2852  0F33                     	;# 
  2853  0F34                     	;# 
  2854  0F35                     	;# 
  2855  0F36                     	;# 
  2856  0F37                     	;# 
  2857  0FE4                     	;# 
  2858  0FE5                     	;# 
  2859  0FE6                     	;# 
  2860  0FE7                     	;# 
  2861  0FE8                     	;# 
  2862  0FE9                     	;# 
  2863  0FEA                     	;# 
  2864  0FEB                     	;# 
  2865  0FED                     	;# 
  2866  0FEE                     	;# 
  2867  0FEF                     	;# 
  2868  0000                     	;# 
  2869  0001                     	;# 
  2870  0002                     	;# 
  2871  0003                     	;# 
  2872  0004                     	;# 
  2873  0005                     	;# 
  2874  0006                     	;# 
  2875  0007                     	;# 
  2876  0008                     	;# 
  2877  0009                     	;# 
  2878  000A                     	;# 
  2879  000B                     	;# 
  2880  000C                     	;# 
  2881  000E                     	;# 
  2882  0010                     	;# 
  2883  0011                     	;# 
  2884  0012                     	;# 
  2885  0013                     	;# 
  2886  0014                     	;# 
  2887  0015                     	;# 
  2888  0015                     	;# 
  2889  0016                     	;# 
  2890  0016                     	;# 
  2891  0017                     	;# 
  2892  0018                     	;# 
  2893  0019                     	;# 
  2894  0019                     	;# 
  2895  001A                     	;# 
  2896  001B                     	;# 
  2897  001C                     	;# 
  2898  001D                     	;# 
  2899  001E                     	;# 
  2900  001F                     	;# 
  2901  008C                     	;# 
  2902  008E                     	;# 
  2903  0090                     	;# 
  2904  0091                     	;# 
  2905  0092                     	;# 
  2906  0093                     	;# 
  2907  0094                     	;# 
  2908  0097                     	;# 
  2909  009B                     	;# 
  2910  009B                     	;# 
  2911  009C                     	;# 
  2912  009D                     	;# 
  2913  009E                     	;# 
  2914  009F                     	;# 
  2915  010C                     	;# 
  2916  010E                     	;# 
  2917  0111                     	;# 
  2918  0112                     	;# 
  2919  0113                     	;# 
  2920  0114                     	;# 
  2921  0115                     	;# 
  2922  0116                     	;# 
  2923  0117                     	;# 
  2924  0118                     	;# 
  2925  0119                     	;# 
  2926  018C                     	;# 
  2927  018E                     	;# 
  2928  0197                     	;# 
  2929  0199                     	;# 
  2930  0199                     	;# 
  2931  0199                     	;# 
  2932  019A                     	;# 
  2933  019A                     	;# 
  2934  019A                     	;# 
  2935  019B                     	;# 
  2936  019B                     	;# 
  2937  019B                     	;# 
  2938  019B                     	;# 
  2939  019B                     	;# 
  2940  019C                     	;# 
  2941  019C                     	;# 
  2942  019C                     	;# 
  2943  019D                     	;# 
  2944  019D                     	;# 
  2945  019D                     	;# 
  2946  019E                     	;# 
  2947  019E                     	;# 
  2948  019E                     	;# 
  2949  019F                     	;# 
  2950  019F                     	;# 
  2951  019F                     	;# 
  2952  019F                     	;# 
  2953  019F                     	;# 
  2954  020C                     	;# 
  2955  020E                     	;# 
  2956  0211                     	;# 
  2957  0211                     	;# 
  2958  0212                     	;# 
  2959  0212                     	;# 
  2960  0213                     	;# 
  2961  0213                     	;# 
  2962  0214                     	;# 
  2963  0214                     	;# 
  2964  0215                     	;# 
  2965  0215                     	;# 
  2966  0215                     	;# 
  2967  0215                     	;# 
  2968  0216                     	;# 
  2969  0216                     	;# 
  2970  0217                     	;# 
  2971  0217                     	;# 
  2972  0219                     	;# 
  2973  021A                     	;# 
  2974  021B                     	;# 
  2975  021C                     	;# 
  2976  021D                     	;# 
  2977  021D                     	;# 
  2978  021E                     	;# 
  2979  021F                     	;# 
  2980  028C                     	;# 
  2981  028E                     	;# 
  2982  0291                     	;# 
  2983  0291                     	;# 
  2984  0292                     	;# 
  2985  0293                     	;# 
  2986  0294                     	;# 
  2987  0295                     	;# 
  2988  0295                     	;# 
  2989  0296                     	;# 
  2990  0297                     	;# 
  2991  0298                     	;# 
  2992  029F                     	;# 
  2993  030C                     	;# 
  2994  030E                     	;# 
  2995  0311                     	;# 
  2996  0311                     	;# 
  2997  0312                     	;# 
  2998  0313                     	;# 
  2999  0314                     	;# 
  3000  0315                     	;# 
  3001  0315                     	;# 
  3002  0316                     	;# 
  3003  0317                     	;# 
  3004  0318                     	;# 
  3005  038C                     	;# 
  3006  038E                     	;# 
  3007  0391                     	;# 
  3008  0392                     	;# 
  3009  0393                     	;# 
  3010  0397                     	;# 
  3011  0398                     	;# 
  3012  0399                     	;# 
  3013  039A                     	;# 
  3014  039C                     	;# 
  3015  039D                     	;# 
  3016  039E                     	;# 
  3017  039F                     	;# 
  3018  0411                     	;# 
  3019  0411                     	;# 
  3020  0412                     	;# 
  3021  0413                     	;# 
  3022  0414                     	;# 
  3023  0415                     	;# 
  3024  0416                     	;# 
  3025  0417                     	;# 
  3026  0418                     	;# 
  3027  0418                     	;# 
  3028  0419                     	;# 
  3029  041A                     	;# 
  3030  041B                     	;# 
  3031  041C                     	;# 
  3032  041D                     	;# 
  3033  041E                     	;# 
  3034  041F                     	;# 
  3035  0498                     	;# 
  3036  0498                     	;# 
  3037  0499                     	;# 
  3038  049A                     	;# 
  3039  049B                     	;# 
  3040  049B                     	;# 
  3041  049C                     	;# 
  3042  049D                     	;# 
  3043  049E                     	;# 
  3044  049F                     	;# 
  3045  0617                     	;# 
  3046  0618                     	;# 
  3047  0619                     	;# 
  3048  0619                     	;# 
  3049  061A                     	;# 
  3050  061B                     	;# 
  3051  061C                     	;# 
  3052  061C                     	;# 
  3053  061F                     	;# 
  3054  0691                     	;# 
  3055  0692                     	;# 
  3056  0693                     	;# 
  3057  0694                     	;# 
  3058  0695                     	;# 
  3059  0696                     	;# 
  3060  0697                     	;# 
  3061  0698                     	;# 
  3062  0699                     	;# 
  3063  0711                     	;# 
  3064  0712                     	;# 
  3065  0713                     	;# 
  3066  0714                     	;# 
  3067  0715                     	;# 
  3068  0716                     	;# 
  3069  0717                     	;# 
  3070  0718                     	;# 
  3071  0719                     	;# 
  3072  0891                     	;# 
  3073  0891                     	;# 
  3074  0891                     	;# 
  3075  0891                     	;# 
  3076  0891                     	;# 
  3077  0891                     	;# 
  3078  0892                     	;# 
  3079  0892                     	;# 
  3080  0892                     	;# 
  3081  0893                     	;# 
  3082  0893                     	;# 
  3083  0893                     	;# 
  3084  0893                     	;# 
  3085  0893                     	;# 
  3086  0893                     	;# 
  3087  0894                     	;# 
  3088  0894                     	;# 
  3089  0894                     	;# 
  3090  0895                     	;# 
  3091  0895                     	;# 
  3092  0895                     	;# 
  3093  0896                     	;# 
  3094  0896                     	;# 
  3095  0896                     	;# 
  3096  089B                     	;# 
  3097  0911                     	;# 
  3098  0912                     	;# 
  3099  0913                     	;# 
  3100  0914                     	;# 
  3101  0915                     	;# 
  3102  0916                     	;# 
  3103  0918                     	;# 
  3104  0919                     	;# 
  3105  091A                     	;# 
  3106  091B                     	;# 
  3107  091C                     	;# 
  3108  091D                     	;# 
  3109  091E                     	;# 
  3110  091F                     	;# 
  3111  0E0F                     	;# 
  3112  0E10                     	;# 
  3113  0E11                     	;# 
  3114  0E12                     	;# 
  3115  0E13                     	;# 
  3116  0E14                     	;# 
  3117  0E15                     	;# 
  3118  0E16                     	;# 
  3119  0E17                     	;# 
  3120  0E18                     	;# 
  3121  0E19                     	;# 
  3122  0E1A                     	;# 
  3123  0E1B                     	;# 
  3124  0E1C                     	;# 
  3125  0E1D                     	;# 
  3126  0E1E                     	;# 
  3127  0E1F                     	;# 
  3128  0E20                     	;# 
  3129  0E21                     	;# 
  3130  0E22                     	;# 
  3131  0E24                     	;# 
  3132  0E25                     	;# 
  3133  0E28                     	;# 
  3134  0E29                     	;# 
  3135  0E2A                     	;# 
  3136  0E2B                     	;# 
  3137  0E2C                     	;# 
  3138  0E2D                     	;# 
  3139  0E2E                     	;# 
  3140  0E2F                     	;# 
  3141  0E90                     	;# 
  3142  0E91                     	;# 
  3143  0E92                     	;# 
  3144  0E94                     	;# 
  3145  0E95                     	;# 
  3146  0EA0                     	;# 
  3147  0EA1                     	;# 
  3148  0EA2                     	;# 
  3149  0EA3                     	;# 
  3150  0EA4                     	;# 
  3151  0EA5                     	;# 
  3152  0F0F                     	;# 
  3153  0F10                     	;# 
  3154  0F11                     	;# 
  3155  0F12                     	;# 
  3156  0F13                     	;# 
  3157  0F14                     	;# 
  3158  0F15                     	;# 
  3159  0F16                     	;# 
  3160  0F17                     	;# 
  3161  0F18                     	;# 
  3162  0F19                     	;# 
  3163  0F1A                     	;# 
  3164  0F1B                     	;# 
  3165  0F1C                     	;# 
  3166  0F1D                     	;# 
  3167  0F1E                     	;# 
  3168  0F1F                     	;# 
  3169  0F20                     	;# 
  3170  0F21                     	;# 
  3171  0F22                     	;# 
  3172  0F23                     	;# 
  3173  0F24                     	;# 
  3174  0F25                     	;# 
  3175  0F26                     	;# 
  3176  0F27                     	;# 
  3177  0F28                     	;# 
  3178  0F29                     	;# 
  3179  0F2A                     	;# 
  3180  0F2B                     	;# 
  3181  0F2C                     	;# 
  3182  0F2D                     	;# 
  3183  0F2E                     	;# 
  3184  0F2F                     	;# 
  3185  0F30                     	;# 
  3186  0F31                     	;# 
  3187  0F32                     	;# 
  3188  0F33                     	;# 
  3189  0F34                     	;# 
  3190  0F35                     	;# 
  3191  0F36                     	;# 
  3192  0F37                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204  0000                     	;# 
  3205  0001                     	;# 
  3206  0002                     	;# 
  3207  0003                     	;# 
  3208  0004                     	;# 
  3209  0005                     	;# 
  3210  0006                     	;# 
  3211  0007                     	;# 
  3212  0008                     	;# 
  3213  0009                     	;# 
  3214  000A                     	;# 
  3215  000B                     	;# 
  3216  000C                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0014                     	;# 
  3223  0015                     	;# 
  3224  0015                     	;# 
  3225  0016                     	;# 
  3226  0016                     	;# 
  3227  0017                     	;# 
  3228  0018                     	;# 
  3229  0019                     	;# 
  3230  0019                     	;# 
  3231  001A                     	;# 
  3232  001B                     	;# 
  3233  001C                     	;# 
  3234  001D                     	;# 
  3235  001E                     	;# 
  3236  001F                     	;# 
  3237  008C                     	;# 
  3238  008E                     	;# 
  3239  0090                     	;# 
  3240  0091                     	;# 
  3241  0092                     	;# 
  3242  0093                     	;# 
  3243  0094                     	;# 
  3244  0097                     	;# 
  3245  009B                     	;# 
  3246  009B                     	;# 
  3247  009C                     	;# 
  3248  009D                     	;# 
  3249  009E                     	;# 
  3250  009F                     	;# 
  3251  010C                     	;# 
  3252  010E                     	;# 
  3253  0111                     	;# 
  3254  0112                     	;# 
  3255  0113                     	;# 
  3256  0114                     	;# 
  3257  0115                     	;# 
  3258  0116                     	;# 
  3259  0117                     	;# 
  3260  0118                     	;# 
  3261  0119                     	;# 
  3262  018C                     	;# 
  3263  018E                     	;# 
  3264  0197                     	;# 
  3265  0199                     	;# 
  3266  0199                     	;# 
  3267  0199                     	;# 
  3268  019A                     	;# 
  3269  019A                     	;# 
  3270  019A                     	;# 
  3271  019B                     	;# 
  3272  019B                     	;# 
  3273  019B                     	;# 
  3274  019B                     	;# 
  3275  019B                     	;# 
  3276  019C                     	;# 
  3277  019C                     	;# 
  3278  019C                     	;# 
  3279  019D                     	;# 
  3280  019D                     	;# 
  3281  019D                     	;# 
  3282  019E                     	;# 
  3283  019E                     	;# 
  3284  019E                     	;# 
  3285  019F                     	;# 
  3286  019F                     	;# 
  3287  019F                     	;# 
  3288  019F                     	;# 
  3289  019F                     	;# 
  3290  020C                     	;# 
  3291  020E                     	;# 
  3292  0211                     	;# 
  3293  0211                     	;# 
  3294  0212                     	;# 
  3295  0212                     	;# 
  3296  0213                     	;# 
  3297  0213                     	;# 
  3298  0214                     	;# 
  3299  0214                     	;# 
  3300  0215                     	;# 
  3301  0215                     	;# 
  3302  0215                     	;# 
  3303  0215                     	;# 
  3304  0216                     	;# 
  3305  0216                     	;# 
  3306  0217                     	;# 
  3307  0217                     	;# 
  3308  0219                     	;# 
  3309  021A                     	;# 
  3310  021B                     	;# 
  3311  021C                     	;# 
  3312  021D                     	;# 
  3313  021D                     	;# 
  3314  021E                     	;# 
  3315  021F                     	;# 
  3316  028C                     	;# 
  3317  028E                     	;# 
  3318  0291                     	;# 
  3319  0291                     	;# 
  3320  0292                     	;# 
  3321  0293                     	;# 
  3322  0294                     	;# 
  3323  0295                     	;# 
  3324  0295                     	;# 
  3325  0296                     	;# 
  3326  0297                     	;# 
  3327  0298                     	;# 
  3328  029F                     	;# 
  3329  030C                     	;# 
  3330  030E                     	;# 
  3331  0311                     	;# 
  3332  0311                     	;# 
  3333  0312                     	;# 
  3334  0313                     	;# 
  3335  0314                     	;# 
  3336  0315                     	;# 
  3337  0315                     	;# 
  3338  0316                     	;# 
  3339  0317                     	;# 
  3340  0318                     	;# 
  3341  038C                     	;# 
  3342  038E                     	;# 
  3343  0391                     	;# 
  3344  0392                     	;# 
  3345  0393                     	;# 
  3346  0397                     	;# 
  3347  0398                     	;# 
  3348  0399                     	;# 
  3349  039A                     	;# 
  3350  039C                     	;# 
  3351  039D                     	;# 
  3352  039E                     	;# 
  3353  039F                     	;# 
  3354  0411                     	;# 
  3355  0411                     	;# 
  3356  0412                     	;# 
  3357  0413                     	;# 
  3358  0414                     	;# 
  3359  0415                     	;# 
  3360  0416                     	;# 
  3361  0417                     	;# 
  3362  0418                     	;# 
  3363  0418                     	;# 
  3364  0419                     	;# 
  3365  041A                     	;# 
  3366  041B                     	;# 
  3367  041C                     	;# 
  3368  041D                     	;# 
  3369  041E                     	;# 
  3370  041F                     	;# 
  3371  0498                     	;# 
  3372  0498                     	;# 
  3373  0499                     	;# 
  3374  049A                     	;# 
  3375  049B                     	;# 
  3376  049B                     	;# 
  3377  049C                     	;# 
  3378  049D                     	;# 
  3379  049E                     	;# 
  3380  049F                     	;# 
  3381  0617                     	;# 
  3382  0618                     	;# 
  3383  0619                     	;# 
  3384  0619                     	;# 
  3385  061A                     	;# 
  3386  061B                     	;# 
  3387  061C                     	;# 
  3388  061C                     	;# 
  3389  061F                     	;# 
  3390  0691                     	;# 
  3391  0692                     	;# 
  3392  0693                     	;# 
  3393  0694                     	;# 
  3394  0695                     	;# 
  3395  0696                     	;# 
  3396  0697                     	;# 
  3397  0698                     	;# 
  3398  0699                     	;# 
  3399  0711                     	;# 
  3400  0712                     	;# 
  3401  0713                     	;# 
  3402  0714                     	;# 
  3403  0715                     	;# 
  3404  0716                     	;# 
  3405  0717                     	;# 
  3406  0718                     	;# 
  3407  0719                     	;# 
  3408  0891                     	;# 
  3409  0891                     	;# 
  3410  0891                     	;# 
  3411  0891                     	;# 
  3412  0891                     	;# 
  3413  0891                     	;# 
  3414  0892                     	;# 
  3415  0892                     	;# 
  3416  0892                     	;# 
  3417  0893                     	;# 
  3418  0893                     	;# 
  3419  0893                     	;# 
  3420  0893                     	;# 
  3421  0893                     	;# 
  3422  0893                     	;# 
  3423  0894                     	;# 
  3424  0894                     	;# 
  3425  0894                     	;# 
  3426  0895                     	;# 
  3427  0895                     	;# 
  3428  0895                     	;# 
  3429  0896                     	;# 
  3430  0896                     	;# 
  3431  0896                     	;# 
  3432  089B                     	;# 
  3433  0911                     	;# 
  3434  0912                     	;# 
  3435  0913                     	;# 
  3436  0914                     	;# 
  3437  0915                     	;# 
  3438  0916                     	;# 
  3439  0918                     	;# 
  3440  0919                     	;# 
  3441  091A                     	;# 
  3442  091B                     	;# 
  3443  091C                     	;# 
  3444  091D                     	;# 
  3445  091E                     	;# 
  3446  091F                     	;# 
  3447  0E0F                     	;# 
  3448  0E10                     	;# 
  3449  0E11                     	;# 
  3450  0E12                     	;# 
  3451  0E13                     	;# 
  3452  0E14                     	;# 
  3453  0E15                     	;# 
  3454  0E16                     	;# 
  3455  0E17                     	;# 
  3456  0E18                     	;# 
  3457  0E19                     	;# 
  3458  0E1A                     	;# 
  3459  0E1B                     	;# 
  3460  0E1C                     	;# 
  3461  0E1D                     	;# 
  3462  0E1E                     	;# 
  3463  0E1F                     	;# 
  3464  0E20                     	;# 
  3465  0E21                     	;# 
  3466  0E22                     	;# 
  3467  0E24                     	;# 
  3468  0E25                     	;# 
  3469  0E28                     	;# 
  3470  0E29                     	;# 
  3471  0E2A                     	;# 
  3472  0E2B                     	;# 
  3473  0E2C                     	;# 
  3474  0E2D                     	;# 
  3475  0E2E                     	;# 
  3476  0E2F                     	;# 
  3477  0E90                     	;# 
  3478  0E91                     	;# 
  3479  0E92                     	;# 
  3480  0E94                     	;# 
  3481  0E95                     	;# 
  3482  0EA0                     	;# 
  3483  0EA1                     	;# 
  3484  0EA2                     	;# 
  3485  0EA3                     	;# 
  3486  0EA4                     	;# 
  3487  0EA5                     	;# 
  3488  0F0F                     	;# 
  3489  0F10                     	;# 
  3490  0F11                     	;# 
  3491  0F12                     	;# 
  3492  0F13                     	;# 
  3493  0F14                     	;# 
  3494  0F15                     	;# 
  3495  0F16                     	;# 
  3496  0F17                     	;# 
  3497  0F18                     	;# 
  3498  0F19                     	;# 
  3499  0F1A                     	;# 
  3500  0F1B                     	;# 
  3501  0F1C                     	;# 
  3502  0F1D                     	;# 
  3503  0F1E                     	;# 
  3504  0F1F                     	;# 
  3505  0F20                     	;# 
  3506  0F21                     	;# 
  3507  0F22                     	;# 
  3508  0F23                     	;# 
  3509  0F24                     	;# 
  3510  0F25                     	;# 
  3511  0F26                     	;# 
  3512  0F27                     	;# 
  3513  0F28                     	;# 
  3514  0F29                     	;# 
  3515  0F2A                     	;# 
  3516  0F2B                     	;# 
  3517  0F2C                     	;# 
  3518  0F2D                     	;# 
  3519  0F2E                     	;# 
  3520  0F2F                     	;# 
  3521  0F30                     	;# 
  3522  0F31                     	;# 
  3523  0F32                     	;# 
  3524  0F33                     	;# 
  3525  0F34                     	;# 
  3526  0F35                     	;# 
  3527  0F36                     	;# 
  3528  0F37                     	;# 
  3529  0FE4                     	;# 
  3530  0FE5                     	;# 
  3531  0FE6                     	;# 
  3532  0FE7                     	;# 
  3533  0FE8                     	;# 
  3534  0FE9                     	;# 
  3535  0FEA                     	;# 
  3536  0FEB                     	;# 
  3537  0FED                     	;# 
  3538  0FEE                     	;# 
  3539  0FEF                     	;# 
  3540  0000                     	;# 
  3541  0001                     	;# 
  3542  0002                     	;# 
  3543  0003                     	;# 
  3544  0004                     	;# 
  3545  0005                     	;# 
  3546  0006                     	;# 
  3547  0007                     	;# 
  3548  0008                     	;# 
  3549  0009                     	;# 
  3550  000A                     	;# 
  3551  000B                     	;# 
  3552  000C                     	;# 
  3553  000E                     	;# 
  3554  0010                     	;# 
  3555  0011                     	;# 
  3556  0012                     	;# 
  3557  0013                     	;# 
  3558  0014                     	;# 
  3559  0015                     	;# 
  3560  0015                     	;# 
  3561  0016                     	;# 
  3562  0016                     	;# 
  3563  0017                     	;# 
  3564  0018                     	;# 
  3565  0019                     	;# 
  3566  0019                     	;# 
  3567  001A                     	;# 
  3568  001B                     	;# 
  3569  001C                     	;# 
  3570  001D                     	;# 
  3571  001E                     	;# 
  3572  001F                     	;# 
  3573  008C                     	;# 
  3574  008E                     	;# 
  3575  0090                     	;# 
  3576  0091                     	;# 
  3577  0092                     	;# 
  3578  0093                     	;# 
  3579  0094                     	;# 
  3580  0097                     	;# 
  3581  009B                     	;# 
  3582  009B                     	;# 
  3583  009C                     	;# 
  3584  009D                     	;# 
  3585  009E                     	;# 
  3586  009F                     	;# 
  3587  010C                     	;# 
  3588  010E                     	;# 
  3589  0111                     	;# 
  3590  0112                     	;# 
  3591  0113                     	;# 
  3592  0114                     	;# 
  3593  0115                     	;# 
  3594  0116                     	;# 
  3595  0117                     	;# 
  3596  0118                     	;# 
  3597  0119                     	;# 
  3598  018C                     	;# 
  3599  018E                     	;# 
  3600  0197                     	;# 
  3601  0199                     	;# 
  3602  0199                     	;# 
  3603  0199                     	;# 
  3604  019A                     	;# 
  3605  019A                     	;# 
  3606  019A                     	;# 
  3607  019B                     	;# 
  3608  019B                     	;# 
  3609  019B                     	;# 
  3610  019B                     	;# 
  3611  019B                     	;# 
  3612  019C                     	;# 
  3613  019C                     	;# 
  3614  019C                     	;# 
  3615  019D                     	;# 
  3616  019D                     	;# 
  3617  019D                     	;# 
  3618  019E                     	;# 
  3619  019E                     	;# 
  3620  019E                     	;# 
  3621  019F                     	;# 
  3622  019F                     	;# 
  3623  019F                     	;# 
  3624  019F                     	;# 
  3625  019F                     	;# 
  3626  020C                     	;# 
  3627  020E                     	;# 
  3628  0211                     	;# 
  3629  0211                     	;# 
  3630  0212                     	;# 
  3631  0212                     	;# 
  3632  0213                     	;# 
  3633  0213                     	;# 
  3634  0214                     	;# 
  3635  0214                     	;# 
  3636  0215                     	;# 
  3637  0215                     	;# 
  3638  0215                     	;# 
  3639  0215                     	;# 
  3640  0216                     	;# 
  3641  0216                     	;# 
  3642  0217                     	;# 
  3643  0217                     	;# 
  3644  0219                     	;# 
  3645  021A                     	;# 
  3646  021B                     	;# 
  3647  021C                     	;# 
  3648  021D                     	;# 
  3649  021D                     	;# 
  3650  021E                     	;# 
  3651  021F                     	;# 
  3652  028C                     	;# 
  3653  028E                     	;# 
  3654  0291                     	;# 
  3655  0291                     	;# 
  3656  0292                     	;# 
  3657  0293                     	;# 
  3658  0294                     	;# 
  3659  0295                     	;# 
  3660  0295                     	;# 
  3661  0296                     	;# 
  3662  0297                     	;# 
  3663  0298                     	;# 
  3664  029F                     	;# 
  3665  030C                     	;# 
  3666  030E                     	;# 
  3667  0311                     	;# 
  3668  0311                     	;# 
  3669  0312                     	;# 
  3670  0313                     	;# 
  3671  0314                     	;# 
  3672  0315                     	;# 
  3673  0315                     	;# 
  3674  0316                     	;# 
  3675  0317                     	;# 
  3676  0318                     	;# 
  3677  038C                     	;# 
  3678  038E                     	;# 
  3679  0391                     	;# 
  3680  0392                     	;# 
  3681  0393                     	;# 
  3682  0397                     	;# 
  3683  0398                     	;# 
  3684  0399                     	;# 
  3685  039A                     	;# 
  3686  039C                     	;# 
  3687  039D                     	;# 
  3688  039E                     	;# 
  3689  039F                     	;# 
  3690  0411                     	;# 
  3691  0411                     	;# 
  3692  0412                     	;# 
  3693  0413                     	;# 
  3694  0414                     	;# 
  3695  0415                     	;# 
  3696  0416                     	;# 
  3697  0417                     	;# 
  3698  0418                     	;# 
  3699  0418                     	;# 
  3700  0419                     	;# 
  3701  041A                     	;# 
  3702  041B                     	;# 
  3703  041C                     	;# 
  3704  041D                     	;# 
  3705  041E                     	;# 
  3706  041F                     	;# 
  3707  0498                     	;# 
  3708  0498                     	;# 
  3709  0499                     	;# 
  3710  049A                     	;# 
  3711  049B                     	;# 
  3712  049B                     	;# 
  3713  049C                     	;# 
  3714  049D                     	;# 
  3715  049E                     	;# 
  3716  049F                     	;# 
  3717  0617                     	;# 
  3718  0618                     	;# 
  3719  0619                     	;# 
  3720  0619                     	;# 
  3721  061A                     	;# 
  3722  061B                     	;# 
  3723  061C                     	;# 
  3724  061C                     	;# 
  3725  061F                     	;# 
  3726  0691                     	;# 
  3727  0692                     	;# 
  3728  0693                     	;# 
  3729  0694                     	;# 
  3730  0695                     	;# 
  3731  0696                     	;# 
  3732  0697                     	;# 
  3733  0698                     	;# 
  3734  0699                     	;# 
  3735  0711                     	;# 
  3736  0712                     	;# 
  3737  0713                     	;# 
  3738  0714                     	;# 
  3739  0715                     	;# 
  3740  0716                     	;# 
  3741  0717                     	;# 
  3742  0718                     	;# 
  3743  0719                     	;# 
  3744  0891                     	;# 
  3745  0891                     	;# 
  3746  0891                     	;# 
  3747  0891                     	;# 
  3748  0891                     	;# 
  3749  0891                     	;# 
  3750  0892                     	;# 
  3751  0892                     	;# 
  3752  0892                     	;# 
  3753  0893                     	;# 
  3754  0893                     	;# 
  3755  0893                     	;# 
  3756  0893                     	;# 
  3757  0893                     	;# 
  3758  0893                     	;# 
  3759  0894                     	;# 
  3760  0894                     	;# 
  3761  0894                     	;# 
  3762  0895                     	;# 
  3763  0895                     	;# 
  3764  0895                     	;# 
  3765  0896                     	;# 
  3766  0896                     	;# 
  3767  0896                     	;# 
  3768  089B                     	;# 
  3769  0911                     	;# 
  3770  0912                     	;# 
  3771  0913                     	;# 
  3772  0914                     	;# 
  3773  0915                     	;# 
  3774  0916                     	;# 
  3775  0918                     	;# 
  3776  0919                     	;# 
  3777  091A                     	;# 
  3778  091B                     	;# 
  3779  091C                     	;# 
  3780  091D                     	;# 
  3781  091E                     	;# 
  3782  091F                     	;# 
  3783  0E0F                     	;# 
  3784  0E10                     	;# 
  3785  0E11                     	;# 
  3786  0E12                     	;# 
  3787  0E13                     	;# 
  3788  0E14                     	;# 
  3789  0E15                     	;# 
  3790  0E16                     	;# 
  3791  0E17                     	;# 
  3792  0E18                     	;# 
  3793  0E19                     	;# 
  3794  0E1A                     	;# 
  3795  0E1B                     	;# 
  3796  0E1C                     	;# 
  3797  0E1D                     	;# 
  3798  0E1E                     	;# 
  3799  0E1F                     	;# 
  3800  0E20                     	;# 
  3801  0E21                     	;# 
  3802  0E22                     	;# 
  3803  0E24                     	;# 
  3804  0E25                     	;# 
  3805  0E28                     	;# 
  3806  0E29                     	;# 
  3807  0E2A                     	;# 
  3808  0E2B                     	;# 
  3809  0E2C                     	;# 
  3810  0E2D                     	;# 
  3811  0E2E                     	;# 
  3812  0E2F                     	;# 
  3813  0E90                     	;# 
  3814  0E91                     	;# 
  3815  0E92                     	;# 
  3816  0E94                     	;# 
  3817  0E95                     	;# 
  3818  0EA0                     	;# 
  3819  0EA1                     	;# 
  3820  0EA2                     	;# 
  3821  0EA3                     	;# 
  3822  0EA4                     	;# 
  3823  0EA5                     	;# 
  3824  0F0F                     	;# 
  3825  0F10                     	;# 
  3826  0F11                     	;# 
  3827  0F12                     	;# 
  3828  0F13                     	;# 
  3829  0F14                     	;# 
  3830  0F15                     	;# 
  3831  0F16                     	;# 
  3832  0F17                     	;# 
  3833  0F18                     	;# 
  3834  0F19                     	;# 
  3835  0F1A                     	;# 
  3836  0F1B                     	;# 
  3837  0F1C                     	;# 
  3838  0F1D                     	;# 
  3839  0F1E                     	;# 
  3840  0F1F                     	;# 
  3841  0F20                     	;# 
  3842  0F21                     	;# 
  3843  0F22                     	;# 
  3844  0F23                     	;# 
  3845  0F24                     	;# 
  3846  0F25                     	;# 
  3847  0F26                     	;# 
  3848  0F27                     	;# 
  3849  0F28                     	;# 
  3850  0F29                     	;# 
  3851  0F2A                     	;# 
  3852  0F2B                     	;# 
  3853  0F2C                     	;# 
  3854  0F2D                     	;# 
  3855  0F2E                     	;# 
  3856  0F2F                     	;# 
  3857  0F30                     	;# 
  3858  0F31                     	;# 
  3859  0F32                     	;# 
  3860  0F33                     	;# 
  3861  0F34                     	;# 
  3862  0F35                     	;# 
  3863  0F36                     	;# 
  3864  0F37                     	;# 
  3865  0FE4                     	;# 
  3866  0FE5                     	;# 
  3867  0FE6                     	;# 
  3868  0FE7                     	;# 
  3869  0FE8                     	;# 
  3870  0FE9                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEF                     	;# 
  3876  0000                     	;# 
  3877  0001                     	;# 
  3878  0002                     	;# 
  3879  0003                     	;# 
  3880  0004                     	;# 
  3881  0005                     	;# 
  3882  0006                     	;# 
  3883  0007                     	;# 
  3884  0008                     	;# 
  3885  0009                     	;# 
  3886  000A                     	;# 
  3887  000B                     	;# 
  3888  000C                     	;# 
  3889  000E                     	;# 
  3890  0010                     	;# 
  3891  0011                     	;# 
  3892  0012                     	;# 
  3893  0013                     	;# 
  3894  0014                     	;# 
  3895  0015                     	;# 
  3896  0015                     	;# 
  3897  0016                     	;# 
  3898  0016                     	;# 
  3899  0017                     	;# 
  3900  0018                     	;# 
  3901  0019                     	;# 
  3902  0019                     	;# 
  3903  001A                     	;# 
  3904  001B                     	;# 
  3905  001C                     	;# 
  3906  001D                     	;# 
  3907  001E                     	;# 
  3908  001F                     	;# 
  3909  008C                     	;# 
  3910  008E                     	;# 
  3911  0090                     	;# 
  3912  0091                     	;# 
  3913  0092                     	;# 
  3914  0093                     	;# 
  3915  0094                     	;# 
  3916  0097                     	;# 
  3917  009B                     	;# 
  3918  009B                     	;# 
  3919  009C                     	;# 
  3920  009D                     	;# 
  3921  009E                     	;# 
  3922  009F                     	;# 
  3923  010C                     	;# 
  3924  010E                     	;# 
  3925  0111                     	;# 
  3926  0112                     	;# 
  3927  0113                     	;# 
  3928  0114                     	;# 
  3929  0115                     	;# 
  3930  0116                     	;# 
  3931  0117                     	;# 
  3932  0118                     	;# 
  3933  0119                     	;# 
  3934  018C                     	;# 
  3935  018E                     	;# 
  3936  0197                     	;# 
  3937  0199                     	;# 
  3938  0199                     	;# 
  3939  0199                     	;# 
  3940  019A                     	;# 
  3941  019A                     	;# 
  3942  019A                     	;# 
  3943  019B                     	;# 
  3944  019B                     	;# 
  3945  019B                     	;# 
  3946  019B                     	;# 
  3947  019B                     	;# 
  3948  019C                     	;# 
  3949  019C                     	;# 
  3950  019C                     	;# 
  3951  019D                     	;# 
  3952  019D                     	;# 
  3953  019D                     	;# 
  3954  019E                     	;# 
  3955  019E                     	;# 
  3956  019E                     	;# 
  3957  019F                     	;# 
  3958  019F                     	;# 
  3959  019F                     	;# 
  3960  019F                     	;# 
  3961  019F                     	;# 
  3962  020C                     	;# 
  3963  020E                     	;# 
  3964  0211                     	;# 
  3965  0211                     	;# 
  3966  0212                     	;# 
  3967  0212                     	;# 
  3968  0213                     	;# 
  3969  0213                     	;# 
  3970  0214                     	;# 
  3971  0214                     	;# 
  3972  0215                     	;# 
  3973  0215                     	;# 
  3974  0215                     	;# 
  3975  0215                     	;# 
  3976  0216                     	;# 
  3977  0216                     	;# 
  3978  0217                     	;# 
  3979  0217                     	;# 
  3980  0219                     	;# 
  3981  021A                     	;# 
  3982  021B                     	;# 
  3983  021C                     	;# 
  3984  021D                     	;# 
  3985  021D                     	;# 
  3986  021E                     	;# 
  3987  021F                     	;# 
  3988  028C                     	;# 
  3989  028E                     	;# 
  3990  0291                     	;# 
  3991  0291                     	;# 
  3992  0292                     	;# 
  3993  0293                     	;# 
  3994  0294                     	;# 
  3995  0295                     	;# 
  3996  0295                     	;# 
  3997  0296                     	;# 
  3998  0297                     	;# 
  3999  0298                     	;# 
  4000  029F                     	;# 
  4001  030C                     	;# 
  4002  030E                     	;# 
  4003  0311                     	;# 
  4004  0311                     	;# 
  4005  0312                     	;# 
  4006  0313                     	;# 
  4007  0314                     	;# 
  4008  0315                     	;# 
  4009  0315                     	;# 
  4010  0316                     	;# 
  4011  0317                     	;# 
  4012  0318                     	;# 
  4013  038C                     	;# 
  4014  038E                     	;# 
  4015  0391                     	;# 
  4016  0392                     	;# 
  4017  0393                     	;# 
  4018  0397                     	;# 
  4019  0398                     	;# 
  4020  0399                     	;# 
  4021  039A                     	;# 
  4022  039C                     	;# 
  4023  039D                     	;# 
  4024  039E                     	;# 
  4025  039F                     	;# 
  4026  0411                     	;# 
  4027  0411                     	;# 
  4028  0412                     	;# 
  4029  0413                     	;# 
  4030  0414                     	;# 
  4031  0415                     	;# 
  4032  0416                     	;# 
  4033  0417                     	;# 
  4034  0418                     	;# 
  4035  0418                     	;# 
  4036  0419                     	;# 
  4037  041A                     	;# 
  4038  041B                     	;# 
  4039  041C                     	;# 
  4040  041D                     	;# 
  4041  041E                     	;# 
  4042  041F                     	;# 
  4043  0498                     	;# 
  4044  0498                     	;# 
  4045  0499                     	;# 
  4046  049A                     	;# 
  4047  049B                     	;# 
  4048  049B                     	;# 
  4049  049C                     	;# 
  4050  049D                     	;# 
  4051  049E                     	;# 
  4052  049F                     	;# 
  4053  0617                     	;# 
  4054  0618                     	;# 
  4055  0619                     	;# 
  4056  0619                     	;# 
  4057  061A                     	;# 
  4058  061B                     	;# 
  4059  061C                     	;# 
  4060  061C                     	;# 
  4061  061F                     	;# 
  4062  0691                     	;# 
  4063  0692                     	;# 
  4064  0693                     	;# 
  4065  0694                     	;# 
  4066  0695                     	;# 
  4067  0696                     	;# 
  4068  0697                     	;# 
  4069  0698                     	;# 
  4070  0699                     	;# 
  4071  0711                     	;# 
  4072  0712                     	;# 
  4073  0713                     	;# 
  4074  0714                     	;# 
  4075  0715                     	;# 
  4076  0716                     	;# 
  4077  0717                     	;# 
  4078  0718                     	;# 
  4079  0719                     	;# 
  4080  0891                     	;# 
  4081  0891                     	;# 
  4082  0891                     	;# 
  4083  0891                     	;# 
  4084  0891                     	;# 
  4085  0891                     	;# 
  4086  0892                     	;# 
  4087  0892                     	;# 
  4088  0892                     	;# 
  4089  0893                     	;# 
  4090  0893                     	;# 
  4091  0893                     	;# 
  4092  0893                     	;# 
  4093  0893                     	;# 
  4094  0893                     	;# 
  4095  0894                     	;# 
  4096  0894                     	;# 
  4097  0894                     	;# 
  4098  0895                     	;# 
  4099  0895                     	;# 
  4100  0895                     	;# 
  4101  0896                     	;# 
  4102  0896                     	;# 
  4103  0896                     	;# 
  4104  089B                     	;# 
  4105  0911                     	;# 
  4106  0912                     	;# 
  4107  0913                     	;# 
  4108  0914                     	;# 
  4109  0915                     	;# 
  4110  0916                     	;# 
  4111  0918                     	;# 
  4112  0919                     	;# 
  4113  091A                     	;# 
  4114  091B                     	;# 
  4115  091C                     	;# 
  4116  091D                     	;# 
  4117  091E                     	;# 
  4118  091F                     	;# 
  4119  0E0F                     	;# 
  4120  0E10                     	;# 
  4121  0E11                     	;# 
  4122  0E12                     	;# 
  4123  0E13                     	;# 
  4124  0E14                     	;# 
  4125  0E15                     	;# 
  4126  0E16                     	;# 
  4127  0E17                     	;# 
  4128  0E18                     	;# 
  4129  0E19                     	;# 
  4130  0E1A                     	;# 
  4131  0E1B                     	;# 
  4132  0E1C                     	;# 
  4133  0E1D                     	;# 
  4134  0E1E                     	;# 
  4135  0E1F                     	;# 
  4136  0E20                     	;# 
  4137  0E21                     	;# 
  4138  0E22                     	;# 
  4139  0E24                     	;# 
  4140  0E25                     	;# 
  4141  0E28                     	;# 
  4142  0E29                     	;# 
  4143  0E2A                     	;# 
  4144  0E2B                     	;# 
  4145  0E2C                     	;# 
  4146  0E2D                     	;# 
  4147  0E2E                     	;# 
  4148  0E2F                     	;# 
  4149  0E90                     	;# 
  4150  0E91                     	;# 
  4151  0E92                     	;# 
  4152  0E94                     	;# 
  4153  0E95                     	;# 
  4154  0EA0                     	;# 
  4155  0EA1                     	;# 
  4156  0EA2                     	;# 
  4157  0EA3                     	;# 
  4158  0EA4                     	;# 
  4159  0EA5                     	;# 
  4160  0F0F                     	;# 
  4161  0F10                     	;# 
  4162  0F11                     	;# 
  4163  0F12                     	;# 
  4164  0F13                     	;# 
  4165  0F14                     	;# 
  4166  0F15                     	;# 
  4167  0F16                     	;# 
  4168  0F17                     	;# 
  4169  0F18                     	;# 
  4170  0F19                     	;# 
  4171  0F1A                     	;# 
  4172  0F1B                     	;# 
  4173  0F1C                     	;# 
  4174  0F1D                     	;# 
  4175  0F1E                     	;# 
  4176  0F1F                     	;# 
  4177  0F20                     	;# 
  4178  0F21                     	;# 
  4179  0F22                     	;# 
  4180  0F23                     	;# 
  4181  0F24                     	;# 
  4182  0F25                     	;# 
  4183  0F26                     	;# 
  4184  0F27                     	;# 
  4185  0F28                     	;# 
  4186  0F29                     	;# 
  4187  0F2A                     	;# 
  4188  0F2B                     	;# 
  4189  0F2C                     	;# 
  4190  0F2D                     	;# 
  4191  0F2E                     	;# 
  4192  0F2F                     	;# 
  4193  0F30                     	;# 
  4194  0F31                     	;# 
  4195  0F32                     	;# 
  4196  0F33                     	;# 
  4197  0F34                     	;# 
  4198  0F35                     	;# 
  4199  0F36                     	;# 
  4200  0F37                     	;# 
  4201  0FE4                     	;# 
  4202  0FE5                     	;# 
  4203  0FE6                     	;# 
  4204  0FE7                     	;# 
  4205  0FE8                     	;# 
  4206  0FE9                     	;# 
  4207  0FEA                     	;# 
  4208  0FEB                     	;# 
  4209  0FED                     	;# 
  4210  0FEE                     	;# 
  4211  0FEF                     	;# 
  4212  0000                     	;# 
  4213  0001                     	;# 
  4214  0002                     	;# 
  4215  0003                     	;# 
  4216  0004                     	;# 
  4217  0005                     	;# 
  4218  0006                     	;# 
  4219  0007                     	;# 
  4220  0008                     	;# 
  4221  0009                     	;# 
  4222  000A                     	;# 
  4223  000B                     	;# 
  4224  000C                     	;# 
  4225  000E                     	;# 
  4226  0010                     	;# 
  4227  0011                     	;# 
  4228  0012                     	;# 
  4229  0013                     	;# 
  4230  0014                     	;# 
  4231  0015                     	;# 
  4232  0015                     	;# 
  4233  0016                     	;# 
  4234  0016                     	;# 
  4235  0017                     	;# 
  4236  0018                     	;# 
  4237  0019                     	;# 
  4238  0019                     	;# 
  4239  001A                     	;# 
  4240  001B                     	;# 
  4241  001C                     	;# 
  4242  001D                     	;# 
  4243  001E                     	;# 
  4244  001F                     	;# 
  4245  008C                     	;# 
  4246  008E                     	;# 
  4247  0090                     	;# 
  4248  0091                     	;# 
  4249  0092                     	;# 
  4250  0093                     	;# 
  4251  0094                     	;# 
  4252  0097                     	;# 
  4253  009B                     	;# 
  4254  009B                     	;# 
  4255  009C                     	;# 
  4256  009D                     	;# 
  4257  009E                     	;# 
  4258  009F                     	;# 
  4259  010C                     	;# 
  4260  010E                     	;# 
  4261  0111                     	;# 
  4262  0112                     	;# 
  4263  0113                     	;# 
  4264  0114                     	;# 
  4265  0115                     	;# 
  4266  0116                     	;# 
  4267  0117                     	;# 
  4268  0118                     	;# 
  4269  0119                     	;# 
  4270  018C                     	;# 
  4271  018E                     	;# 
  4272  0197                     	;# 
  4273  0199                     	;# 
  4274  0199                     	;# 
  4275  0199                     	;# 
  4276  019A                     	;# 
  4277  019A                     	;# 
  4278  019A                     	;# 
  4279  019B                     	;# 
  4280  019B                     	;# 
  4281  019B                     	;# 
  4282  019B                     	;# 
  4283  019B                     	;# 
  4284  019C                     	;# 
  4285  019C                     	;# 
  4286  019C                     	;# 
  4287  019D                     	;# 
  4288  019D                     	;# 
  4289  019D                     	;# 
  4290  019E                     	;# 
  4291  019E                     	;# 
  4292  019E                     	;# 
  4293  019F                     	;# 
  4294  019F                     	;# 
  4295  019F                     	;# 
  4296  019F                     	;# 
  4297  019F                     	;# 
  4298  020C                     	;# 
  4299  020E                     	;# 
  4300  0211                     	;# 
  4301  0211                     	;# 
  4302  0212                     	;# 
  4303  0212                     	;# 
  4304  0213                     	;# 
  4305  0213                     	;# 
  4306  0214                     	;# 
  4307  0214                     	;# 
  4308  0215                     	;# 
  4309  0215                     	;# 
  4310  0215                     	;# 
  4311  0215                     	;# 
  4312  0216                     	;# 
  4313  0216                     	;# 
  4314  0217                     	;# 
  4315  0217                     	;# 
  4316  0219                     	;# 
  4317  021A                     	;# 
  4318  021B                     	;# 
  4319  021C                     	;# 
  4320  021D                     	;# 
  4321  021D                     	;# 
  4322  021E                     	;# 
  4323  021F                     	;# 
  4324  028C                     	;# 
  4325  028E                     	;# 
  4326  0291                     	;# 
  4327  0291                     	;# 
  4328  0292                     	;# 
  4329  0293                     	;# 
  4330  0294                     	;# 
  4331  0295                     	;# 
  4332  0295                     	;# 
  4333  0296                     	;# 
  4334  0297                     	;# 
  4335  0298                     	;# 
  4336  029F                     	;# 
  4337  030C                     	;# 
  4338  030E                     	;# 
  4339  0311                     	;# 
  4340  0311                     	;# 
  4341  0312                     	;# 
  4342  0313                     	;# 
  4343  0314                     	;# 
  4344  0315                     	;# 
  4345  0315                     	;# 
  4346  0316                     	;# 
  4347  0317                     	;# 
  4348  0318                     	;# 
  4349  038C                     	;# 
  4350  038E                     	;# 
  4351  0391                     	;# 
  4352  0392                     	;# 
  4353  0393                     	;# 
  4354  0397                     	;# 
  4355  0398                     	;# 
  4356  0399                     	;# 
  4357  039A                     	;# 
  4358  039C                     	;# 
  4359  039D                     	;# 
  4360  039E                     	;# 
  4361  039F                     	;# 
  4362  0411                     	;# 
  4363  0411                     	;# 
  4364  0412                     	;# 
  4365  0413                     	;# 
  4366  0414                     	;# 
  4367  0415                     	;# 
  4368  0416                     	;# 
  4369  0417                     	;# 
  4370  0418                     	;# 
  4371  0418                     	;# 
  4372  0419                     	;# 
  4373  041A                     	;# 
  4374  041B                     	;# 
  4375  041C                     	;# 
  4376  041D                     	;# 
  4377  041E                     	;# 
  4378  041F                     	;# 
  4379  0498                     	;# 
  4380  0498                     	;# 
  4381  0499                     	;# 
  4382  049A                     	;# 
  4383  049B                     	;# 
  4384  049B                     	;# 
  4385  049C                     	;# 
  4386  049D                     	;# 
  4387  049E                     	;# 
  4388  049F                     	;# 
  4389  0617                     	;# 
  4390  0618                     	;# 
  4391  0619                     	;# 
  4392  0619                     	;# 
  4393  061A                     	;# 
  4394  061B                     	;# 
  4395  061C                     	;# 
  4396  061C                     	;# 
  4397  061F                     	;# 
  4398  0691                     	;# 
  4399  0692                     	;# 
  4400  0693                     	;# 
  4401  0694                     	;# 
  4402  0695                     	;# 
  4403  0696                     	;# 
  4404  0697                     	;# 
  4405  0698                     	;# 
  4406  0699                     	;# 
  4407  0711                     	;# 
  4408  0712                     	;# 
  4409  0713                     	;# 
  4410  0714                     	;# 
  4411  0715                     	;# 
  4412  0716                     	;# 
  4413  0717                     	;# 
  4414  0718                     	;# 
  4415  0719                     	;# 
  4416  0891                     	;# 
  4417  0891                     	;# 
  4418  0891                     	;# 
  4419  0891                     	;# 
  4420  0891                     	;# 
  4421  0891                     	;# 
  4422  0892                     	;# 
  4423  0892                     	;# 
  4424  0892                     	;# 
  4425  0893                     	;# 
  4426  0893                     	;# 
  4427  0893                     	;# 
  4428  0893                     	;# 
  4429  0893                     	;# 
  4430  0893                     	;# 
  4431  0894                     	;# 
  4432  0894                     	;# 
  4433  0894                     	;# 
  4434  0895                     	;# 
  4435  0895                     	;# 
  4436  0895                     	;# 
  4437  0896                     	;# 
  4438  0896                     	;# 
  4439  0896                     	;# 
  4440  089B                     	;# 
  4441  0911                     	;# 
  4442  0912                     	;# 
  4443  0913                     	;# 
  4444  0914                     	;# 
  4445  0915                     	;# 
  4446  0916                     	;# 
  4447  0918                     	;# 
  4448  0919                     	;# 
  4449  091A                     	;# 
  4450  091B                     	;# 
  4451  091C                     	;# 
  4452  091D                     	;# 
  4453  091E                     	;# 
  4454  091F                     	;# 
  4455  0E0F                     	;# 
  4456  0E10                     	;# 
  4457  0E11                     	;# 
  4458  0E12                     	;# 
  4459  0E13                     	;# 
  4460  0E14                     	;# 
  4461  0E15                     	;# 
  4462  0E16                     	;# 
  4463  0E17                     	;# 
  4464  0E18                     	;# 
  4465  0E19                     	;# 
  4466  0E1A                     	;# 
  4467  0E1B                     	;# 
  4468  0E1C                     	;# 
  4469  0E1D                     	;# 
  4470  0E1E                     	;# 
  4471  0E1F                     	;# 
  4472  0E20                     	;# 
  4473  0E21                     	;# 
  4474  0E22                     	;# 
  4475  0E24                     	;# 
  4476  0E25                     	;# 
  4477  0E28                     	;# 
  4478  0E29                     	;# 
  4479  0E2A                     	;# 
  4480  0E2B                     	;# 
  4481  0E2C                     	;# 
  4482  0E2D                     	;# 
  4483  0E2E                     	;# 
  4484  0E2F                     	;# 
  4485  0E90                     	;# 
  4486  0E91                     	;# 
  4487  0E92                     	;# 
  4488  0E94                     	;# 
  4489  0E95                     	;# 
  4490  0EA0                     	;# 
  4491  0EA1                     	;# 
  4492  0EA2                     	;# 
  4493  0EA3                     	;# 
  4494  0EA4                     	;# 
  4495  0EA5                     	;# 
  4496  0F0F                     	;# 
  4497  0F10                     	;# 
  4498  0F11                     	;# 
  4499  0F12                     	;# 
  4500  0F13                     	;# 
  4501  0F14                     	;# 
  4502  0F15                     	;# 
  4503  0F16                     	;# 
  4504  0F17                     	;# 
  4505  0F18                     	;# 
  4506  0F19                     	;# 
  4507  0F1A                     	;# 
  4508  0F1B                     	;# 
  4509  0F1C                     	;# 
  4510  0F1D                     	;# 
  4511  0F1E                     	;# 
  4512  0F1F                     	;# 
  4513  0F20                     	;# 
  4514  0F21                     	;# 
  4515  0F22                     	;# 
  4516  0F23                     	;# 
  4517  0F24                     	;# 
  4518  0F25                     	;# 
  4519  0F26                     	;# 
  4520  0F27                     	;# 
  4521  0F28                     	;# 
  4522  0F29                     	;# 
  4523  0F2A                     	;# 
  4524  0F2B                     	;# 
  4525  0F2C                     	;# 
  4526  0F2D                     	;# 
  4527  0F2E                     	;# 
  4528  0F2F                     	;# 
  4529  0F30                     	;# 
  4530  0F31                     	;# 
  4531  0F32                     	;# 
  4532  0F33                     	;# 
  4533  0F34                     	;# 
  4534  0F35                     	;# 
  4535  0F36                     	;# 
  4536  0F37                     	;# 
  4537  0FE4                     	;# 
  4538  0FE5                     	;# 
  4539  0FE6                     	;# 
  4540  0FE7                     	;# 
  4541  0FE8                     	;# 
  4542  0FE9                     	;# 
  4543  0FEA                     	;# 
  4544  0FEB                     	;# 
  4545  0FED                     	;# 
  4546  0FEE                     	;# 
  4547  0FEF                     	;# 
  4548  0000                     	;# 
  4549  0001                     	;# 
  4550  0002                     	;# 
  4551  0003                     	;# 
  4552  0004                     	;# 
  4553  0005                     	;# 
  4554  0006                     	;# 
  4555  0007                     	;# 
  4556  0008                     	;# 
  4557  0009                     	;# 
  4558  000A                     	;# 
  4559  000B                     	;# 
  4560  000C                     	;# 
  4561  000E                     	;# 
  4562  0010                     	;# 
  4563  0011                     	;# 
  4564  0012                     	;# 
  4565  0013                     	;# 
  4566  0014                     	;# 
  4567  0015                     	;# 
  4568  0015                     	;# 
  4569  0016                     	;# 
  4570  0016                     	;# 
  4571  0017                     	;# 
  4572  0018                     	;# 
  4573  0019                     	;# 
  4574  0019                     	;# 
  4575  001A                     	;# 
  4576  001B                     	;# 
  4577  001C                     	;# 
  4578  001D                     	;# 
  4579  001E                     	;# 
  4580  001F                     	;# 
  4581  008C                     	;# 
  4582  008E                     	;# 
  4583  0090                     	;# 
  4584  0091                     	;# 
  4585  0092                     	;# 
  4586  0093                     	;# 
  4587  0094                     	;# 
  4588  0097                     	;# 
  4589  009B                     	;# 
  4590  009B                     	;# 
  4591  009C                     	;# 
  4592  009D                     	;# 
  4593  009E                     	;# 
  4594  009F                     	;# 
  4595  010C                     	;# 
  4596  010E                     	;# 
  4597  0111                     	;# 
  4598  0112                     	;# 
  4599  0113                     	;# 
  4600  0114                     	;# 
  4601  0115                     	;# 
  4602  0116                     	;# 
  4603  0117                     	;# 
  4604  0118                     	;# 
  4605  0119                     	;# 
  4606  018C                     	;# 
  4607  018E                     	;# 
  4608  0197                     	;# 
  4609  0199                     	;# 
  4610  0199                     	;# 
  4611  0199                     	;# 
  4612  019A                     	;# 
  4613  019A                     	;# 
  4614  019A                     	;# 
  4615  019B                     	;# 
  4616  019B                     	;# 
  4617  019B                     	;# 
  4618  019B                     	;# 
  4619  019B                     	;# 
  4620  019C                     	;# 
  4621  019C                     	;# 
  4622  019C                     	;# 
  4623  019D                     	;# 
  4624  019D                     	;# 
  4625  019D                     	;# 
  4626  019E                     	;# 
  4627  019E                     	;# 
  4628  019E                     	;# 
  4629  019F                     	;# 
  4630  019F                     	;# 
  4631  019F                     	;# 
  4632  019F                     	;# 
  4633  019F                     	;# 
  4634  020C                     	;# 
  4635  020E                     	;# 
  4636  0211                     	;# 
  4637  0211                     	;# 
  4638  0212                     	;# 
  4639  0212                     	;# 
  4640  0213                     	;# 
  4641  0213                     	;# 
  4642  0214                     	;# 
  4643  0214                     	;# 
  4644  0215                     	;# 
  4645  0215                     	;# 
  4646  0215                     	;# 
  4647  0215                     	;# 
  4648  0216                     	;# 
  4649  0216                     	;# 
  4650  0217                     	;# 
  4651  0217                     	;# 
  4652  0219                     	;# 
  4653  021A                     	;# 
  4654  021B                     	;# 
  4655  021C                     	;# 
  4656  021D                     	;# 
  4657  021D                     	;# 
  4658  021E                     	;# 
  4659  021F                     	;# 
  4660  028C                     	;# 
  4661  028E                     	;# 
  4662  0291                     	;# 
  4663  0291                     	;# 
  4664  0292                     	;# 
  4665  0293                     	;# 
  4666  0294                     	;# 
  4667  0295                     	;# 
  4668  0295                     	;# 
  4669  0296                     	;# 
  4670  0297                     	;# 
  4671  0298                     	;# 
  4672  029F                     	;# 
  4673  030C                     	;# 
  4674  030E                     	;# 
  4675  0311                     	;# 
  4676  0311                     	;# 
  4677  0312                     	;# 
  4678  0313                     	;# 
  4679  0314                     	;# 
  4680  0315                     	;# 
  4681  0315                     	;# 
  4682  0316                     	;# 
  4683  0317                     	;# 
  4684  0318                     	;# 
  4685  038C                     	;# 
  4686  038E                     	;# 
  4687  0391                     	;# 
  4688  0392                     	;# 
  4689  0393                     	;# 
  4690  0397                     	;# 
  4691  0398                     	;# 
  4692  0399                     	;# 
  4693  039A                     	;# 
  4694  039C                     	;# 
  4695  039D                     	;# 
  4696  039E                     	;# 
  4697  039F                     	;# 
  4698  0411                     	;# 
  4699  0411                     	;# 
  4700  0412                     	;# 
  4701  0413                     	;# 
  4702  0414                     	;# 
  4703  0415                     	;# 
  4704  0416                     	;# 
  4705  0417                     	;# 
  4706  0418                     	;# 
  4707  0418                     	;# 
  4708  0419                     	;# 
  4709  041A                     	;# 
  4710  041B                     	;# 
  4711  041C                     	;# 
  4712  041D                     	;# 
  4713  041E                     	;# 
  4714  041F                     	;# 
  4715  0498                     	;# 
  4716  0498                     	;# 
  4717  0499                     	;# 
  4718  049A                     	;# 
  4719  049B                     	;# 
  4720  049B                     	;# 
  4721  049C                     	;# 
  4722  049D                     	;# 
  4723  049E                     	;# 
  4724  049F                     	;# 
  4725  0617                     	;# 
  4726  0618                     	;# 
  4727  0619                     	;# 
  4728  0619                     	;# 
  4729  061A                     	;# 
  4730  061B                     	;# 
  4731  061C                     	;# 
  4732  061C                     	;# 
  4733  061F                     	;# 
  4734  0691                     	;# 
  4735  0692                     	;# 
  4736  0693                     	;# 
  4737  0694                     	;# 
  4738  0695                     	;# 
  4739  0696                     	;# 
  4740  0697                     	;# 
  4741  0698                     	;# 
  4742  0699                     	;# 
  4743  0711                     	;# 
  4744  0712                     	;# 
  4745  0713                     	;# 
  4746  0714                     	;# 
  4747  0715                     	;# 
  4748  0716                     	;# 
  4749  0717                     	;# 
  4750  0718                     	;# 
  4751  0719                     	;# 
  4752  0891                     	;# 
  4753  0891                     	;# 
  4754  0891                     	;# 
  4755  0891                     	;# 
  4756  0891                     	;# 
  4757  0891                     	;# 
  4758  0892                     	;# 
  4759  0892                     	;# 
  4760  0892                     	;# 
  4761  0893                     	;# 
  4762  0893                     	;# 
  4763  0893                     	;# 
  4764  0893                     	;# 
  4765  0893                     	;# 
  4766  0893                     	;# 
  4767  0894                     	;# 
  4768  0894                     	;# 
  4769  0894                     	;# 
  4770  0895                     	;# 
  4771  0895                     	;# 
  4772  0895                     	;# 
  4773  0896                     	;# 
  4774  0896                     	;# 
  4775  0896                     	;# 
  4776  089B                     	;# 
  4777  0911                     	;# 
  4778  0912                     	;# 
  4779  0913                     	;# 
  4780  0914                     	;# 
  4781  0915                     	;# 
  4782  0916                     	;# 
  4783  0918                     	;# 
  4784  0919                     	;# 
  4785  091A                     	;# 
  4786  091B                     	;# 
  4787  091C                     	;# 
  4788  091D                     	;# 
  4789  091E                     	;# 
  4790  091F                     	;# 
  4791  0E0F                     	;# 
  4792  0E10                     	;# 
  4793  0E11                     	;# 
  4794  0E12                     	;# 
  4795  0E13                     	;# 
  4796  0E14                     	;# 
  4797  0E15                     	;# 
  4798  0E16                     	;# 
  4799  0E17                     	;# 
  4800  0E18                     	;# 
  4801  0E19                     	;# 
  4802  0E1A                     	;# 
  4803  0E1B                     	;# 
  4804  0E1C                     	;# 
  4805  0E1D                     	;# 
  4806  0E1E                     	;# 
  4807  0E1F                     	;# 
  4808  0E20                     	;# 
  4809  0E21                     	;# 
  4810  0E22                     	;# 
  4811  0E24                     	;# 
  4812  0E25                     	;# 
  4813  0E28                     	;# 
  4814  0E29                     	;# 
  4815  0E2A                     	;# 
  4816  0E2B                     	;# 
  4817  0E2C                     	;# 
  4818  0E2D                     	;# 
  4819  0E2E                     	;# 
  4820  0E2F                     	;# 
  4821  0E90                     	;# 
  4822  0E91                     	;# 
  4823  0E92                     	;# 
  4824  0E94                     	;# 
  4825  0E95                     	;# 
  4826  0EA0                     	;# 
  4827  0EA1                     	;# 
  4828  0EA2                     	;# 
  4829  0EA3                     	;# 
  4830  0EA4                     	;# 
  4831  0EA5                     	;# 
  4832  0F0F                     	;# 
  4833  0F10                     	;# 
  4834  0F11                     	;# 
  4835  0F12                     	;# 
  4836  0F13                     	;# 
  4837  0F14                     	;# 
  4838  0F15                     	;# 
  4839  0F16                     	;# 
  4840  0F17                     	;# 
  4841  0F18                     	;# 
  4842  0F19                     	;# 
  4843  0F1A                     	;# 
  4844  0F1B                     	;# 
  4845  0F1C                     	;# 
  4846  0F1D                     	;# 
  4847  0F1E                     	;# 
  4848  0F1F                     	;# 
  4849  0F20                     	;# 
  4850  0F21                     	;# 
  4851  0F22                     	;# 
  4852  0F23                     	;# 
  4853  0F24                     	;# 
  4854  0F25                     	;# 
  4855  0F26                     	;# 
  4856  0F27                     	;# 
  4857  0F28                     	;# 
  4858  0F29                     	;# 
  4859  0F2A                     	;# 
  4860  0F2B                     	;# 
  4861  0F2C                     	;# 
  4862  0F2D                     	;# 
  4863  0F2E                     	;# 
  4864  0F2F                     	;# 
  4865  0F30                     	;# 
  4866  0F31                     	;# 
  4867  0F32                     	;# 
  4868  0F33                     	;# 
  4869  0F34                     	;# 
  4870  0F35                     	;# 
  4871  0F36                     	;# 
  4872  0F37                     	;# 
  4873  0FE4                     	;# 
  4874  0FE5                     	;# 
  4875  0FE6                     	;# 
  4876  0FE7                     	;# 
  4877  0FE8                     	;# 
  4878  0FE9                     	;# 
  4879  0FEA                     	;# 
  4880  0FEB                     	;# 
  4881  0FED                     	;# 
  4882  0FEE                     	;# 
  4883  0FEF                     	;# 
  4884  0000                     	;# 
  4885  0001                     	;# 
  4886  0002                     	;# 
  4887  0003                     	;# 
  4888  0004                     	;# 
  4889  0005                     	;# 
  4890  0006                     	;# 
  4891  0007                     	;# 
  4892  0008                     	;# 
  4893  0009                     	;# 
  4894  000A                     	;# 
  4895  000B                     	;# 
  4896  000C                     	;# 
  4897  000E                     	;# 
  4898  0010                     	;# 
  4899  0011                     	;# 
  4900  0012                     	;# 
  4901  0013                     	;# 
  4902  0014                     	;# 
  4903  0015                     	;# 
  4904  0015                     	;# 
  4905  0016                     	;# 
  4906  0016                     	;# 
  4907  0017                     	;# 
  4908  0018                     	;# 
  4909  0019                     	;# 
  4910  0019                     	;# 
  4911  001A                     	;# 
  4912  001B                     	;# 
  4913  001C                     	;# 
  4914  001D                     	;# 
  4915  001E                     	;# 
  4916  001F                     	;# 
  4917  008C                     	;# 
  4918  008E                     	;# 
  4919  0090                     	;# 
  4920  0091                     	;# 
  4921  0092                     	;# 
  4922  0093                     	;# 
  4923  0094                     	;# 
  4924  0097                     	;# 
  4925  009B                     	;# 
  4926  009B                     	;# 
  4927  009C                     	;# 
  4928  009D                     	;# 
  4929  009E                     	;# 
  4930  009F                     	;# 
  4931  010C                     	;# 
  4932  010E                     	;# 
  4933  0111                     	;# 
  4934  0112                     	;# 
  4935  0113                     	;# 
  4936  0114                     	;# 
  4937  0115                     	;# 
  4938  0116                     	;# 
  4939  0117                     	;# 
  4940  0118                     	;# 
  4941  0119                     	;# 
  4942  018C                     	;# 
  4943  018E                     	;# 
  4944  0197                     	;# 
  4945  0199                     	;# 
  4946  0199                     	;# 
  4947  0199                     	;# 
  4948  019A                     	;# 
  4949  019A                     	;# 
  4950  019A                     	;# 
  4951  019B                     	;# 
  4952  019B                     	;# 
  4953  019B                     	;# 
  4954  019B                     	;# 
  4955  019B                     	;# 
  4956  019C                     	;# 
  4957  019C                     	;# 
  4958  019C                     	;# 
  4959  019D                     	;# 
  4960  019D                     	;# 
  4961  019D                     	;# 
  4962  019E                     	;# 
  4963  019E                     	;# 
  4964  019E                     	;# 
  4965  019F                     	;# 
  4966  019F                     	;# 
  4967  019F                     	;# 
  4968  019F                     	;# 
  4969  019F                     	;# 
  4970  020C                     	;# 
  4971  020E                     	;# 
  4972  0211                     	;# 
  4973  0211                     	;# 
  4974  0212                     	;# 
  4975  0212                     	;# 
  4976  0213                     	;# 
  4977  0213                     	;# 
  4978  0214                     	;# 
  4979  0214                     	;# 
  4980  0215                     	;# 
  4981  0215                     	;# 
  4982  0215                     	;# 
  4983  0215                     	;# 
  4984  0216                     	;# 
  4985  0216                     	;# 
  4986  0217                     	;# 
  4987  0217                     	;# 
  4988  0219                     	;# 
  4989  021A                     	;# 
  4990  021B                     	;# 
  4991  021C                     	;# 
  4992  021D                     	;# 
  4993  021D                     	;# 
  4994  021E                     	;# 
  4995  021F                     	;# 
  4996  028C                     	;# 
  4997  028E                     	;# 
  4998  0291                     	;# 
  4999  0291                     	;# 
  5000  0292                     	;# 
  5001  0293                     	;# 
  5002  0294                     	;# 
  5003  0295                     	;# 
  5004  0295                     	;# 
  5005  0296                     	;# 
  5006  0297                     	;# 
  5007  0298                     	;# 
  5008  029F                     	;# 
  5009  030C                     	;# 
  5010  030E                     	;# 
  5011  0311                     	;# 
  5012  0311                     	;# 
  5013  0312                     	;# 
  5014  0313                     	;# 
  5015  0314                     	;# 
  5016  0315                     	;# 
  5017  0315                     	;# 
  5018  0316                     	;# 
  5019  0317                     	;# 
  5020  0318                     	;# 
  5021  038C                     	;# 
  5022  038E                     	;# 
  5023  0391                     	;# 
  5024  0392                     	;# 
  5025  0393                     	;# 
  5026  0397                     	;# 
  5027  0398                     	;# 
  5028  0399                     	;# 
  5029  039A                     	;# 
  5030  039C                     	;# 
  5031  039D                     	;# 
  5032  039E                     	;# 
  5033  039F                     	;# 
  5034  0411                     	;# 
  5035  0411                     	;# 
  5036  0412                     	;# 
  5037  0413                     	;# 
  5038  0414                     	;# 
  5039  0415                     	;# 
  5040  0416                     	;# 
  5041  0417                     	;# 
  5042  0418                     	;# 
  5043  0418                     	;# 
  5044  0419                     	;# 
  5045  041A                     	;# 
  5046  041B                     	;# 
  5047  041C                     	;# 
  5048  041D                     	;# 
  5049  041E                     	;# 
  5050  041F                     	;# 
  5051  0498                     	;# 
  5052  0498                     	;# 
  5053  0499                     	;# 
  5054  049A                     	;# 
  5055  049B                     	;# 
  5056  049B                     	;# 
  5057  049C                     	;# 
  5058  049D                     	;# 
  5059  049E                     	;# 
  5060  049F                     	;# 
  5061  0617                     	;# 
  5062  0618                     	;# 
  5063  0619                     	;# 
  5064  0619                     	;# 
  5065  061A                     	;# 
  5066  061B                     	;# 
  5067  061C                     	;# 
  5068  061C                     	;# 
  5069  061F                     	;# 
  5070  0691                     	;# 
  5071  0692                     	;# 
  5072  0693                     	;# 
  5073  0694                     	;# 
  5074  0695                     	;# 
  5075  0696                     	;# 
  5076  0697                     	;# 
  5077  0698                     	;# 
  5078  0699                     	;# 
  5079  0711                     	;# 
  5080  0712                     	;# 
  5081  0713                     	;# 
  5082  0714                     	;# 
  5083  0715                     	;# 
  5084  0716                     	;# 
  5085  0717                     	;# 
  5086  0718                     	;# 
  5087  0719                     	;# 
  5088  0891                     	;# 
  5089  0891                     	;# 
  5090  0891                     	;# 
  5091  0891                     	;# 
  5092  0891                     	;# 
  5093  0891                     	;# 
  5094  0892                     	;# 
  5095  0892                     	;# 
  5096  0892                     	;# 
  5097  0893                     	;# 
  5098  0893                     	;# 
  5099  0893                     	;# 
  5100  0893                     	;# 
  5101  0893                     	;# 
  5102  0893                     	;# 
  5103  0894                     	;# 
  5104  0894                     	;# 
  5105  0894                     	;# 
  5106  0895                     	;# 
  5107  0895                     	;# 
  5108  0895                     	;# 
  5109  0896                     	;# 
  5110  0896                     	;# 
  5111  0896                     	;# 
  5112  089B                     	;# 
  5113  0911                     	;# 
  5114  0912                     	;# 
  5115  0913                     	;# 
  5116  0914                     	;# 
  5117  0915                     	;# 
  5118  0916                     	;# 
  5119  0918                     	;# 
  5120  0919                     	;# 
  5121  091A                     	;# 
  5122  091B                     	;# 
  5123  091C                     	;# 
  5124  091D                     	;# 
  5125  091E                     	;# 
  5126  091F                     	;# 
  5127  0E0F                     	;# 
  5128  0E10                     	;# 
  5129  0E11                     	;# 
  5130  0E12                     	;# 
  5131  0E13                     	;# 
  5132  0E14                     	;# 
  5133  0E15                     	;# 
  5134  0E16                     	;# 
  5135  0E17                     	;# 
  5136  0E18                     	;# 
  5137  0E19                     	;# 
  5138  0E1A                     	;# 
  5139  0E1B                     	;# 
  5140  0E1C                     	;# 
  5141  0E1D                     	;# 
  5142  0E1E                     	;# 
  5143  0E1F                     	;# 
  5144  0E20                     	;# 
  5145  0E21                     	;# 
  5146  0E22                     	;# 
  5147  0E24                     	;# 
  5148  0E25                     	;# 
  5149  0E28                     	;# 
  5150  0E29                     	;# 
  5151  0E2A                     	;# 
  5152  0E2B                     	;# 
  5153  0E2C                     	;# 
  5154  0E2D                     	;# 
  5155  0E2E                     	;# 
  5156  0E2F                     	;# 
  5157  0E90                     	;# 
  5158  0E91                     	;# 
  5159  0E92                     	;# 
  5160  0E94                     	;# 
  5161  0E95                     	;# 
  5162  0EA0                     	;# 
  5163  0EA1                     	;# 
  5164  0EA2                     	;# 
  5165  0EA3                     	;# 
  5166  0EA4                     	;# 
  5167  0EA5                     	;# 
  5168  0F0F                     	;# 
  5169  0F10                     	;# 
  5170  0F11                     	;# 
  5171  0F12                     	;# 
  5172  0F13                     	;# 
  5173  0F14                     	;# 
  5174  0F15                     	;# 
  5175  0F16                     	;# 
  5176  0F17                     	;# 
  5177  0F18                     	;# 
  5178  0F19                     	;# 
  5179  0F1A                     	;# 
  5180  0F1B                     	;# 
  5181  0F1C                     	;# 
  5182  0F1D                     	;# 
  5183  0F1E                     	;# 
  5184  0F1F                     	;# 
  5185  0F20                     	;# 
  5186  0F21                     	;# 
  5187  0F22                     	;# 
  5188  0F23                     	;# 
  5189  0F24                     	;# 
  5190  0F25                     	;# 
  5191  0F26                     	;# 
  5192  0F27                     	;# 
  5193  0F28                     	;# 
  5194  0F29                     	;# 
  5195  0F2A                     	;# 
  5196  0F2B                     	;# 
  5197  0F2C                     	;# 
  5198  0F2D                     	;# 
  5199  0F2E                     	;# 
  5200  0F2F                     	;# 
  5201  0F30                     	;# 
  5202  0F31                     	;# 
  5203  0F32                     	;# 
  5204  0F33                     	;# 
  5205  0F34                     	;# 
  5206  0F35                     	;# 
  5207  0F36                     	;# 
  5208  0F37                     	;# 
  5209  0FE4                     	;# 
  5210  0FE5                     	;# 
  5211  0FE6                     	;# 
  5212  0FE7                     	;# 
  5213  0FE8                     	;# 
  5214  0FE9                     	;# 
  5215  0FEA                     	;# 
  5216  0FEB                     	;# 
  5217  0FED                     	;# 
  5218  0FEE                     	;# 
  5219  0FEF                     	;_downEncodedDigitsPixelValues
  5220                           
  5221                           	psect	idataBANK0
  5222  0003                     __pidataBANK0:
  5223                           
  5224                           ;initializer for Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit1
  5225  0003  34FF               	retlw	255
  5226                           
  5227                           	psect	idataBANK1
  5228  22B1                     __pidataBANK1:
  5229                           
  5230                           ;initializer for Time_RenderIfMinutesHaveChanged@minutesAtLastChange
  5231  22B1  34FF               	retlw	255
  5232  22B2  34FF               	retlw	255
  5233                           
  5234                           ;initializer for Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit4
  5235  22B3  34FF               	retlw	255
  5236                           
  5237                           ;initializer for Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit3
  5238  22B4  34FF               	retlw	255
  5239                           
  5240                           ;initializer for Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit2
  5241  22B5  34FF               	retlw	255
  5242                           
  5243                           	psect	idataBANK3
  5244  2464                     __pidataBANK3:
  5245                           
  5246                           ;initializer for _rot@app$F1486
  5247  2464  3400               	retlw	0
  5248  2465  3400               	retlw	0
  5249  2466  3400               	retlw	0
  5250  2467  3400               	retlw	0
  5251  2468  3400               	retlw	0
  5252  2469  3400               	retlw	0
  5253  246A  3400               	retlw	0
  5254  246B  3400               	retlw	0
  5255  246C  344D               	retlw	77
  5256  246D  3405               	retlw	5
  5257  246E  3448               	retlw	72
  5258  246F  341E               	retlw	30
  5259  2470  3424               	retlw	36
  5260  2471  340F               	retlw	15
  5261  2472  3400               	retlw	0
  5262  2473  3400               	retlw	0
  5263  2474  3400               	retlw	0
  5264  2475  3400               	retlw	0
  5265  2476  3400               	retlw	0
  5266  2477  3400               	retlw	0
  5267  2478  3400               	retlw	0
  5268  2479  3400               	retlw	0
  5269  247A  3400               	retlw	0
  5270  247B  3400               	retlw	0
  5271  247C  3400               	retlw	0
  5272  247D  3400               	retlw	0
  5273                           
  5274                           	psect	stringtext1
  5275  1800                     __pstringtext1:
  5276  1800                     _CRCtbl:
  5277  1800  3400               	retlw	0
  5278  1801  3400               	retlw	0
  5279  1802  3405               	retlw	5
  5280  1803  3480               	retlw	128
  5281  1804  340F               	retlw	15
  5282  1805  3480               	retlw	128
  5283  1806  340A               	retlw	10
  5284  1807  3400               	retlw	0
  5285  1808  341B               	retlw	27
  5286  1809  3480               	retlw	128
  5287  180A  341E               	retlw	30
  5288  180B  3400               	retlw	0
  5289  180C  3414               	retlw	20
  5290  180D  3400               	retlw	0
  5291  180E  3411               	retlw	17
  5292  180F  3480               	retlw	128
  5293  1810  3433               	retlw	51
  5294  1811  3480               	retlw	128
  5295  1812  3436               	retlw	54
  5296  1813  3400               	retlw	0
  5297  1814  343C               	retlw	60
  5298  1815  3400               	retlw	0
  5299  1816  3439               	retlw	57
  5300  1817  3480               	retlw	128
  5301  1818  3428               	retlw	40
  5302  1819  3400               	retlw	0
  5303  181A  342D               	retlw	45
  5304  181B  3480               	retlw	128
  5305  181C  3427               	retlw	39
  5306  181D  3480               	retlw	128
  5307  181E  3422               	retlw	34
  5308  181F  3400               	retlw	0
  5309  1820  3463               	retlw	99
  5310  1821  3480               	retlw	128
  5311  1822  3466               	retlw	102
  5312  1823  3400               	retlw	0
  5313  1824  346C               	retlw	108
  5314  1825  3400               	retlw	0
  5315  1826  3469               	retlw	105
  5316  1827  3480               	retlw	128
  5317  1828  3478               	retlw	120
  5318  1829  3400               	retlw	0
  5319  182A  347D               	retlw	125
  5320  182B  3480               	retlw	128
  5321  182C  3477               	retlw	119
  5322  182D  3480               	retlw	128
  5323  182E  3472               	retlw	114
  5324  182F  3400               	retlw	0
  5325  1830  3450               	retlw	80
  5326  1831  3400               	retlw	0
  5327  1832  3455               	retlw	85
  5328  1833  3480               	retlw	128
  5329  1834  345F               	retlw	95
  5330  1835  3480               	retlw	128
  5331  1836  345A               	retlw	90
  5332  1837  3400               	retlw	0
  5333  1838  344B               	retlw	75
  5334  1839  3480               	retlw	128
  5335  183A  344E               	retlw	78
  5336  183B  3400               	retlw	0
  5337  183C  3444               	retlw	68
  5338  183D  3400               	retlw	0
  5339  183E  3441               	retlw	65
  5340  183F  3480               	retlw	128
  5341  1840  34C3               	retlw	195
  5342  1841  3480               	retlw	128
  5343  1842  34C6               	retlw	198
  5344  1843  3400               	retlw	0
  5345  1844  34CC               	retlw	204
  5346  1845  3400               	retlw	0
  5347  1846  34C9               	retlw	201
  5348  1847  3480               	retlw	128
  5349  1848  34D8               	retlw	216
  5350  1849  3400               	retlw	0
  5351  184A  34DD               	retlw	221
  5352  184B  3480               	retlw	128
  5353  184C  34D7               	retlw	215
  5354  184D  3480               	retlw	128
  5355  184E  34D2               	retlw	210
  5356  184F  3400               	retlw	0
  5357  1850  34F0               	retlw	240
  5358  1851  3400               	retlw	0
  5359  1852  34F5               	retlw	245
  5360  1853  3480               	retlw	128
  5361  1854  34FF               	retlw	255
  5362  1855  3480               	retlw	128
  5363  1856  34FA               	retlw	250
  5364  1857  3400               	retlw	0
  5365  1858  34EB               	retlw	235
  5366  1859  3480               	retlw	128
  5367  185A  34EE               	retlw	238
  5368  185B  3400               	retlw	0
  5369  185C  34E4               	retlw	228
  5370  185D  3400               	retlw	0
  5371  185E  34E1               	retlw	225
  5372  185F  3480               	retlw	128
  5373  1860  34A0               	retlw	160
  5374  1861  3400               	retlw	0
  5375  1862  34A5               	retlw	165
  5376  1863  3480               	retlw	128
  5377  1864  34AF               	retlw	175
  5378  1865  3480               	retlw	128
  5379  1866  34AA               	retlw	170
  5380  1867  3400               	retlw	0
  5381  1868  34BB               	retlw	187
  5382  1869  3480               	retlw	128
  5383  186A  34BE               	retlw	190
  5384  186B  3400               	retlw	0
  5385  186C  34B4               	retlw	180
  5386  186D  3400               	retlw	0
  5387  186E  34B1               	retlw	177
  5388  186F  3480               	retlw	128
  5389  1870  3493               	retlw	147
  5390  1871  3480               	retlw	128
  5391  1872  3496               	retlw	150
  5392  1873  3400               	retlw	0
  5393  1874  349C               	retlw	156
  5394  1875  3400               	retlw	0
  5395  1876  3499               	retlw	153
  5396  1877  3480               	retlw	128
  5397  1878  3488               	retlw	136
  5398  1879  3400               	retlw	0
  5399  187A  348D               	retlw	141
  5400  187B  3480               	retlw	128
  5401  187C  3487               	retlw	135
  5402  187D  3480               	retlw	128
  5403  187E  3482               	retlw	130
  5404  187F  3400               	retlw	0
  5405  1880  3483               	retlw	131
  5406  1881  3481               	retlw	129
  5407  1882  3486               	retlw	134
  5408  1883  3401               	retlw	1
  5409  1884  348C               	retlw	140
  5410  1885  3401               	retlw	1
  5411  1886  3489               	retlw	137
  5412  1887  3481               	retlw	129
  5413  1888  3498               	retlw	152
  5414  1889  3401               	retlw	1
  5415  188A  349D               	retlw	157
  5416  188B  3481               	retlw	129
  5417  188C  3497               	retlw	151
  5418  188D  3481               	retlw	129
  5419  188E  3492               	retlw	146
  5420  188F  3401               	retlw	1
  5421  1890  34B0               	retlw	176
  5422  1891  3401               	retlw	1
  5423  1892  34B5               	retlw	181
  5424  1893  3481               	retlw	129
  5425  1894  34BF               	retlw	191
  5426  1895  3481               	retlw	129
  5427  1896  34BA               	retlw	186
  5428  1897  3401               	retlw	1
  5429  1898  34AB               	retlw	171
  5430  1899  3481               	retlw	129
  5431  189A  34AE               	retlw	174
  5432  189B  3401               	retlw	1
  5433  189C  34A4               	retlw	164
  5434  189D  3401               	retlw	1
  5435  189E  34A1               	retlw	161
  5436  189F  3481               	retlw	129
  5437  18A0  34E0               	retlw	224
  5438  18A1  3401               	retlw	1
  5439  18A2  34E5               	retlw	229
  5440  18A3  3481               	retlw	129
  5441  18A4  34EF               	retlw	239
  5442  18A5  3481               	retlw	129
  5443  18A6  34EA               	retlw	234
  5444  18A7  3401               	retlw	1
  5445  18A8  34FB               	retlw	251
  5446  18A9  3481               	retlw	129
  5447  18AA  34FE               	retlw	254
  5448  18AB  3401               	retlw	1
  5449  18AC  34F4               	retlw	244
  5450  18AD  3401               	retlw	1
  5451  18AE  34F1               	retlw	241
  5452  18AF  3481               	retlw	129
  5453  18B0  34D3               	retlw	211
  5454  18B1  3481               	retlw	129
  5455  18B2  34D6               	retlw	214
  5456  18B3  3401               	retlw	1
  5457  18B4  34DC               	retlw	220
  5458  18B5  3401               	retlw	1
  5459  18B6  34D9               	retlw	217
  5460  18B7  3481               	retlw	129
  5461  18B8  34C8               	retlw	200
  5462  18B9  3401               	retlw	1
  5463  18BA  34CD               	retlw	205
  5464  18BB  3481               	retlw	129
  5465  18BC  34C7               	retlw	199
  5466  18BD  3481               	retlw	129
  5467  18BE  34C2               	retlw	194
  5468  18BF  3401               	retlw	1
  5469  18C0  3440               	retlw	64
  5470  18C1  3401               	retlw	1
  5471  18C2  3445               	retlw	69
  5472  18C3  3481               	retlw	129
  5473  18C4  344F               	retlw	79
  5474  18C5  3481               	retlw	129
  5475  18C6  344A               	retlw	74
  5476  18C7  3401               	retlw	1
  5477  18C8  345B               	retlw	91
  5478  18C9  3481               	retlw	129
  5479  18CA  345E               	retlw	94
  5480  18CB  3401               	retlw	1
  5481  18CC  3454               	retlw	84
  5482  18CD  3401               	retlw	1
  5483  18CE  3451               	retlw	81
  5484  18CF  3481               	retlw	129
  5485  18D0  3473               	retlw	115
  5486  18D1  3481               	retlw	129
  5487  18D2  3476               	retlw	118
  5488  18D3  3401               	retlw	1
  5489  18D4  347C               	retlw	124
  5490  18D5  3401               	retlw	1
  5491  18D6  3479               	retlw	121
  5492  18D7  3481               	retlw	129
  5493  18D8  3468               	retlw	104
  5494  18D9  3401               	retlw	1
  5495  18DA  346D               	retlw	109
  5496  18DB  3481               	retlw	129
  5497  18DC  3467               	retlw	103
  5498  18DD  3481               	retlw	129
  5499  18DE  3462               	retlw	98
  5500  18DF  3401               	retlw	1
  5501  18E0  3423               	retlw	35
  5502  18E1  3481               	retlw	129
  5503  18E2  3426               	retlw	38
  5504  18E3  3401               	retlw	1
  5505  18E4  342C               	retlw	44
  5506  18E5  3401               	retlw	1
  5507  18E6  3429               	retlw	41
  5508  18E7  3481               	retlw	129
  5509  18E8  3438               	retlw	56
  5510  18E9  3401               	retlw	1
  5511  18EA  343D               	retlw	61
  5512  18EB  3481               	retlw	129
  5513  18EC  3437               	retlw	55
  5514  18ED  3481               	retlw	129
  5515  18EE  3432               	retlw	50
  5516  18EF  3401               	retlw	1
  5517  18F0  3410               	retlw	16
  5518  18F1  3401               	retlw	1
  5519  18F2  3415               	retlw	21
  5520  18F3  3481               	retlw	129
  5521  18F4  341F               	retlw	31
  5522  18F5  3481               	retlw	129
  5523  18F6  341A               	retlw	26
  5524  18F7  3401               	retlw	1
  5525  18F8  340B               	retlw	11
  5526  18F9  3481               	retlw	129
  5527  18FA  340E               	retlw	14
  5528  18FB  3401               	retlw	1
  5529  18FC  3404               	retlw	4
  5530  18FD  3401               	retlw	1
  5531  18FE  3401               	retlw	1
  5532  18FF  3481               	retlw	129
  5533  1900  3403               	retlw	3
  5534  1901  3483               	retlw	131
  5535  1902  3406               	retlw	6
  5536  1903  3403               	retlw	3
  5537  1904  340C               	retlw	12
  5538  1905  3403               	retlw	3
  5539  1906  3409               	retlw	9
  5540  1907  3483               	retlw	131
  5541  1908  3418               	retlw	24
  5542  1909  3403               	retlw	3
  5543  190A  341D               	retlw	29
  5544  190B  3483               	retlw	131
  5545  190C  3417               	retlw	23
  5546  190D  3483               	retlw	131
  5547  190E  3412               	retlw	18
  5548  190F  3403               	retlw	3
  5549  1910  3430               	retlw	48
  5550  1911  3403               	retlw	3
  5551  1912  3435               	retlw	53
  5552  1913  3483               	retlw	131
  5553  1914  343F               	retlw	63
  5554  1915  3483               	retlw	131
  5555  1916  343A               	retlw	58
  5556  1917  3403               	retlw	3
  5557  1918  342B               	retlw	43
  5558  1919  3483               	retlw	131
  5559  191A  342E               	retlw	46
  5560  191B  3403               	retlw	3
  5561  191C  3424               	retlw	36
  5562  191D  3403               	retlw	3
  5563  191E  3421               	retlw	33
  5564  191F  3483               	retlw	131
  5565  1920  3460               	retlw	96
  5566  1921  3403               	retlw	3
  5567  1922  3465               	retlw	101
  5568  1923  3483               	retlw	131
  5569  1924  346F               	retlw	111
  5570  1925  3483               	retlw	131
  5571  1926  346A               	retlw	106
  5572  1927  3403               	retlw	3
  5573  1928  347B               	retlw	123
  5574  1929  3483               	retlw	131
  5575  192A  347E               	retlw	126
  5576  192B  3403               	retlw	3
  5577  192C  3474               	retlw	116
  5578  192D  3403               	retlw	3
  5579  192E  3471               	retlw	113
  5580  192F  3483               	retlw	131
  5581  1930  3453               	retlw	83
  5582  1931  3483               	retlw	131
  5583  1932  3456               	retlw	86
  5584  1933  3403               	retlw	3
  5585  1934  345C               	retlw	92
  5586  1935  3403               	retlw	3
  5587  1936  3459               	retlw	89
  5588  1937  3483               	retlw	131
  5589  1938  3448               	retlw	72
  5590  1939  3403               	retlw	3
  5591  193A  344D               	retlw	77
  5592  193B  3483               	retlw	131
  5593  193C  3447               	retlw	71
  5594  193D  3483               	retlw	131
  5595  193E  3442               	retlw	66
  5596  193F  3403               	retlw	3
  5597  1940  34C0               	retlw	192
  5598  1941  3403               	retlw	3
  5599  1942  34C5               	retlw	197
  5600  1943  3483               	retlw	131
  5601  1944  34CF               	retlw	207
  5602  1945  3483               	retlw	131
  5603  1946  34CA               	retlw	202
  5604  1947  3403               	retlw	3
  5605  1948  34DB               	retlw	219
  5606  1949  3483               	retlw	131
  5607  194A  34DE               	retlw	222
  5608  194B  3403               	retlw	3
  5609  194C  34D4               	retlw	212
  5610  194D  3403               	retlw	3
  5611  194E  34D1               	retlw	209
  5612  194F  3483               	retlw	131
  5613  1950  34F3               	retlw	243
  5614  1951  3483               	retlw	131
  5615  1952  34F6               	retlw	246
  5616  1953  3403               	retlw	3
  5617  1954  34FC               	retlw	252
  5618  1955  3403               	retlw	3
  5619  1956  34F9               	retlw	249
  5620  1957  3483               	retlw	131
  5621  1958  34E8               	retlw	232
  5622  1959  3403               	retlw	3
  5623  195A  34ED               	retlw	237
  5624  195B  3483               	retlw	131
  5625  195C  34E7               	retlw	231
  5626  195D  3483               	retlw	131
  5627  195E  34E2               	retlw	226
  5628  195F  3403               	retlw	3
  5629  1960  34A3               	retlw	163
  5630  1961  3483               	retlw	131
  5631  1962  34A6               	retlw	166
  5632  1963  3403               	retlw	3
  5633  1964  34AC               	retlw	172
  5634  1965  3403               	retlw	3
  5635  1966  34A9               	retlw	169
  5636  1967  3483               	retlw	131
  5637  1968  34B8               	retlw	184
  5638  1969  3403               	retlw	3
  5639  196A  34BD               	retlw	189
  5640  196B  3483               	retlw	131
  5641  196C  34B7               	retlw	183
  5642  196D  3483               	retlw	131
  5643  196E  34B2               	retlw	178
  5644  196F  3403               	retlw	3
  5645  1970  3490               	retlw	144
  5646  1971  3403               	retlw	3
  5647  1972  3495               	retlw	149
  5648  1973  3483               	retlw	131
  5649  1974  349F               	retlw	159
  5650  1975  3483               	retlw	131
  5651  1976  349A               	retlw	154
  5652  1977  3403               	retlw	3
  5653  1978  348B               	retlw	139
  5654  1979  3483               	retlw	131
  5655  197A  348E               	retlw	142
  5656  197B  3403               	retlw	3
  5657  197C  3484               	retlw	132
  5658  197D  3403               	retlw	3
  5659  197E  3481               	retlw	129
  5660  197F  3483               	retlw	131
  5661  1980  3480               	retlw	128
  5662  1981  3402               	retlw	2
  5663  1982  3485               	retlw	133
  5664  1983  3482               	retlw	130
  5665  1984  348F               	retlw	143
  5666  1985  3482               	retlw	130
  5667  1986  348A               	retlw	138
  5668  1987  3402               	retlw	2
  5669  1988  349B               	retlw	155
  5670  1989  3482               	retlw	130
  5671  198A  349E               	retlw	158
  5672  198B  3402               	retlw	2
  5673  198C  3494               	retlw	148
  5674  198D  3402               	retlw	2
  5675  198E  3491               	retlw	145
  5676  198F  3482               	retlw	130
  5677  1990  34B3               	retlw	179
  5678  1991  3482               	retlw	130
  5679  1992  34B6               	retlw	182
  5680  1993  3402               	retlw	2
  5681  1994  34BC               	retlw	188
  5682  1995  3402               	retlw	2
  5683  1996  34B9               	retlw	185
  5684  1997  3482               	retlw	130
  5685  1998  34A8               	retlw	168
  5686  1999  3402               	retlw	2
  5687  199A  34AD               	retlw	173
  5688  199B  3482               	retlw	130
  5689  199C  34A7               	retlw	167
  5690  199D  3482               	retlw	130
  5691  199E  34A2               	retlw	162
  5692  199F  3402               	retlw	2
  5693  19A0  34E3               	retlw	227
  5694  19A1  3482               	retlw	130
  5695  19A2  34E6               	retlw	230
  5696  19A3  3402               	retlw	2
  5697  19A4  34EC               	retlw	236
  5698  19A5  3402               	retlw	2
  5699  19A6  34E9               	retlw	233
  5700  19A7  3482               	retlw	130
  5701  19A8  34F8               	retlw	248
  5702  19A9  3402               	retlw	2
  5703  19AA  34FD               	retlw	253
  5704  19AB  3482               	retlw	130
  5705  19AC  34F7               	retlw	247
  5706  19AD  3482               	retlw	130
  5707  19AE  34F2               	retlw	242
  5708  19AF  3402               	retlw	2
  5709  19B0  34D0               	retlw	208
  5710  19B1  3402               	retlw	2
  5711  19B2  34D5               	retlw	213
  5712  19B3  3482               	retlw	130
  5713  19B4  34DF               	retlw	223
  5714  19B5  3482               	retlw	130
  5715  19B6  34DA               	retlw	218
  5716  19B7  3402               	retlw	2
  5717  19B8  34CB               	retlw	203
  5718  19B9  3482               	retlw	130
  5719  19BA  34CE               	retlw	206
  5720  19BB  3402               	retlw	2
  5721  19BC  34C4               	retlw	196
  5722  19BD  3402               	retlw	2
  5723  19BE  34C1               	retlw	193
  5724  19BF  3482               	retlw	130
  5725  19C0  3443               	retlw	67
  5726  19C1  3482               	retlw	130
  5727  19C2  3446               	retlw	70
  5728  19C3  3402               	retlw	2
  5729  19C4  344C               	retlw	76
  5730  19C5  3402               	retlw	2
  5731  19C6  3449               	retlw	73
  5732  19C7  3482               	retlw	130
  5733  19C8  3458               	retlw	88
  5734  19C9  3402               	retlw	2
  5735  19CA  345D               	retlw	93
  5736  19CB  3482               	retlw	130
  5737  19CC  3457               	retlw	87
  5738  19CD  3482               	retlw	130
  5739  19CE  3452               	retlw	82
  5740  19CF  3402               	retlw	2
  5741  19D0  3470               	retlw	112
  5742  19D1  3402               	retlw	2
  5743  19D2  3475               	retlw	117
  5744  19D3  3482               	retlw	130
  5745  19D4  347F               	retlw	127
  5746  19D5  3482               	retlw	130
  5747  19D6  347A               	retlw	122
  5748  19D7  3402               	retlw	2
  5749  19D8  346B               	retlw	107
  5750  19D9  3482               	retlw	130
  5751  19DA  346E               	retlw	110
  5752  19DB  3402               	retlw	2
  5753  19DC  3464               	retlw	100
  5754  19DD  3402               	retlw	2
  5755  19DE  3461               	retlw	97
  5756  19DF  3482               	retlw	130
  5757  19E0  3420               	retlw	32
  5758  19E1  3402               	retlw	2
  5759  19E2  3425               	retlw	37
  5760  19E3  3482               	retlw	130
  5761  19E4  342F               	retlw	47
  5762  19E5  3482               	retlw	130
  5763  19E6  342A               	retlw	42
  5764  19E7  3402               	retlw	2
  5765  19E8  343B               	retlw	59
  5766  19E9  3482               	retlw	130
  5767  19EA  343E               	retlw	62
  5768  19EB  3402               	retlw	2
  5769  19EC  3434               	retlw	52
  5770  19ED  3402               	retlw	2
  5771  19EE  3431               	retlw	49
  5772  19EF  3482               	retlw	130
  5773  19F0  3413               	retlw	19
  5774  19F1  3482               	retlw	130
  5775  19F2  3416               	retlw	22
  5776  19F3  3402               	retlw	2
  5777  19F4  341C               	retlw	28
  5778  19F5  3402               	retlw	2
  5779  19F6  3419               	retlw	25
  5780  19F7  3482               	retlw	130
  5781  19F8  3408               	retlw	8
  5782  19F9  3402               	retlw	2
  5783  19FA  340D               	retlw	13
  5784  19FB  3482               	retlw	130
  5785  19FC  3407               	retlw	7
  5786  19FD  3482               	retlw	130
  5787  19FE  3402               	retlw	2
  5788  19FF  3402               	retlw	2
  5789  1A00                     __end_of_CRCtbl:
  5790                           
  5791                           	psect	stringtext2
  5792  2800                     __pstringtext2:
  5793  2800                     _colorRGBArrays:
  5794  2800  34FF               	retlw	255
  5795  2801  3400               	retlw	0
  5796  2802  3400               	retlw	0
  5797  2803  3400               	retlw	0
  5798  2804  34FF               	retlw	255
  5799  2805  3400               	retlw	0
  5800  2806  3400               	retlw	0
  5801  2807  3400               	retlw	0
  5802  2808  34FF               	retlw	255
  5803  2809  34FF               	retlw	255
  5804  280A  3400               	retlw	0
  5805  280B  34FF               	retlw	255
  5806  280C  34FF               	retlw	255
  5807  280D  34FF               	retlw	255
  5808  280E  3400               	retlw	0
  5809  280F  34FF               	retlw	255
  5810  2810  34A5               	retlw	165
  5811  2811  3400               	retlw	0
  5812  2812  3400               	retlw	0
  5813  2813  34FF               	retlw	255
  5814  2814  34FF               	retlw	255
  5815  2815  34FF               	retlw	255
  5816  2816  34FF               	retlw	255
  5817  2817  34FF               	retlw	255
  5818  2818  3400               	retlw	0
  5819  2819  3400               	retlw	0
  5820  281A  3400               	retlw	0
  5821  281B  3400               	retlw	0
  5822  281C  3450               	retlw	80
  5823  281D  34EF               	retlw	239
  5824  281E  34F0               	retlw	240
  5825  281F  34A3               	retlw	163
  5826  2820  340A               	retlw	10
  5827  2821  34A1               	retlw	161
  5828  2822  34D2               	retlw	210
  5829  2823  3469               	retlw	105
  5830  2824  3499               	retlw	153
  5831  2825  344C               	retlw	76
  5832  2826  3400               	retlw	0
  5833  2827  347F               	retlw	127
  5834  2828  34FF               	retlw	255
  5835  2829  3400               	retlw	0
  5836  282A  34FF               	retlw	255
  5837  282B  3445               	retlw	69
  5838  282C  3400               	retlw	0
  5839  282D  3400               	retlw	0
  5840  282E  3400               	retlw	0
  5841  282F  3400               	retlw	0
  5842  2830                     __end_of_colorRGBArrays:
  5843                           
  5844                           	psect	stringtext3
  5845  2858                     __pstringtext3:
  5846  2858                     _rainbowRGBValues:
  5847  2858  34FF               	retlw	255
  5848  2859  3400               	retlw	0
  5849  285A  3400               	retlw	0
  5850  285B  34FF               	retlw	255
  5851  285C  3445               	retlw	69
  5852  285D  3400               	retlw	0
  5853  285E  34FF               	retlw	255
  5854  285F  34FF               	retlw	255
  5855  2860  3400               	retlw	0
  5856  2861  3400               	retlw	0
  5857  2862  34FF               	retlw	255
  5858  2863  3400               	retlw	0
  5859  2864  3400               	retlw	0
  5860  2865  3400               	retlw	0
  5861  2866  34FF               	retlw	255
  5862  2867  34FF               	retlw	255
  5863  2868  3400               	retlw	0
  5864  2869  34FF               	retlw	255
  5865  286A                     __end_of_rainbowRGBValues:
  5866                           
  5867                           	psect	stringtext4
  5868  286A                     __pstringtext4:
  5869  286A                     _row3:
  5870  286A  3400               	retlw	0
  5871  286B  3403               	retlw	3
  5872  286C  3408               	retlw	8
  5873  286D  340D               	retlw	13
  5874  286E  3412               	retlw	18
  5875  286F  3417               	retlw	23
  5876  2870  341C               	retlw	28
  5877  2871  3421               	retlw	33
  5878  2872  3426               	retlw	38
  5879  2873  342B               	retlw	43
  5880  2874  3430               	retlw	48
  5881  2875  3435               	retlw	53
  5882  2876  343A               	retlw	58
  5883  2877  343E               	retlw	62
  5884  2878                     __end_of_row3:
  5885                           
  5886                           	psect	stringtext5
  5887  2878                     __pstringtext5:
  5888  2878                     _row4:
  5889  2878  3402               	retlw	2
  5890  2879  3409               	retlw	9
  5891  287A  340C               	retlw	12
  5892  287B  3413               	retlw	19
  5893  287C  3416               	retlw	22
  5894  287D  341D               	retlw	29
  5895  287E  3420               	retlw	32
  5896  287F  3427               	retlw	39
  5897  2880  342A               	retlw	42
  5898  2881  3431               	retlw	49
  5899  2882  3434               	retlw	52
  5900  2883  343B               	retlw	59
  5901  2884  343D               	retlw	61
  5902  2885                     __end_of_row4:
  5903                           
  5904                           	psect	stringtext6
  5905  2885                     __pstringtext6:
  5906  2885                     _row2:
  5907  2885  3404               	retlw	4
  5908  2886  3407               	retlw	7
  5909  2887  340E               	retlw	14
  5910  2888  3411               	retlw	17
  5911  2889  3418               	retlw	24
  5912  288A  341B               	retlw	27
  5913  288B  3422               	retlw	34
  5914  288C  3425               	retlw	37
  5915  288D  342C               	retlw	44
  5916  288E  342F               	retlw	47
  5917  288F  3436               	retlw	54
  5918  2890  3439               	retlw	57
  5919  2891  343F               	retlw	63
  5920  2892                     __end_of_row2:
  5921                           
  5922                           	psect	stringtext7
  5923  2892                     __pstringtext7:
  5924  2892                     _row5:
  5925  2892  3401               	retlw	1
  5926  2893  340A               	retlw	10
  5927  2894  340B               	retlw	11
  5928  2895  3414               	retlw	20
  5929  2896  3415               	retlw	21
  5930  2897  341E               	retlw	30
  5931  2898  341F               	retlw	31
  5932  2899  3428               	retlw	40
  5933  289A  3429               	retlw	41
  5934  289B  3432               	retlw	50
  5935  289C  3433               	retlw	51
  5936  289D  343C               	retlw	60
  5937  289E                     __end_of_row5:
  5938                           
  5939                           	psect	stringtext8
  5940  289E                     __pstringtext8:
  5941  289E                     _row1:
  5942  289E  3405               	retlw	5
  5943  289F  3406               	retlw	6
  5944  28A0  340F               	retlw	15
  5945  28A1  3410               	retlw	16
  5946  28A2  3419               	retlw	25
  5947  28A3  341A               	retlw	26
  5948  28A4  3423               	retlw	35
  5949  28A5  3424               	retlw	36
  5950  28A6  342D               	retlw	45
  5951  28A7  342E               	retlw	46
  5952  28A8  3437               	retlw	55
  5953  28A9  3438               	retlw	56
  5954  28AA                     __end_of_row1:
  5955                           
  5956                           	psect	stringtext9
  5957  28AE                     __pstringtext9:
  5958  28AE                     _digit4StartPixel:
  5959  28AE  3433               	retlw	51
  5960  28AF  3400               	retlw	0
  5961  28B0                     __end_of_digit4StartPixel:
  5962                           
  5963                           	psect	stringtext10
  5964  28B0                     __pstringtext10:
  5965  28B0                     _digit3StartPixel:
  5966  28B0  3424               	retlw	36
  5967  28B1  3400               	retlw	0
  5968  28B2                     __end_of_digit3StartPixel:
  5969                           
  5970                           	psect	stringtext11
  5971  28B2                     __pstringtext11:
  5972  28B2                     _digit2StartPixel:
  5973  28B2  3410               	retlw	16
  5974  28B3  3400               	retlw	0
  5975  28B4                     __end_of_digit2StartPixel:
  5976                           
  5977                           	psect	stringtext12
  5978  28B4                     __pstringtext12:
  5979  28B4                     _digit1StartPixel:
  5980  28B4  3401               	retlw	1
  5981  28B5  3400               	retlw	0
  5982  28B6                     __end_of_digit1StartPixel:
  5983                           
  5984                           	psect	stringtext13
  5985  2830                     __pstringtext13:
  5986  2830                     _downDigitEncodings:
  5987  2830  3454               	retlw	84
  5988  2831  34DC               	retlw	220
  5989  2832  3454               	retlw	84
  5990  2833  3405               	retlw	5
  5991  2834  3450               	retlw	80
  5992  2835  34BD               	retlw	189
  5993  2836  3454               	retlw	84
  5994  2837  34AD               	retlw	173
  5995  2838  3410               	retlw	16
  5996  2839  34EB               	retlw	235
  5997  283A  3444               	retlw	68
  5998  283B  34ED               	retlw	237
  5999  283C  34C4               	retlw	196
  6000  283D  343D               	retlw	61
  6001  283E  3450               	retlw	80
  6002  283F  348B               	retlw	139
  6003  2840  3454               	retlw	84
  6004  2841  34FD               	retlw	253
  6005  2842  3450               	retlw	80
  6006  2843  34EB               	retlw	235
  6007  2844                     __end_of_downDigitEncodings:
  6008                           
  6009                           	psect	stringtext14
  6010  2844                     __pstringtext14:
  6011  2844                     _upDigitEncodings:
  6012  2844  3454               	retlw	84
  6013  2845  34DC               	retlw	220
  6014  2846  3454               	retlw	84
  6015  2847  3405               	retlw	5
  6016  2848  3444               	retlw	68
  6017  2849  34ED               	retlw	237
  6018  284A  3454               	retlw	84
  6019  284B  34AD               	retlw	173
  6020  284C  3484               	retlw	132
  6021  284D  34B9               	retlw	185
  6022  284E  3450               	retlw	80
  6023  284F  34BD               	retlw	189
  6024  2850  3450               	retlw	80
  6025  2851  34E7               	retlw	231
  6026  2852  3484               	retlw	132
  6027  2853  348D               	retlw	141
  6028  2854  3454               	retlw	84
  6029  2855  34FD               	retlw	253
  6030  2856  3484               	retlw	132
  6031  2857  34BD               	retlw	189
  6032  2858                     __end_of_upDigitEncodings:
  6033                           
  6034                           	psect	stringtext15
  6035  28AA                     __pstringtext15:
  6036  28AA                     STATE_ChangeColorMode@dColorTime:
  6037  28AA  3400               	retlw	0
  6038  28AB  3400               	retlw	0
  6039  28AC  3400               	retlw	0
  6040  28AD  3400               	retlw	0
  6041  28AE                     __end_ofSTATE_ChangeColorMode@dColorTime:
  6042                           
  6043                           	psect	nvBANK1
  6044  00D3                     __pnvBANK1:
  6045  00D3                     _timer5ReloadVal:
  6046  00D3                     	ds	2
  6047  00D5                     _timer1ReloadVal:
  6048  00D5                     	ds	2
  6049                           
  6050                           	psect	nvBANK2
  6051  014B                     __pnvBANK2:
  6052  014B                     _TMR5_InterruptHandler:
  6053  014B                     	ds	2
  6054  014D                     _timer3ReloadVal:
  6055  014D                     	ds	2
  6056  014F                     _TMR1_InterruptHandler:
  6057  014F                     	ds	2
  6058  0151                     _IOCCF5_InterruptHandler:
  6059  0151                     	ds	2
  6060  0153                     _IOCCF4_InterruptHandler:
  6061  0153                     	ds	2
  6062  0155                     _IOCCF3_InterruptHandler:
  6063  0155                     	ds	2
  6064  000E                     _PORTCbits	set	14
  6065  0013                     _PIR3bits	set	19
  6066  0014                     _PIR4bits	set	20
  6067  000B                     _INTCONbits	set	11
  6068  0010                     _PIR0bits	set	16
  6069  001C                     _T1GCONbits	set	28
  6070  001B                     _T1CONbits	set	27
  6071  001B                     _T1CON	set	27
  6072  0011                     _PIR1bits	set	17
  6073  0019                     _TMR1L	set	25
  6074  001A                     _TMR1H	set	26
  6075  001C                     _T1GCON	set	28
  6076  0094                     _PIE4bits	set	148
  6077  0097                     _WDTCON	set	151
  6078  0091                     _PIE1bits	set	145
  6079  0090                     _PIE0bits	set	144
  6080  008E                     _TRISC	set	142
  6081  008C                     _TRISA	set	140
  6082  010E                     _LATCbits	set	270
  6083  010E                     _LATC	set	270
  6084  010C                     _LATA	set	268
  6085  018C                     _ANSELA	set	396
  6086  018E                     _ANSELC	set	398
  6087  020E                     _WPUC	set	526
  6088  020C                     _WPUA	set	524
  6089  028E                     _ODCONC	set	654
  6090  028C                     _ODCONA	set	652
  6091  030E                     _SLRCONC	set	782
  6092  030C                     _SLRCONA	set	780
  6093  0397                     _IOCCPbits	set	919
  6094  0398                     _IOCCNbits	set	920
  6095  0399                     _IOCCFbits	set	921
  6096  038E                     _INLVLC	set	910
  6097  038C                     _INLVLA	set	908
  6098  041B                     _T5GCONbits	set	1051
  6099  041A                     _T5CONbits	set	1050
  6100  041A                     _T5CON	set	1050
  6101  0418                     _TMR5L	set	1048
  6102  0419                     _TMR5H	set	1049
  6103  041B                     _T5GCON	set	1051
  6104  0414                     _T3GCONbits	set	1044
  6105  0413                     _T3CONbits	set	1043
  6106  0413                     _T3CON	set	1043
  6107  0411                     _TMR3L	set	1041
  6108  0412                     _TMR3H	set	1042
  6109  0414                     _T3GCON	set	1044
  6110  0896                     _NVMCON2	set	2198
  6111  0893                     _NVMDATL	set	2195
  6112  0894                     _NVMDATH	set	2196
  6113  0895                     _NVMCON1bits	set	2197
  6114  0892                     _NVMADRH	set	2194
  6115  0891                     _NVMADRL	set	2193
  6116  0916                     _PMD5	set	2326
  6117  0915                     _PMD4	set	2325
  6118  0914                     _PMD3	set	2324
  6119  0913                     _PMD2	set	2323
  6120  0912                     _PMD1	set	2322
  6121  0911                     _PMD0	set	2321
  6122  091E                     _OSCTUNE	set	2334
  6123  091F                     _OSCFRQ	set	2335
  6124  091D                     _OSCEN	set	2333
  6125  091B                     _OSCCON3	set	2331
  6126  0919                     _OSCCON1	set	2329
  6127                           
  6128                           	psect	cinit
  6129  002B                     start_initialization:	
  6130                           ; #config settings
  6131                           
  6132  002B                     __initialization:	;BIGRAM
  6133                           
  6134                           ; Initialize objects allocated to BANK0
  6135  002B  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  6136  002E  00E6               	movwf	__pdataBANK0& (0+127)
  6137                           
  6138                           ; Initialize objects allocated to BANK1
  6139  002F  30B1               	movlw	low __pidataBANK1
  6140  0030  0084               	movwf	4
  6141  0031  30A2               	movlw	(high __pidataBANK1)| (0+128)
  6142  0032  0085               	movwf	5
  6143  0033  30CE               	movlw	low __pdataBANK1
  6144  0034  0086               	movwf	6
  6145  0035  3000               	movlw	high __pdataBANK1
  6146  0036  0087               	movwf	7
  6147  0037  3000               	movlw	0
  6148  0038  00FF               	movwf	btemp+1
  6149  0039  3005               	movlw	5
  6150  003A  31A3  2336  3180   	fcall	init_ram
  6151                           
  6152                           ; Initialize objects allocated to BANK3
  6153  003D  3064               	movlw	low __pidataBANK3
  6154  003E  0084               	movwf	4
  6155  003F  30A4               	movlw	(high __pidataBANK3)| (0+128)
  6156  0040  0085               	movwf	5
  6157  0041  30C3               	movlw	low __pdataBANK3
  6158  0042  0086               	movwf	6
  6159  0043  3001               	movlw	high __pdataBANK3
  6160  0044  0087               	movwf	7
  6161  0045  3000               	movlw	0
  6162  0046  00FF               	movwf	btemp+1
  6163  0047  301A               	movlw	26
  6164  0048  31A3  2336  3180   	fcall	init_ram
  6165                           
  6166                           ; Clear objects allocated to BIGRAM
  6167  004B  30E8               	movlw	low (0+9192)
  6168  004C  0084               	movwf	4
  6169  004D  3023               	movlw	high (0+9192)
  6170  004E  0085               	movwf	5
  6171  004F  3008               	movlw	8
  6172  0050  00FE               	movwf	btemp
  6173  0051  3004               	movlw	4
  6174  0052  00FF               	movwf	btemp+1
  6175  0053  31A3  232A  3180   	fcall	clear_ram0
  6176                           
  6177                           ; Clear objects allocated to COMMON
  6178  0056  01FB               	clrf	__pbssCOMMON& (0+127)
  6179  0057  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  6180  0058  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  6181                           
  6182                           ; Clear objects allocated to BANK0
  6183  0059  01DD               	clrf	__pbssBANK0& (0+127)
  6184  005A  01DE               	clrf	(__pbssBANK0+1)& (0+127)
  6185  005B  01DF               	clrf	(__pbssBANK0+2)& (0+127)
  6186  005C  01E0               	clrf	(__pbssBANK0+3)& (0+127)
  6187  005D  01E1               	clrf	(__pbssBANK0+4)& (0+127)
  6188  005E  01E2               	clrf	(__pbssBANK0+5)& (0+127)
  6189  005F  01E3               	clrf	(__pbssBANK0+6)& (0+127)
  6190  0060  01E4               	clrf	(__pbssBANK0+7)& (0+127)
  6191  0061  01E5               	clrf	(__pbssBANK0+8)& (0+127)
  6192                           
  6193                           ; Clear objects allocated to BANK1
  6194  0062  30BB               	movlw	low __pbssBANK1
  6195  0063  0084               	movwf	4
  6196  0064  3000               	movlw	high __pbssBANK1
  6197  0065  0085               	movwf	5
  6198  0066  3013               	movlw	19
  6199  0067  00FE               	movwf	btemp
  6200  0068  3000               	movlw	0
  6201  0069  00FF               	movwf	btemp+1
  6202  006A  31A3  232A  3180   	fcall	clear_ram0
  6203                           
  6204                           ; Clear objects allocated to BANK2
  6205  006D  3020               	movlw	low __pbssBANK2
  6206  006E  0084               	movwf	4
  6207  006F  3001               	movlw	high __pbssBANK2
  6208  0070  0085               	movwf	5
  6209  0071  302B               	movlw	43
  6210  0072  00FE               	movwf	btemp
  6211  0073  3000               	movlw	0
  6212  0074  00FF               	movwf	btemp+1
  6213  0075  31A3  232A         	fcall	clear_ram0
  6214  0077                     end_of_initialization:	
  6215                           ;End of C runtime variable initialization code
  6216                           
  6217  0077                     __end_of__initialization:
  6218  0077  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6219  0078  0020               	movlb	0
  6220  0079  31A3  2B1E         	ljmp	_main	;jump to C main() function
  6221                           
  6222                           	psect	bssCOMMON
  6223  007B                     __pbssCOMMON:
  6224  007B                     Clock_CrossingRainbowPattern@thisIndex:
  6225  007B                     	ds	2
  6226  007D                     _isRotaryEncoderEnabled:
  6227  007D                     	ds	1
  6228                           
  6229                           	psect	bssBANK0
  6230  005D                     __pbssBANK0:
  6231  005D                     Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx:
  6232  005D                     	ds	2
  6233  005F                     Clock_CrossingRainbowPattern@rainbowRowIdx:
  6234  005F                     	ds	2
  6235  0061                     _rot:
  6236  0061                     	ds	1
  6237  0062                     _ledArray:
  6238  0062                     	ds	4
  6239                           
  6240                           	psect	dataBANK0
  6241  0066                     __pdataBANK0:
  6242  0066                     Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit1:
  6243  0066                     	ds	1
  6244                           
  6245                           	psect	bssBANK1
  6246  00BB                     __pbssBANK1:
  6247  00BB                     _currentTimeInSeconds:
  6248  00BB                     	ds	4
  6249  00BF                     STATE_PatternMode@patternIndex:
  6250  00BF                     	ds	4
  6251  00C3                     Clock_CrossingRainbowPatternwithDelays@thisIndex:
  6252  00C3                     	ds	2
  6253  00C5                     Clock_IterateSinglePixelByIndex@idx:
  6254  00C5                     	ds	2
  6255  00C7                     APP_TASKS@wasSwitchPressedInTimeMode:
  6256  00C7                     	ds	1
  6257  00C8                     _currentBACKGROUNDrgbArray:
  6258  00C8                     	ds	3
  6259  00CB                     _currentDIGITrgbArray:
  6260  00CB                     	ds	3
  6261                           
  6262                           	psect	dataBANK1
  6263  00CE                     __pdataBANK1:
  6264  00CE                     Time_RenderIfMinutesHaveChanged@minutesAtLastChange:
  6265  00CE                     	ds	2
  6266  00D0                     Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit4:
  6267  00D0                     	ds	1
  6268  00D1                     Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit3:
  6269  00D1                     	ds	1
  6270  00D2                     Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit2:
  6271  00D2                     	ds	1
  6272                           
  6273                           	psect	bssBANK2
  6274  0120                     __pbssBANK2:
  6275  0120                     _app:
  6276  0120                     	ds	10
  6277  012A                     _patterns:
  6278  012A                     	ds	10
  6279  0134                     Time_RenderInputTime@F6462:
  6280  0134                     	ds	4
  6281  0138                     Time_RenderIfMinutesHaveChanged@F6453:
  6282  0138                     	ds	4
  6283  013C                     WS2812b_SetPixelBlockConstantColor@F6641:
  6284  013C                     	ds	3
  6285  013F                     STATE_ChangeColorMode@F6690:
  6286  013F                     	ds	3
  6287  0142                     STATE_ChangeColorMode@F6682:
  6288  0142                     	ds	3
  6289  0145                     Clock_Popcorn_Pattern_Hold@numRenders:
  6290  0145                     	ds	2
  6291  0147                     _seed:
  6292  0147                     	ds	4
  6293                           
  6294                           	psect	dataBANK3
  6295  01C3                     __pdataBANK3:
  6296  01C3                     _rot@app$F1486:
  6297  01C3                     	ds	26
  6298                           
  6299                           	psect	inittext
  6300  2336                     init_ram:
  6301  2336  00FE               	movwf	126
  6302  2337                     initloop:
  6303  2337  0012               	moviw fsr0++
  6304  2338  001E               	movwi fsr1++
  6305  2339  3001               	movlw	1
  6306  233A  02FE               	subwf	126,f
  6307  233B  3000               	movlw	0
  6308  233C  3BFF               	subwfb	127,f
  6309  233D  087F               	movf	127,w
  6310  233E  047E               	iorwf	126,w
  6311  233F  1903               	btfsc	3,2
  6312  2340  3400               	retlw	0
  6313  2341  2B37               	goto	initloop
  6314                           
  6315                           	psect	clrtext
  6316  232A                     clear_ram0:	
  6317                           ;	Called with FSR0 containing the base address, and
  6318                           ;	btemp/btemp+1 has the size to clear
  6319                           
  6320  232A  0064               	clrwdt	;clear the watchdog before getting into this loop
  6321  232B                     clrloop0:
  6322  232B  0180               	clrf	0	;clear RAM location pointed to by FSR
  6323  232C  3101               	addfsr 0,1
  6324  232D  3001               	movlw	1
  6325  232E  02FE               	subwf	126,f
  6326  232F  3000               	movlw	0
  6327  2330  3BFF               	subwfb	127,f
  6328  2331  087F               	movf	127,w
  6329  2332  047E               	iorwf	126,w
  6330  2333  1903               	btfsc	3,2
  6331  2334  3400               	retlw	0	;all done for this memory range, return
  6332  2335  2B2B               	goto	clrloop0	;have we reached the end yet?
  6333                           
  6334                           	psect	cstackBANK3
  6335  01A0                     __pcstackBANK3:
  6336  01A0                     STATE_ChangeColorMode@currentTime:
  6337                           
  6338                           ; 4 bytes @ 0x0
  6339  01A0                     	ds	4
  6340  01A4                     STATE_ChangeColorMode@eepromReadbackData:
  6341                           
  6342                           ; 8 bytes @ 0x4
  6343  01A4                     	ds	8
  6344  01AC                     _STATE_ChangeColorMode$989:
  6345                           
  6346                           ; 2 bytes @ 0xC
  6347  01AC                     	ds	2
  6348  01AE                     _STATE_ChangeColorMode$990:
  6349                           
  6350                           ; 2 bytes @ 0xE
  6351  01AE                     	ds	2
  6352  01B0                     _STATE_ChangeColorMode$993:
  6353                           
  6354                           ; 2 bytes @ 0x10
  6355  01B0                     	ds	2
  6356  01B2                     _STATE_ChangeColorMode$994:
  6357                           
  6358                           ; 2 bytes @ 0x12
  6359  01B2                     	ds	2
  6360  01B4                     STATE_ChangeColorMode@maxRetries:
  6361                           
  6362                           ; 2 bytes @ 0x14
  6363  01B4                     	ds	2
  6364  01B6                     STATE_ChangeColorMode@digitSelection:
  6365                           
  6366                           ; 3 bytes @ 0x16
  6367  01B6                     	ds	3
  6368  01B9                     STATE_ChangeColorMode@backgroundSelection:
  6369                           
  6370                           ; 3 bytes @ 0x19
  6371  01B9                     	ds	3
  6372  01BC                     STATE_ChangeColorMode@crc:
  6373                           
  6374                           ; 2 bytes @ 0x1C
  6375  01BC                     	ds	2
  6376  01BE                     STATE_ChangeColorMode@rotCounts:
  6377                           
  6378                           ; 4 bytes @ 0x1E
  6379  01BE                     	ds	4
  6380  01C2                     STATE_ChangeColorMode@arrayRowIdx:
  6381                           
  6382                           ; 1 bytes @ 0x22
  6383  01C2                     	ds	1
  6384                           
  6385                           	psect	cstackBANK1
  6386  00A0                     __pcstackBANK1:
  6387  00A0                     ?_Time_RenderInputTime:
  6388  00A0                     ??_APP_Initialize:	
  6389                           ; 1 bytes @ 0x0
  6390                           
  6391  00A0                     ??_Time_RenderIfMinutesHaveChanged:	
  6392                           ; 1 bytes @ 0x0
  6393                           
  6394  00A0                     _Clock_ForceRender$2392:	
  6395                           ; 1 bytes @ 0x0
  6396                           
  6397  00A0                     _STATE_PatternMode$916:	
  6398                           ; 2 bytes @ 0x0
  6399                           
  6400  00A0                     Time_RenderInputTime@timeInSeconds:	
  6401                           ; 4 bytes @ 0x0
  6402                           
  6403                           
  6404                           ; 4 bytes @ 0x0
  6405  00A0                     	ds	4
  6406  00A4                     Time_RenderIfMinutesHaveChanged@isSwitchPressHrMnMode:
  6407  00A4                     Time_RenderInputTime@setCurrentTime:	
  6408                           ; 1 bytes @ 0x4
  6409                           
  6410  00A4                     STATE_PatternMode@rotCounts:	
  6411                           ; 1 bytes @ 0x4
  6412                           
  6413                           
  6414                           ; 4 bytes @ 0x4
  6415  00A4                     	ds	1
  6416  00A5                     ??_Time_RenderInputTime:
  6417  00A5                     _Time_RenderIfMinutesHaveChanged$1035:	
  6418                           ; 1 bytes @ 0x5
  6419                           
  6420                           
  6421                           ; 4 bytes @ 0x5
  6422  00A5                     	ds	1
  6423  00A6                     APP_Initialize@maxRetries:
  6424                           
  6425                           ; 2 bytes @ 0x6
  6426  00A6                     	ds	2
  6427  00A8                     Time_RenderInputTime@currentTimeInMinutes:
  6428  00A8                     APP_Initialize@eepromReadbackData:	
  6429                           ; 2 bytes @ 0x8
  6430                           
  6431                           
  6432                           ; 8 bytes @ 0x8
  6433  00A8                     	ds	1
  6434  00A9                     Time_RenderIfMinutesHaveChanged@minutesDelta:
  6435                           
  6436                           ; 4 bytes @ 0x9
  6437  00A9                     	ds	1
  6438  00AA                     Time_RenderInputTime@hours:
  6439                           
  6440                           ; 1 bytes @ 0xA
  6441  00AA                     	ds	1
  6442  00AB                     Time_RenderInputTime@minutes:
  6443                           
  6444                           ; 1 bytes @ 0xB
  6445  00AB                     	ds	1
  6446  00AC                     Time_RenderInputTime@t:
  6447                           
  6448                           ; 4 bytes @ 0xC
  6449  00AC                     	ds	1
  6450  00AD                     Time_RenderIfMinutesHaveChanged@hours:
  6451                           
  6452                           ; 1 bytes @ 0xD
  6453  00AD                     	ds	1
  6454  00AE                     Time_RenderIfMinutesHaveChanged@minutes:
  6455                           
  6456                           ; 1 bytes @ 0xE
  6457  00AE                     	ds	1
  6458  00AF                     Time_RenderIfMinutesHaveChanged@currentTimeInMinutes:
  6459                           
  6460                           ; 2 bytes @ 0xF
  6461  00AF                     	ds	1
  6462  00B0                     ??_STATE_ChangeColorMode:
  6463                           
  6464                           ; 1 bytes @ 0x10
  6465  00B0                     	ds	1
  6466  00B1                     Time_RenderIfMinutesHaveChanged@thisTimeInSeconds:
  6467                           
  6468                           ; 4 bytes @ 0x11
  6469  00B1                     	ds	4
  6470  00B5                     Time_RenderIfMinutesHaveChanged@t:
  6471                           
  6472                           ; 4 bytes @ 0x15
  6473  00B5                     	ds	4
  6474  00B9                     ??_APP_TASKS:
  6475                           
  6476                           ; 1 bytes @ 0x19
  6477  00B9                     	ds	2
  6478                           
  6479                           	psect	cstackCOMMON
  6480  0070                     __pcstackCOMMON:
  6481  0070                     ?_IOCCF3_DefaultInterruptHandler:
  6482  0070                     ??_IOCCF3_DefaultInterruptHandler:	
  6483                           ; 1 bytes @ 0x0
  6484                           
  6485  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  6486                           ; 1 bytes @ 0x0
  6487                           
  6488  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  6489                           ; 1 bytes @ 0x0
  6490                           
  6491  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  6492                           ; 1 bytes @ 0x0
  6493                           
  6494  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  6495                           ; 1 bytes @ 0x0
  6496                           
  6497  0070                     ?_IOCCF3_ISR:	
  6498                           ; 1 bytes @ 0x0
  6499                           
  6500  0070                     ?_IOCCF4_ISR:	
  6501                           ; 1 bytes @ 0x0
  6502                           
  6503  0070                     ?_IOCCF5_ISR:	
  6504                           ; 1 bytes @ 0x0
  6505                           
  6506  0070                     ?_TMR1_DefaultInterruptHandler:	
  6507                           ; 1 bytes @ 0x0
  6508                           
  6509  0070                     ??_TMR1_DefaultInterruptHandler:	
  6510                           ; 1 bytes @ 0x0
  6511                           
  6512  0070                     ?_TMR1_CallBack:	
  6513                           ; 1 bytes @ 0x0
  6514                           
  6515  0070                     ??_TMR1_CallBack:	
  6516                           ; 1 bytes @ 0x0
  6517                           
  6518  0070                     ?_PMD_Initialize:	
  6519                           ; 1 bytes @ 0x0
  6520                           
  6521  0070                     ?_OSCILLATOR_Initialize:	
  6522                           ; 1 bytes @ 0x0
  6523                           
  6524  0070                     ?_WDT_Initialize:	
  6525                           ; 1 bytes @ 0x0
  6526                           
  6527  0070                     ?_TMR3_Initialize:	
  6528                           ; 1 bytes @ 0x0
  6529                           
  6530  0070                     ?_TMR5_Initialize:	
  6531                           ; 1 bytes @ 0x0
  6532                           
  6533  0070                     ?_TMR5_ISR:	
  6534                           ; 1 bytes @ 0x0
  6535                           
  6536  0070                     ?_TMR5_DefaultInterruptHandler:	
  6537                           ; 1 bytes @ 0x0
  6538                           
  6539  0070                     ??_TMR5_DefaultInterruptHandler:	
  6540                           ; 1 bytes @ 0x0
  6541                           
  6542  0070                     ?_TMR5_CallBack:	
  6543                           ; 1 bytes @ 0x0
  6544                           
  6545  0070                     ?_Clock_IterateSinglePixelByIndex:	
  6546                           ; 1 bytes @ 0x0
  6547                           
  6548  0070                     ?_Clock_CrossingRainbowPattern:	
  6549                           ; 1 bytes @ 0x0
  6550                           
  6551  0070                     ?_Clock_CrossingRainbowPatternwithDelays:	
  6552                           ; 1 bytes @ 0x0
  6553                           
  6554  0070                     ?_Clock_Popcorn_Pattern:	
  6555                           ; 1 bytes @ 0x0
  6556                           
  6557  0070                     ?_Clock_Popcorn_Pattern_Hold:	
  6558                           ; 1 bytes @ 0x0
  6559                           
  6560  0070                     ?_Clock_PrerenderPixelAndBackgroundValues:	
  6561                           ; 1 bytes @ 0x0
  6562                           
  6563  0070                     ?_RotaryEncoder_HasButtonPressOccurred:	
  6564                           ; 1 bytes @ 0x0
  6565                           
  6566  0070                     ?_Time_IncrementSecondsISR:	
  6567                           ; 1 bytes @ 0x0
  6568                           
  6569  0070                     ??_Time_IncrementSecondsISR:	
  6570                           ; 1 bytes @ 0x0
  6571                           
  6572  0070                     ?_Clock_WriteTimeDigitValuesAndRenderScreen:	
  6573                           ; 1 bytes @ 0x0
  6574                           
  6575  0070                     ?_APP_Initialize:	
  6576                           ; 1 bytes @ 0x0
  6577                           
  6578  0070                     ?_APP_TASKS:	
  6579                           ; 1 bytes @ 0x0
  6580                           
  6581  0070                     ?_RotaryEncoder_ReadShaftISR:	
  6582                           ; 1 bytes @ 0x0
  6583                           
  6584  0070                     ??_RotaryEncoder_ReadShaftISR:	
  6585                           ; 1 bytes @ 0x0
  6586                           
  6587  0070                     ?_RotaryEncoder_ReadButtonISR:	
  6588                           ; 1 bytes @ 0x0
  6589                           
  6590  0070                     ?_Timer1Interrupt:	
  6591                           ; 1 bytes @ 0x0
  6592                           
  6593  0070                     ??_Timer1Interrupt:	
  6594                           ; 1 bytes @ 0x0
  6595                           
  6596  0070                     ?_Clock_FixDigit4LastThreePixels:	
  6597                           ; 1 bytes @ 0x0
  6598                           
  6599  0070                     ?_PIN_MANAGER_Initialize:	
  6600                           ; 1 bytes @ 0x0
  6601                           
  6602  0070                     ?_PIN_MANAGER_IOC:	
  6603                           ; 1 bytes @ 0x0
  6604                           
  6605  0070                     ?_TMR1_Initialize:	
  6606                           ; 1 bytes @ 0x0
  6607                           
  6608  0070                     ?_TMR1_StartTimer:	
  6609                           ; 1 bytes @ 0x0
  6610                           
  6611  0070                     ?_TMR1_WriteTimer:	
  6612                           ; 1 bytes @ 0x0
  6613                           
  6614  0070                     ?_TMR1_ISR:	
  6615                           ; 1 bytes @ 0x0
  6616                           
  6617  0070                     ?_SYSTEM_Initialize:	
  6618                           ; 1 bytes @ 0x0
  6619                           
  6620  0070                     ?_INTERRUPT_InterruptManager:	
  6621                           ; 1 bytes @ 0x0
  6622                           
  6623  0070                     ?_TMR3_StartTimer:	
  6624                           ; 1 bytes @ 0x0
  6625                           
  6626  0070                     ?_TMR5_StartTimer:	
  6627                           ; 1 bytes @ 0x0
  6628                           
  6629  0070                     ?_TMR5_WriteTimer:	
  6630                           ; 1 bytes @ 0x0
  6631                           
  6632  0070                     ?_STATE_PatternMode:	
  6633                           ; 1 bytes @ 0x0
  6634                           
  6635  0070                     ?_State_SetFunctionLookupTable:	
  6636                           ; 1 bytes @ 0x0
  6637                           
  6638  0070                     ?_STATE_ChangeColorMode:	
  6639                           ; 1 bytes @ 0x0
  6640                           
  6641  0070                     ?_Time_InitializeTimeModule:	
  6642                           ; 1 bytes @ 0x0
  6643                           
  6644  0070                     ?_Time_EnableTimeModule:	
  6645                           ; 1 bytes @ 0x0
  6646                           
  6647  0070                     ?_Time_RenderIfMinutesHaveChanged:	
  6648                           ; 1 bytes @ 0x0
  6649                           
  6650  0070                     ?_main:	
  6651                           ; 1 bytes @ 0x0
  6652                           
  6653  0070                     ?_RotaryEncoder_Init:	
  6654                           ; 1 bytes @ 0x0
  6655                           
  6656  0070                     ?_RotaryEncoder_Enable:	
  6657                           ; 1 bytes @ 0x0
  6658                           
  6659  0070                     ?_RotaryEncoder_GetSwitchState:	
  6660                           ; 1 bytes @ 0x0
  6661                           
  6662  0070                     ?i1_TMR3_ReadTimer:	
  6663                           ; 1 bytes @ 0x0
  6664                           
  6665  0070                     TMR1_WriteTimer@timerVal:	
  6666                           ; 2 bytes @ 0x0
  6667                           
  6668  0070                     TMR5_WriteTimer@timerVal:	
  6669                           ; 2 bytes @ 0x0
  6670                           
  6671                           
  6672                           ; 2 bytes @ 0x0
  6673  0070                     	ds	2
  6674  0072                     ??_TMR1_WriteTimer:
  6675  0072                     ??_TMR1_ISR:	
  6676                           ; 1 bytes @ 0x2
  6677                           
  6678  0072                     ??_TMR5_WriteTimer:	
  6679                           ; 1 bytes @ 0x2
  6680                           
  6681  0072                     ??i1_TMR3_ReadTimer:	
  6682                           ; 1 bytes @ 0x2
  6683                           
  6684  0072                     _RotaryEncoder_ReadShaftISR$1369:	
  6685                           ; 1 bytes @ 0x2
  6686                           
  6687                           
  6688                           ; 2 bytes @ 0x2
  6689  0072                     	ds	2
  6690  0074                     ??_IOCCF3_ISR:
  6691  0074                     ??_IOCCF4_ISR:	
  6692                           ; 1 bytes @ 0x4
  6693                           
  6694  0074                     ??_TMR5_ISR:	
  6695                           ; 1 bytes @ 0x4
  6696                           
  6697  0074                     ??_TMR5_CallBack:	
  6698                           ; 1 bytes @ 0x4
  6699                           
  6700                           
  6701                           ; 1 bytes @ 0x4
  6702  0074                     	ds	3
  6703  0077                     i1TMR3_ReadTimer@readVal:
  6704                           
  6705                           ; 2 bytes @ 0x7
  6706  0077                     	ds	2
  6707  0079                     i1TMR3_ReadTimer@readValHigh:
  6708                           
  6709                           ; 1 bytes @ 0x9
  6710  0079                     	ds	1
  6711  007A                     i1TMR3_ReadTimer@readValLow:
  6712                           
  6713                           ; 1 bytes @ 0xA
  6714  007A                     	ds	1
  6715  007B                     ??_IOCCF5_ISR:
  6716  007B                     ??_PIN_MANAGER_IOC:	
  6717                           ; 1 bytes @ 0xB
  6718                           
  6719  007B                     ??_INTERRUPT_InterruptManager:	
  6720                           ; 1 bytes @ 0xB
  6721                           
  6722                           
  6723                           	psect	cstackBANK0
  6724  0021                     __pcstackBANK0:	
  6725                           ; 1 bytes @ 0xB
  6726                           
  6727  0021                     ??_RotaryEncoder_ReadButtonISR:
  6728                           
  6729                           ; 1 bytes @ 0x0
  6730  0021                     	ds	4
  6731  0025                     RotaryEncoder_ReadButtonISR@positiveWidth_cts:
  6732                           
  6733                           ; 2 bytes @ 0x4
  6734  0025                     	ds	2
  6735  0027                     RotaryEncoder_ReadButtonISR@currentTimestamp:
  6736                           
  6737                           ; 2 bytes @ 0x6
  6738  0027                     	ds	2
  6739  0029                     ?_IOCCF3_SetInterruptHandler:
  6740  0029                     ?_IOCCF4_SetInterruptHandler:	
  6741                           ; 1 bytes @ 0x8
  6742                           
  6743  0029                     ?_IOCCF5_SetInterruptHandler:	
  6744                           ; 1 bytes @ 0x8
  6745                           
  6746  0029                     ?_TMR1_SetInterruptHandler:	
  6747                           ; 1 bytes @ 0x8
  6748                           
  6749  0029                     ??_PMD_Initialize:	
  6750                           ; 1 bytes @ 0x8
  6751                           
  6752  0029                     ??_OSCILLATOR_Initialize:	
  6753                           ; 1 bytes @ 0x8
  6754                           
  6755  0029                     ??_WDT_Initialize:	
  6756                           ; 1 bytes @ 0x8
  6757                           
  6758  0029                     ??_TMR3_Initialize:	
  6759                           ; 1 bytes @ 0x8
  6760                           
  6761  0029                     ?_TMR5_SetInterruptHandler:	
  6762                           ; 1 bytes @ 0x8
  6763                           
  6764  0029                     ??_RotaryEncoder_HasButtonPressOccurred:	
  6765                           ; 1 bytes @ 0x8
  6766                           
  6767  0029                     ??_TMR1_StartTimer:	
  6768                           ; 1 bytes @ 0x8
  6769                           
  6770  0029                     ??_TMR3_StartTimer:	
  6771                           ; 1 bytes @ 0x8
  6772                           
  6773  0029                     ??_TMR5_StartTimer:	
  6774                           ; 1 bytes @ 0x8
  6775                           
  6776  0029                     ?_DATAEE_WriteByte:	
  6777                           ; 1 bytes @ 0x8
  6778                           
  6779  0029                     ?_DATAEE_ReadByte:	
  6780                           ; 1 bytes @ 0x8
  6781                           
  6782  0029                     ??_State_SetFunctionLookupTable:	
  6783                           ; 1 bytes @ 0x8
  6784                           
  6785  0029                     ??_Time_EnableTimeModule:	
  6786                           ; 1 bytes @ 0x8
  6787                           
  6788  0029                     ?_WS2812B_Render:	
  6789                           ; 1 bytes @ 0x8
  6790                           
  6791  0029                     ??_RotaryEncoder_GetSwitchState:	
  6792                           ; 1 bytes @ 0x8
  6793                           
  6794  0029                     ?_CRC16_Calculate16bitCRC:	
  6795                           ; 1 bytes @ 0x8
  6796                           
  6797  0029                     ?_TMR3_ReadTimer:	
  6798                           ; 2 bytes @ 0x8
  6799                           
  6800  0029                     ?___wmul:	
  6801                           ; 2 bytes @ 0x8
  6802                           
  6803  0029                     ?___lwdiv:	
  6804                           ; 2 bytes @ 0x8
  6805                           
  6806  0029                     ?_RotaryEncoder_GetShaftCounts:	
  6807                           ; 2 bytes @ 0x8
  6808                           
  6809  0029                     ?_Time_GetCurrentTimeInSeconds:	
  6810                           ; 4 bytes @ 0x8
  6811                           
  6812  0029                     ?_WS2812b_Initialize:	
  6813                           ; 4 bytes @ 0x8
  6814                           
  6815  0029                     ?___lmul:	
  6816                           ; 4 bytes @ 0x8
  6817                           
  6818  0029                     ?___lldiv:	
  6819                           ; 4 bytes @ 0x8
  6820                           
  6821  0029                     IOCCF3_SetInterruptHandler@InterruptHandler:	
  6822                           ; 4 bytes @ 0x8
  6823                           
  6824  0029                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  6825                           ; 2 bytes @ 0x8
  6826                           
  6827  0029                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  6828                           ; 2 bytes @ 0x8
  6829                           
  6830  0029                     TMR1_SetInterruptHandler@InterruptHandler:	
  6831                           ; 2 bytes @ 0x8
  6832                           
  6833  0029                     TMR5_SetInterruptHandler@InterruptHandler:	
  6834                           ; 2 bytes @ 0x8
  6835                           
  6836  0029                     DATAEE_WriteByte@bAdd:	
  6837                           ; 2 bytes @ 0x8
  6838                           
  6839  0029                     DATAEE_ReadByte@bAdd:	
  6840                           ; 2 bytes @ 0x8
  6841                           
  6842  0029                     WS2812b_Initialize@pxBuff:	
  6843                           ; 2 bytes @ 0x8
  6844                           
  6845  0029                     WS2812B_Render@strip:	
  6846                           ; 2 bytes @ 0x8
  6847                           
  6848  0029                     CRC16_Calculate16bitCRC@data:	
  6849                           ; 2 bytes @ 0x8
  6850                           
  6851  0029                     ___wmul@multiplier:	
  6852                           ; 2 bytes @ 0x8
  6853                           
  6854  0029                     ___lwdiv@divisor:	
  6855                           ; 2 bytes @ 0x8
  6856                           
  6857  0029                     ___lmul@multiplier:	
  6858                           ; 2 bytes @ 0x8
  6859                           
  6860  0029                     ___lldiv@divisor:	
  6861                           ; 4 bytes @ 0x8
  6862                           
  6863                           
  6864                           ; 4 bytes @ 0x8
  6865  0029                     	ds	1
  6866  002A                     RotaryEncoder_GetSwitchState@currentState:
  6867                           
  6868                           ; 1 bytes @ 0x9
  6869  002A                     	ds	1
  6870  002B                     ??_IOCCF3_SetInterruptHandler:
  6871  002B                     ??_IOCCF4_SetInterruptHandler:	
  6872                           ; 1 bytes @ 0xA
  6873                           
  6874  002B                     ??_IOCCF5_SetInterruptHandler:	
  6875                           ; 1 bytes @ 0xA
  6876                           
  6877  002B                     ??_TMR1_SetInterruptHandler:	
  6878                           ; 1 bytes @ 0xA
  6879                           
  6880  002B                     ??_TMR5_Initialize:	
  6881                           ; 1 bytes @ 0xA
  6882                           
  6883  002B                     ??_TMR5_SetInterruptHandler:	
  6884                           ; 1 bytes @ 0xA
  6885                           
  6886  002B                     ??_PIN_MANAGER_Initialize:	
  6887                           ; 1 bytes @ 0xA
  6888                           
  6889  002B                     ??_TMR1_Initialize:	
  6890                           ; 1 bytes @ 0xA
  6891                           
  6892  002B                     ??_SYSTEM_Initialize:	
  6893                           ; 1 bytes @ 0xA
  6894                           
  6895  002B                     ??_TMR3_ReadTimer:	
  6896                           ; 1 bytes @ 0xA
  6897                           
  6898  002B                     ??_DATAEE_ReadByte:	
  6899                           ; 1 bytes @ 0xA
  6900                           
  6901  002B                     ??_Time_InitializeTimeModule:	
  6902                           ; 1 bytes @ 0xA
  6903                           
  6904  002B                     ??_WS2812B_Render:	
  6905                           ; 1 bytes @ 0xA
  6906                           
  6907  002B                     ??_RotaryEncoder_Init:	
  6908                           ; 1 bytes @ 0xA
  6909                           
  6910  002B                     DATAEE_WriteByte@bData:	
  6911                           ; 1 bytes @ 0xA
  6912                           
  6913  002B                     WS2812b_Initialize@numElements:	
  6914                           ; 1 bytes @ 0xA
  6915                           
  6916  002B                     CRC16_Calculate16bitCRC@size:	
  6917                           ; 2 bytes @ 0xA
  6918                           
  6919  002B                     ___wmul@multiplicand:	
  6920                           ; 2 bytes @ 0xA
  6921                           
  6922  002B                     ___lwdiv@dividend:	
  6923                           ; 2 bytes @ 0xA
  6924                           
  6925                           
  6926                           ; 2 bytes @ 0xA
  6927  002B                     	ds	1
  6928  002C                     ??_DATAEE_WriteByte:
  6929  002C                     DATAEE_WriteByte@GIEBitValue:	
  6930                           ; 1 bytes @ 0xB
  6931                           
  6932  002C                     RotaryEncoder_Init@rotEncPtr:	
  6933                           ; 1 bytes @ 0xB
  6934                           
  6935                           
  6936                           ; 1 bytes @ 0xB
  6937  002C                     	ds	1
  6938  002D                     ??_RotaryEncoder_GetShaftCounts:
  6939  002D                     ??_Time_GetCurrentTimeInSeconds:	
  6940                           ; 1 bytes @ 0xC
  6941                           
  6942  002D                     ??___wmul:	
  6943                           ; 1 bytes @ 0xC
  6944                           
  6945  002D                     ??___lwdiv:	
  6946                           ; 1 bytes @ 0xC
  6947                           
  6948  002D                     WS2812b_Initialize@wasSetupSuccessful:	
  6949                           ; 1 bytes @ 0xC
  6950                           
  6951  002D                     WS2812B_Render@i:	
  6952                           ; 1 bytes @ 0xC
  6953                           
  6954  002D                     CRC16_Calculate16bitCRC@seed:	
  6955                           ; 2 bytes @ 0xC
  6956                           
  6957  002D                     ___wmul@product:	
  6958                           ; 2 bytes @ 0xC
  6959                           
  6960  002D                     RotaryEncoder_GetShaftCounts@thisCountValue:	
  6961                           ; 2 bytes @ 0xC
  6962                           
  6963  002D                     ___lmul@multiplicand:	
  6964                           ; 4 bytes @ 0xC
  6965                           
  6966  002D                     ___lldiv@dividend:	
  6967                           ; 4 bytes @ 0xC
  6968                           
  6969                           
  6970                           ; 4 bytes @ 0xC
  6971  002D                     	ds	1
  6972  002E                     ??_WS2812b_Initialize:
  6973  002E                     ___lwdiv@counter:	
  6974                           ; 1 bytes @ 0xD
  6975                           
  6976                           
  6977                           ; 1 bytes @ 0xD
  6978  002E                     	ds	1
  6979  002F                     ?_Clock_SetBackgroundRGBArray:
  6980  002F                     ?_Clock_SetDigitRGBArray:	
  6981                           ; 1 bytes @ 0xE
  6982                           
  6983  002F                     ??_CRC16_Calculate16bitCRC:	
  6984                           ; 1 bytes @ 0xE
  6985                           
  6986  002F                     ?_memcpy:	
  6987                           ; 1 bytes @ 0xE
  6988                           
  6989  002F                     _WS2812b_Initialize$1153:	
  6990                           ; 2 bytes @ 0xE
  6991                           
  6992  002F                     Clock_SetBackgroundRGBArray@green:	
  6993                           ; 1 bytes @ 0xE
  6994                           
  6995  002F                     Clock_SetDigitRGBArray@green:	
  6996                           ; 1 bytes @ 0xE
  6997                           
  6998  002F                     WS2812B_Render@thisPixel:	
  6999                           ; 1 bytes @ 0xE
  7000                           
  7001  002F                     ___lwdiv@quotient:	
  7002                           ; 2 bytes @ 0xE
  7003                           
  7004  002F                     memcpy@d1:	
  7005                           ; 2 bytes @ 0xE
  7006                           
  7007                           
  7008                           ; 2 bytes @ 0xE
  7009  002F                     	ds	1
  7010  0030                     Clock_SetBackgroundRGBArray@blue:
  7011  0030                     Clock_SetDigitRGBArray@blue:	
  7012                           ; 1 bytes @ 0xF
  7013                           
  7014  0030                     TMR3_ReadTimer@readVal:	
  7015                           ; 1 bytes @ 0xF
  7016                           
  7017  0030                     WS2812b_Initialize@array:	
  7018                           ; 2 bytes @ 0xF
  7019                           
  7020                           
  7021                           ; 4 bytes @ 0xF
  7022  0030                     	ds	1
  7023  0031                     ??_Clock_SetBackgroundRGBArray:
  7024  0031                     ??_Clock_SetDigitRGBArray:	
  7025                           ; 1 bytes @ 0x10
  7026                           
  7027  0031                     ??___lmul:	
  7028                           ; 1 bytes @ 0x10
  7029                           
  7030  0031                     ??___lldiv:	
  7031                           ; 1 bytes @ 0x10
  7032                           
  7033  0031                     WS2812B_Render@j:	
  7034                           ; 1 bytes @ 0x10
  7035                           
  7036  0031                     memcpy@s1:	
  7037                           ; 2 bytes @ 0x10
  7038                           
  7039  0031                     ___lmul@product:	
  7040                           ; 2 bytes @ 0x10
  7041                           
  7042                           
  7043                           ; 4 bytes @ 0x10
  7044  0031                     	ds	1
  7045  0032                     TMR3_ReadTimer@readValHigh:
  7046  0032                     Clock_SetBackgroundRGBArray@red:	
  7047                           ; 1 bytes @ 0x11
  7048                           
  7049  0032                     Clock_SetDigitRGBArray@red:	
  7050                           ; 1 bytes @ 0x11
  7051                           
  7052  0032                     ___lldiv@quotient:	
  7053                           ; 1 bytes @ 0x11
  7054                           
  7055                           
  7056                           ; 4 bytes @ 0x11
  7057  0032                     	ds	1
  7058  0033                     TMR3_ReadTimer@readValLow:
  7059  0033                     memcpy@n:	
  7060                           ; 1 bytes @ 0x12
  7061                           
  7062                           
  7063                           ; 2 bytes @ 0x12
  7064  0033                     	ds	1
  7065  0034                     ?_Clock_InitializeClockLEDs:
  7066  0034                     ??_RotaryEncoder_Enable:	
  7067                           ; 1 bytes @ 0x13
  7068                           
  7069  0034                     Clock_InitializeClockLEDs@numElements:	
  7070                           ; 1 bytes @ 0x13
  7071                           
  7072                           
  7073                           ; 2 bytes @ 0x13
  7074  0034                     	ds	1
  7075  0035                     ??_memcpy:
  7076  0035                     ?_rand:	
  7077                           ; 1 bytes @ 0x14
  7078                           
  7079                           
  7080                           ; 2 bytes @ 0x14
  7081  0035                     	ds	1
  7082  0036                     Clock_InitializeClockLEDs@digitRed:
  7083  0036                     ___lldiv@counter:	
  7084                           ; 1 bytes @ 0x15
  7085                           
  7086  0036                     memcpy@tmp:	
  7087                           ; 1 bytes @ 0x15
  7088                           
  7089                           
  7090                           ; 1 bytes @ 0x15
  7091  0036                     	ds	1
  7092  0037                     ??_rand:
  7093  0037                     Clock_InitializeClockLEDs@digitGreen:	
  7094                           ; 1 bytes @ 0x16
  7095                           
  7096  0037                     memcpy@d:	
  7097                           ; 1 bytes @ 0x16
  7098                           
  7099                           
  7100                           ; 2 bytes @ 0x16
  7101  0037                     	ds	1
  7102  0038                     Clock_InitializeClockLEDs@digitBlue:
  7103                           
  7104                           ; 1 bytes @ 0x17
  7105  0038                     	ds	1
  7106  0039                     Clock_InitializeClockLEDs@backgroundRed:
  7107  0039                     memcpy@s:	
  7108                           ; 1 bytes @ 0x18
  7109                           
  7110                           
  7111                           ; 2 bytes @ 0x18
  7112  0039                     	ds	1
  7113  003A                     Clock_InitializeClockLEDs@backgroundGreen:
  7114                           
  7115                           ; 1 bytes @ 0x19
  7116  003A                     	ds	1
  7117  003B                     ?_Clock_WriteDigitPixelValuesToLocalPxlBuffers:
  7118  003B                     ?_WS2812b_SetPixelBlockConstantColor:	
  7119                           ; 1 bytes @ 0x1A
  7120                           
  7121  003B                     ?_WS2812b_CopyPixelBufferArrayFromSource:	
  7122                           ; 1 bytes @ 0x1A
  7123                           
  7124  003B                     ?___awmod:	
  7125                           ; 1 bytes @ 0x1A
  7126                           
  7127  003B                     ?___lwmod:	
  7128                           ; 2 bytes @ 0x1A
  7129                           
  7130  003B                     Clock_InitializeClockLEDs@backgroundBlue:	
  7131                           ; 2 bytes @ 0x1A
  7132                           
  7133  003B                     WS2812b_SetPixelBlockConstantColor@strip:	
  7134                           ; 1 bytes @ 0x1A
  7135                           
  7136  003B                     WS2812b_CopyPixelBufferArrayFromSource@strip:	
  7137                           ; 2 bytes @ 0x1A
  7138                           
  7139  003B                     Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer:	
  7140                           ; 2 bytes @ 0x1A
  7141                           
  7142  003B                     CRC16_Calculate16bitCRC@i:	
  7143                           ; 2 bytes @ 0x1A
  7144                           
  7145  003B                     ___awmod@divisor:	
  7146                           ; 2 bytes @ 0x1A
  7147                           
  7148  003B                     ___lwmod@divisor:	
  7149                           ; 2 bytes @ 0x1A
  7150                           
  7151                           
  7152                           ; 2 bytes @ 0x1A
  7153  003B                     	ds	1
  7154  003C                     ??_Clock_InitializeClockLEDs:
  7155                           
  7156                           ; 1 bytes @ 0x1B
  7157  003C                     	ds	1
  7158  003D                     WS2812b_SetPixelBlockConstantColor@pixelStartOffset:
  7159  003D                     WS2812b_CopyPixelBufferArrayFromSource@pixelSource:	
  7160                           ; 2 bytes @ 0x1C
  7161                           
  7162  003D                     Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource:	
  7163                           ; 2 bytes @ 0x1C
  7164                           
  7165  003D                     CRC16_Calculate16bitCRC@crc:	
  7166                           ; 2 bytes @ 0x1C
  7167                           
  7168  003D                     ___awmod@dividend:	
  7169                           ; 2 bytes @ 0x1C
  7170                           
  7171  003D                     ___lwmod@dividend:	
  7172                           ; 2 bytes @ 0x1C
  7173                           
  7174                           
  7175                           ; 2 bytes @ 0x1C
  7176  003D                     	ds	1
  7177  003E                     Clock_InitializeClockLEDs@returnVal:
  7178                           
  7179                           ; 1 bytes @ 0x1D
  7180  003E                     	ds	1
  7181  003F                     ??_Clock_WriteDigitPixelValuesToLocalPxlBuffers:
  7182  003F                     ??___awmod:	
  7183                           ; 1 bytes @ 0x1E
  7184                           
  7185  003F                     ??___lwmod:	
  7186                           ; 1 bytes @ 0x1E
  7187                           
  7188  003F                     WS2812b_SetPixelBlockConstantColor@numPixelsToSet:	
  7189                           ; 1 bytes @ 0x1E
  7190                           
  7191  003F                     WS2812b_CopyPixelBufferArrayFromSource@startAddress:	
  7192                           ; 2 bytes @ 0x1E
  7193                           
  7194                           
  7195                           ; 2 bytes @ 0x1E
  7196  003F                     	ds	1
  7197  0040                     ___awmod@counter:
  7198  0040                     ___lwmod@counter:	
  7199                           ; 1 bytes @ 0x1F
  7200                           
  7201                           
  7202                           ; 1 bytes @ 0x1F
  7203  0040                     	ds	1
  7204  0041                     WS2812b_SetPixelBlockConstantColor@red:
  7205  0041                     ___awmod@sign:	
  7206                           ; 1 bytes @ 0x20
  7207                           
  7208  0041                     WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy:	
  7209                           ; 1 bytes @ 0x20
  7210                           
  7211  0041                     Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter:	
  7212                           ; 2 bytes @ 0x20
  7213                           
  7214                           
  7215                           ; 2 bytes @ 0x20
  7216  0041                     	ds	1
  7217  0042                     ?_WS2812b_SetSinglePixelColor:
  7218  0042                     ?___awdiv:	
  7219                           ; 1 bytes @ 0x21
  7220                           
  7221  0042                     WS2812b_SetPixelBlockConstantColor@green:	
  7222                           ; 2 bytes @ 0x21
  7223                           
  7224  0042                     WS2812b_SetSinglePixelColor@strip:	
  7225                           ; 1 bytes @ 0x21
  7226                           
  7227  0042                     ___awdiv@divisor:	
  7228                           ; 2 bytes @ 0x21
  7229                           
  7230                           
  7231                           ; 2 bytes @ 0x21
  7232  0042                     	ds	1
  7233  0043                     ??_WS2812b_CopyPixelBufferArrayFromSource:
  7234  0043                     WS2812b_SetPixelBlockConstantColor@blue:	
  7235                           ; 1 bytes @ 0x22
  7236                           
  7237  0043                     Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress:	
  7238                           ; 1 bytes @ 0x22
  7239                           
  7240                           
  7241                           ; 2 bytes @ 0x22
  7242  0043                     	ds	1
  7243  0044                     ??_WS2812b_SetPixelBlockConstantColor:
  7244  0044                     WS2812b_SetSinglePixelColor@pixelIndex:	
  7245                           ; 1 bytes @ 0x23
  7246                           
  7247  0044                     ___awdiv@dividend:	
  7248                           ; 2 bytes @ 0x23
  7249                           
  7250                           
  7251                           ; 2 bytes @ 0x23
  7252  0044                     	ds	1
  7253  0045                     Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter:
  7254                           
  7255                           ; 2 bytes @ 0x24
  7256  0045                     	ds	1
  7257  0046                     ??___awdiv:
  7258  0046                     WS2812b_SetSinglePixelColor@red:	
  7259                           ; 1 bytes @ 0x25
  7260                           
  7261  0046                     WS2812b_SetPixelBlockConstantColor@finalPixelIndex:	
  7262                           ; 1 bytes @ 0x25
  7263                           
  7264                           
  7265                           ; 2 bytes @ 0x25
  7266  0046                     	ds	1
  7267  0047                     WS2812b_SetSinglePixelColor@green:
  7268  0047                     ___awdiv@counter:	
  7269                           ; 1 bytes @ 0x26
  7270                           
  7271  0047                     WS2812b_CopyPixelBufferArrayFromSource@startPixel:	
  7272                           ; 1 bytes @ 0x26
  7273                           
  7274                           
  7275                           ; 2 bytes @ 0x26
  7276  0047                     	ds	1
  7277  0048                     WS2812b_SetSinglePixelColor@blue:
  7278  0048                     ___awdiv@sign:	
  7279                           ; 1 bytes @ 0x27
  7280                           
  7281  0048                     WS2812b_SetPixelBlockConstantColor@startPixelAddress:	
  7282                           ; 1 bytes @ 0x27
  7283                           
  7284                           
  7285                           ; 2 bytes @ 0x27
  7286  0048                     	ds	1
  7287  0049                     ??_WS2812b_SetSinglePixelColor:
  7288  0049                     WS2812b_CopyPixelBufferArrayFromSource@dest:	
  7289                           ; 1 bytes @ 0x28
  7290                           
  7291  0049                     ___awdiv@quotient:	
  7292                           ; 2 bytes @ 0x28
  7293                           
  7294                           
  7295                           ; 2 bytes @ 0x28
  7296  0049                     	ds	1
  7297  004A                     WS2812b_SetPixelBlockConstantColor@rgbArray:
  7298                           
  7299                           ; 3 bytes @ 0x29
  7300  004A                     	ds	1
  7301  004B                     WS2812b_SetSinglePixelColor@thisPixel:
  7302  004B                     WS2812b_CopyPixelBufferArrayFromSource@src:	
  7303                           ; 2 bytes @ 0x2A
  7304                           
  7305                           
  7306                           ; 2 bytes @ 0x2A
  7307  004B                     	ds	2
  7308  004D                     ??_Clock_CrossingRainbowPattern:
  7309  004D                     ??_Clock_CrossingRainbowPatternwithDelays:	
  7310                           ; 1 bytes @ 0x2C
  7311                           
  7312  004D                     WS2812b_SetPixelBlockConstantColor@i:	
  7313                           ; 1 bytes @ 0x2C
  7314                           
  7315                           
  7316                           ; 2 bytes @ 0x2C
  7317  004D                     	ds	2
  7318  004F                     ??_Clock_FixDigit4LastThreePixels:
  7319  004F                     ?_WS2812b_SetStripConstantColor:	
  7320                           ; 1 bytes @ 0x2E
  7321                           
  7322  004F                     WS2812b_SetStripConstantColor@strip:	
  7323                           ; 1 bytes @ 0x2E
  7324                           
  7325                           
  7326                           ; 2 bytes @ 0x2E
  7327  004F                     	ds	2
  7328  0051                     WS2812b_SetStripConstantColor@red:
  7329                           
  7330                           ; 1 bytes @ 0x30
  7331  0051                     	ds	1
  7332  0052                     WS2812b_SetStripConstantColor@green:
  7333  0052                     Clock_FixDigit4LastThreePixels@digit4Value:	
  7334                           ; 1 bytes @ 0x31
  7335                           
  7336  0052                     _Clock_CrossingRainbowPattern$2393:	
  7337                           ; 1 bytes @ 0x31
  7338                           
  7339  0052                     _Clock_CrossingRainbowPatternwithDelays$2396:	
  7340                           ; 1 bytes @ 0x31
  7341                           
  7342                           
  7343                           ; 1 bytes @ 0x31
  7344  0052                     	ds	1
  7345  0053                     ?_Clock_ForceRender:
  7346  0053                     ??_Clock_WriteTimeDigitValuesAndRenderScreen:	
  7347                           ; 1 bytes @ 0x32
  7348                           
  7349  0053                     WS2812b_SetStripConstantColor@blue:	
  7350                           ; 1 bytes @ 0x32
  7351                           
  7352  0053                     _Clock_CrossingRainbowPattern$2394:	
  7353                           ; 1 bytes @ 0x32
  7354                           
  7355  0053                     _Clock_CrossingRainbowPatternwithDelays$2397:	
  7356                           ; 1 bytes @ 0x32
  7357                           
  7358  0053                     Clock_ForceRender@t:	
  7359                           ; 1 bytes @ 0x32
  7360                           
  7361                           
  7362                           ; 2 bytes @ 0x32
  7363  0053                     	ds	1
  7364  0054                     ??_WS2812b_SetStripConstantColor:
  7365  0054                     _Clock_CrossingRainbowPattern$2395:	
  7366                           ; 1 bytes @ 0x33
  7367                           
  7368  0054                     _Clock_CrossingRainbowPatternwithDelays$2398:	
  7369                           ; 1 bytes @ 0x33
  7370                           
  7371                           
  7372                           ; 1 bytes @ 0x33
  7373  0054                     	ds	1
  7374  0055                     ??_Clock_ForceRender:
  7375                           
  7376                           ; 1 bytes @ 0x34
  7377  0055                     	ds	2
  7378  0057                     ??_Clock_IterateSinglePixelByIndex:
  7379  0057                     ??_Clock_Popcorn_Pattern:	
  7380                           ; 1 bytes @ 0x36
  7381                           
  7382  0057                     ??_Clock_Popcorn_Pattern_Hold:	
  7383                           ; 1 bytes @ 0x36
  7384                           
  7385  0057                     ??_Clock_PrerenderPixelAndBackgroundValues:	
  7386                           ; 1 bytes @ 0x36
  7387                           
  7388                           
  7389                           ; 1 bytes @ 0x36
  7390  0057                     	ds	2
  7391  0059                     _Clock_WriteTimeDigitValuesAndRenderScreen$2391:
  7392                           
  7393                           ; 2 bytes @ 0x38
  7394  0059                     	ds	2
  7395  005B                     Clock_WriteTimeDigitValuesAndRenderScreen@digits:
  7396                           
  7397                           ; 1 bytes @ 0x3A
  7398  005B                     	ds	1
  7399  005C                     ??_STATE_PatternMode:
  7400                           
  7401                           ; 1 bytes @ 0x3B
  7402  005C                     	ds	1
  7403  005D                     ??_main:
  7404                           
  7405                           	psect	maintext
  7406  231E                     __pmaintext:	
  7407                           ; 1 bytes @ 0x3C
  7408 ;;
  7409 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  7410 ;;
  7411 ;; *************** function _main *****************
  7412 ;; Defined at:
  7413 ;;		line 4 in file "main.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : B1F/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels required when called: 12
  7433 ;; This function calls:
  7434 ;;		_APP_Initialize
  7435 ;;		_APP_TASKS
  7436 ;;		_SYSTEM_Initialize
  7437 ;; This function is called by:
  7438 ;;		Startup code after reset
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442  231E                     _main:	
  7443                           ;psect for function _main
  7444                           
  7445                           
  7446                           ;main.c: 6:     SYSTEM_Initialize( );
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7450  231E  31A4  241F  31A3   	fcall	_SYSTEM_Initialize
  7451                           
  7452                           ;main.c: 7:     APP_Initialize( );
  7453  2321  319E  2646  31A3   	fcall	_APP_Initialize
  7454                           
  7455                           ;main.c: 8:     (INTCONbits.GIE = 1);
  7456  2324  178B               	bsf	11,7	;volatile
  7457                           
  7458                           ;main.c: 9:     (INTCONbits.PEIE = 1);
  7459  2325  170B               	bsf	11,6	;volatile
  7460  2326                     l6162:
  7461                           
  7462                           ;main.c: 11:     {;main.c: 12:         APP_TASKS( );
  7463  2326  319C  249D  31A3   	fcall	_APP_TASKS
  7464  2329  2B26               	goto	l6162
  7465  232A                     __end_of_main:
  7466                           
  7467                           	psect	text1
  7468  241F                     __ptext1:	
  7469 ;; *************** function _SYSTEM_Initialize *****************
  7470 ;; Defined at:
  7471 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;		None
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;		None
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      void 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0, pclath, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7489 ;;Total ram usage:        0 bytes
  7490 ;; Hardware stack levels used: 1
  7491 ;; Hardware stack levels required when called: 7
  7492 ;; This function calls:
  7493 ;;		_OSCILLATOR_Initialize
  7494 ;;		_PIN_MANAGER_Initialize
  7495 ;;		_PMD_Initialize
  7496 ;;		_TMR1_Initialize
  7497 ;;		_TMR3_Initialize
  7498 ;;		_TMR5_Initialize
  7499 ;;		_WDT_Initialize
  7500 ;; This function is called by:
  7501 ;;		_main
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505  241F                     _SYSTEM_Initialize:	
  7506                           ;psect for function _SYSTEM_Initialize
  7507                           
  7508                           
  7509                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  7510                           
  7511                           ;incstack = 0
  7512                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7513  241F  31A2  22BE  31A4   	fcall	_PMD_Initialize
  7514                           
  7515                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  7516  2422  31A6  269C  31A4   	fcall	_PIN_MANAGER_Initialize
  7517                           
  7518                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  7519  2425  31A2  22F3  31A4   	fcall	_OSCILLATOR_Initialize
  7520                           
  7521                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  7522  2428  31A2  22AD  31A4   	fcall	_WDT_Initialize
  7523                           
  7524                           ;mcc_generated_files/mcc.c: 57:     TMR3_Initialize();
  7525  242B  31A3  23E4  31A4   	fcall	_TMR3_Initialize
  7526                           
  7527                           ;mcc_generated_files/mcc.c: 58:     TMR5_Initialize();
  7528  242E  31A4  249A  31A4   	fcall	_TMR5_Initialize
  7529                           
  7530                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  7531  2431  31A4  244A         	fcall	_TMR1_Initialize
  7532  2433  0008               	return
  7533  2434                     __end_of_SYSTEM_Initialize:
  7534                           
  7535                           	psect	text2
  7536  22AD                     __ptext2:	
  7537 ;; *************** function _WDT_Initialize *****************
  7538 ;; Defined at:
  7539 ;;		line 76 in file "mcc_generated_files/mcc.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;		None
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      void 
  7546 ;; Registers used:
  7547 ;;		wreg
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7557 ;;Total ram usage:        0 bytes
  7558 ;; Hardware stack levels used: 1
  7559 ;; Hardware stack levels required when called: 5
  7560 ;; This function calls:
  7561 ;;		Nothing
  7562 ;; This function is called by:
  7563 ;;		_SYSTEM_Initialize
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567  22AD                     _WDT_Initialize:	
  7568                           ;psect for function _WDT_Initialize
  7569                           
  7570                           
  7571                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  7572                           
  7573                           ;incstack = 0
  7574                           ; Regs used in _WDT_Initialize: [wreg]
  7575  22AD  3016               	movlw	22
  7576  22AE  0021               	movlb	1	; select bank1
  7577  22AF  0097               	movwf	23	;volatile
  7578  22B0  0008               	return
  7579  22B1                     __end_of_WDT_Initialize:
  7580                           
  7581                           	psect	text3
  7582  249A                     __ptext3:	
  7583 ;; *************** function _TMR5_Initialize *****************
  7584 ;; Defined at:
  7585 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, pclath, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7603 ;;Total ram usage:        0 bytes
  7604 ;; Hardware stack levels used: 1
  7605 ;; Hardware stack levels required when called: 6
  7606 ;; This function calls:
  7607 ;;		_TMR5_SetInterruptHandler
  7608 ;; This function is called by:
  7609 ;;		_SYSTEM_Initialize
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613  249A                     _TMR5_Initialize:	
  7614                           ;psect for function _TMR5_Initialize
  7615                           
  7616                           
  7617                           ;mcc_generated_files/tmr5.c: 69:     T5GCON = 0x00;
  7618                           
  7619                           ;incstack = 0
  7620                           ; Regs used in _TMR5_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7621  249A  0028               	movlb	8	; select bank8
  7622  249B  019B               	clrf	27	;volatile
  7623                           
  7624                           ;mcc_generated_files/tmr5.c: 72:     TMR5H = 0xF0;
  7625  249C  30F0               	movlw	240
  7626  249D  0099               	movwf	25	;volatile
  7627                           
  7628                           ;mcc_generated_files/tmr5.c: 75:     TMR5L = 0xDD;
  7629  249E  30DD               	movlw	221
  7630  249F  0098               	movwf	24	;volatile
  7631                           
  7632                           ;mcc_generated_files/tmr5.c: 78:     PIR4bits.TMR5IF = 0;
  7633  24A0  0020               	movlb	0	; select bank0
  7634  24A1  1214               	bcf	20,4	;volatile
  7635                           
  7636                           ;mcc_generated_files/tmr5.c: 81:     timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
  7637  24A2  0028               	movlb	8	; select bank8
  7638  24A3  0819               	movf	25,w	;volatile
  7639  24A4  0021               	movlb	1	; select bank1
  7640  24A5  00D4               	movwf	(_timer5ReloadVal+1)^(0+128)	;volatile
  7641  24A6  0028               	movlb	8	; select bank8
  7642  24A7  0818               	movf	24,w	;volatile
  7643  24A8  0021               	movlb	1	; select bank1
  7644  24A9  00D3               	movwf	_timer5ReloadVal^(0+128)	;volatile
  7645                           
  7646                           ;mcc_generated_files/tmr5.c: 84:     PIE4bits.TMR5IE = 1;
  7647  24AA  1614               	bsf	20,4	;volatile
  7648                           
  7649                           ;mcc_generated_files/tmr5.c: 87:     TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandl
      +                          er);
  7650  24AB  3002               	movlw	low _TMR5_DefaultInterruptHandler
  7651  24AC  0020               	movlb	0	; select bank0
  7652  24AD  00A9               	movwf	TMR5_SetInterruptHandler@InterruptHandler
  7653  24AE  3000               	movlw	high _TMR5_DefaultInterruptHandler
  7654  24AF  00AA               	movwf	TMR5_SetInterruptHandler@InterruptHandler+1
  7655  24B0  31A2  22EA         	fcall	_TMR5_SetInterruptHandler
  7656                           
  7657                           ;mcc_generated_files/tmr5.c: 90:     T5CON = 0xF1;
  7658  24B2  30F1               	movlw	241
  7659  24B3  0028               	movlb	8	; select bank8
  7660  24B4  009A               	movwf	26	;volatile
  7661  24B5  0008               	return
  7662  24B6                     __end_of_TMR5_Initialize:
  7663                           
  7664                           	psect	text4
  7665  23E4                     __ptext4:	
  7666 ;; *************** function _TMR3_Initialize *****************
  7667 ;; Defined at:
  7668 ;;		line 63 in file "mcc_generated_files/tmr3.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7686 ;;Total ram usage:        0 bytes
  7687 ;; Hardware stack levels used: 1
  7688 ;; Hardware stack levels required when called: 5
  7689 ;; This function calls:
  7690 ;;		Nothing
  7691 ;; This function is called by:
  7692 ;;		_SYSTEM_Initialize
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696  23E4                     _TMR3_Initialize:	
  7697                           ;psect for function _TMR3_Initialize
  7698                           
  7699                           
  7700                           ;mcc_generated_files/tmr3.c: 68:     T3GCON = 0x00;
  7701                           
  7702                           ;incstack = 0
  7703                           ; Regs used in _TMR3_Initialize: [wreg+status,2]
  7704  23E4  0028               	movlb	8	; select bank8
  7705  23E5  0194               	clrf	20	;volatile
  7706                           
  7707                           ;mcc_generated_files/tmr3.c: 71:     TMR3H = 0x00;
  7708  23E6  0192               	clrf	18	;volatile
  7709                           
  7710                           ;mcc_generated_files/tmr3.c: 74:     TMR3L = 0x31;
  7711  23E7  3031               	movlw	49
  7712  23E8  0091               	movwf	17	;volatile
  7713                           
  7714                           ;mcc_generated_files/tmr3.c: 77:     PIR3bits.TMR3IF = 0;
  7715  23E9  0020               	movlb	0	; select bank0
  7716  23EA  1213               	bcf	19,4	;volatile
  7717                           
  7718                           ;mcc_generated_files/tmr3.c: 80:     timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
  7719  23EB  0028               	movlb	8	; select bank8
  7720  23EC  0812               	movf	18,w	;volatile
  7721  23ED  0022               	movlb	2	; select bank2
  7722  23EE  00CE               	movwf	(_timer3ReloadVal+1)^(0+256)	;volatile
  7723  23EF  0028               	movlb	8	; select bank8
  7724  23F0  0811               	movf	17,w	;volatile
  7725  23F1  0022               	movlb	2	; select bank2
  7726  23F2  00CD               	movwf	_timer3ReloadVal^(0+256)	;volatile
  7727                           
  7728                           ;mcc_generated_files/tmr3.c: 83:     T3CON = 0xF5;
  7729  23F3  30F5               	movlw	245
  7730  23F4  0028               	movlb	8	; select bank8
  7731  23F5  0093               	movwf	19	;volatile
  7732  23F6  0008               	return
  7733  23F7                     __end_of_TMR3_Initialize:
  7734                           
  7735                           	psect	text5
  7736  244A                     __ptext5:	
  7737 ;; *************** function _TMR1_Initialize *****************
  7738 ;; Defined at:
  7739 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used: 1
  7759 ;; Hardware stack levels required when called: 6
  7760 ;; This function calls:
  7761 ;;		_TMR1_SetInterruptHandler
  7762 ;; This function is called by:
  7763 ;;		_SYSTEM_Initialize
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767  244A                     _TMR1_Initialize:	
  7768                           ;psect for function _TMR1_Initialize
  7769                           
  7770                           
  7771                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7775  244A  0020               	movlb	0	; select bank0
  7776  244B  019C               	clrf	28	;volatile
  7777                           
  7778                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xF0;
  7779  244C  30F0               	movlw	240
  7780  244D  009A               	movwf	26	;volatile
  7781                           
  7782                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xDD;
  7783  244E  30DD               	movlw	221
  7784  244F  0099               	movwf	25	;volatile
  7785                           
  7786                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  7787  2450  1011               	bcf	17,0	;volatile
  7788                           
  7789                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  7790  2451  081A               	movf	26,w	;volatile
  7791  2452  0021               	movlb	1	; select bank1
  7792  2453  00D6               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  7793  2454  0020               	movlb	0	; select bank0
  7794  2455  0819               	movf	25,w	;volatile
  7795  2456  0021               	movlb	1	; select bank1
  7796  2457  00D5               	movwf	_timer1ReloadVal^(0+128)	;volatile
  7797                           
  7798                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  7799  2458  1411               	bsf	17,0	;volatile
  7800                           
  7801                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  7802  2459  3000               	movlw	low _TMR1_DefaultInterruptHandler
  7803  245A  0020               	movlb	0	; select bank0
  7804  245B  00A9               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7805  245C  3010               	movlw	high _TMR1_DefaultInterruptHandler
  7806  245D  00AA               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7807  245E  31A2  22E1         	fcall	_TMR1_SetInterruptHandler
  7808                           
  7809                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0xF1;
  7810  2460  30F1               	movlw	241
  7811  2461  0020               	movlb	0	; select bank0
  7812  2462  009B               	movwf	27	;volatile
  7813  2463  0008               	return
  7814  2464                     __end_of_TMR1_Initialize:
  7815                           
  7816                           	psect	text6
  7817  22BE                     __ptext6:	
  7818 ;; *************** function _PMD_Initialize *****************
  7819 ;; Defined at:
  7820 ;;		line 82 in file "mcc_generated_files/mcc.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;		None
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;		None
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      void 
  7827 ;; Registers used:
  7828 ;;		status,2
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7838 ;;Total ram usage:        0 bytes
  7839 ;; Hardware stack levels used: 1
  7840 ;; Hardware stack levels required when called: 5
  7841 ;; This function calls:
  7842 ;;		Nothing
  7843 ;; This function is called by:
  7844 ;;		_SYSTEM_Initialize
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848  22BE                     _PMD_Initialize:	
  7849                           ;psect for function _PMD_Initialize
  7850                           
  7851                           
  7852                           ;mcc_generated_files/mcc.c: 85:     PMD0 = 0x00;
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in _PMD_Initialize: [status,2]
  7856  22BE  0032               	movlb	18	; select bank18
  7857  22BF  0191               	clrf	17	;volatile
  7858                           
  7859                           ;mcc_generated_files/mcc.c: 87:     PMD1 = 0x00;
  7860  22C0  0192               	clrf	18	;volatile
  7861                           
  7862                           ;mcc_generated_files/mcc.c: 89:     PMD2 = 0x00;
  7863  22C1  0193               	clrf	19	;volatile
  7864                           
  7865                           ;mcc_generated_files/mcc.c: 91:     PMD3 = 0x00;
  7866  22C2  0194               	clrf	20	;volatile
  7867                           
  7868                           ;mcc_generated_files/mcc.c: 93:     PMD4 = 0x00;
  7869  22C3  0195               	clrf	21	;volatile
  7870                           
  7871                           ;mcc_generated_files/mcc.c: 95:     PMD5 = 0x00;
  7872  22C4  0196               	clrf	22	;volatile
  7873  22C5  0008               	return
  7874  22C6                     __end_of_PMD_Initialize:
  7875                           
  7876                           	psect	text7
  7877  269C                     __ptext7:	
  7878 ;; *************** function _PIN_MANAGER_Initialize *****************
  7879 ;; Defined at:
  7880 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;		None
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;		None
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  1    wreg      void 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, pclath, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7898 ;;Total ram usage:        0 bytes
  7899 ;; Hardware stack levels used: 1
  7900 ;; Hardware stack levels required when called: 6
  7901 ;; This function calls:
  7902 ;;		_IOCCF3_SetInterruptHandler
  7903 ;;		_IOCCF4_SetInterruptHandler
  7904 ;;		_IOCCF5_SetInterruptHandler
  7905 ;; This function is called by:
  7906 ;;		_SYSTEM_Initialize
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910  269C                     _PIN_MANAGER_Initialize:	
  7911                           ;psect for function _PIN_MANAGER_Initialize
  7912                           
  7913                           
  7914                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7918  269C  0022               	movlb	2	; select bank2
  7919  269D  018C               	clrf	12	;volatile
  7920                           
  7921                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  7922  269E  018E               	clrf	14	;volatile
  7923                           
  7924                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x37;
  7925  269F  3037               	movlw	55
  7926  26A0  0021               	movlb	1	; select bank1
  7927  26A1  008C               	movwf	12	;volatile
  7928                           
  7929                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x3A;
  7930  26A2  303A               	movlw	58
  7931  26A3  008E               	movwf	14	;volatile
  7932                           
  7933                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x00;
  7934  26A4  0023               	movlb	3	; select bank3
  7935  26A5  018E               	clrf	14	;volatile
  7936                           
  7937                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x37;
  7938  26A6  3037               	movlw	55
  7939  26A7  008C               	movwf	12	;volatile
  7940                           
  7941                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  7942  26A8  0024               	movlb	4	; select bank4
  7943  26A9  018C               	clrf	12	;volatile
  7944                           
  7945                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  7946  26AA  018E               	clrf	14	;volatile
  7947                           
  7948                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
  7949  26AB  0025               	movlb	5	; select bank5
  7950  26AC  018C               	clrf	12	;volatile
  7951                           
  7952                           ;mcc_generated_files/pin_manager.c: 89:     ODCONC = 0x00;
  7953  26AD  018E               	clrf	14	;volatile
  7954                           
  7955                           ;mcc_generated_files/pin_manager.c: 94:     SLRCONA = 0x37;
  7956  26AE  3037               	movlw	55
  7957  26AF  0026               	movlb	6	; select bank6
  7958  26B0  008C               	movwf	12	;volatile
  7959                           
  7960                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONC = 0x3F;
  7961  26B1  303F               	movlw	63
  7962  26B2  008E               	movwf	14	;volatile
  7963                           
  7964                           ;mcc_generated_files/pin_manager.c: 100:     INLVLA = 0x3F;
  7965  26B3  303F               	movlw	63
  7966  26B4  0027               	movlb	7	; select bank7
  7967  26B5  008C               	movwf	12	;volatile
  7968                           
  7969                           ;mcc_generated_files/pin_manager.c: 101:     INLVLC = 0x3F;
  7970  26B6  303F               	movlw	63
  7971  26B7  008E               	movwf	14	;volatile
  7972                           
  7973                           ;mcc_generated_files/pin_manager.c: 108:     IOCCFbits.IOCCF3 = 0;
  7974  26B8  1199               	bcf	25,3	;volatile
  7975                           
  7976                           ;mcc_generated_files/pin_manager.c: 110:     IOCCFbits.IOCCF4 = 0;
  7977  26B9  1219               	bcf	25,4	;volatile
  7978                           
  7979                           ;mcc_generated_files/pin_manager.c: 112:     IOCCFbits.IOCCF5 = 0;
  7980  26BA  1299               	bcf	25,5	;volatile
  7981                           
  7982                           ;mcc_generated_files/pin_manager.c: 114:     IOCCNbits.IOCCN3 = 1;
  7983  26BB  1598               	bsf	24,3	;volatile
  7984                           
  7985                           ;mcc_generated_files/pin_manager.c: 116:     IOCCNbits.IOCCN4 = 1;
  7986  26BC  1618               	bsf	24,4	;volatile
  7987                           
  7988                           ;mcc_generated_files/pin_manager.c: 118:     IOCCNbits.IOCCN5 = 1;
  7989  26BD  1698               	bsf	24,5	;volatile
  7990                           
  7991                           ;mcc_generated_files/pin_manager.c: 120:     IOCCPbits.IOCCP3 = 1;
  7992  26BE  1597               	bsf	23,3	;volatile
  7993                           
  7994                           ;mcc_generated_files/pin_manager.c: 122:     IOCCPbits.IOCCP4 = 1;
  7995  26BF  1617               	bsf	23,4	;volatile
  7996                           
  7997                           ;mcc_generated_files/pin_manager.c: 124:     IOCCPbits.IOCCP5 = 1;
  7998  26C0  1697               	bsf	23,5	;volatile
  7999                           
  8000                           ;mcc_generated_files/pin_manager.c: 129:     IOCCF3_SetInterruptHandler(IOCCF3_DefaultIn
      +                          terruptHandler);
  8001  26C1  3000               	movlw	low _IOCCF3_DefaultInterruptHandler
  8002  26C2  0020               	movlb	0	; select bank0
  8003  26C3  00A9               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler
  8004  26C4  301A               	movlw	high _IOCCF3_DefaultInterruptHandler
  8005  26C5  00AA               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler+1
  8006  26C6  31A2  22C6  31A6   	fcall	_IOCCF3_SetInterruptHandler
  8007                           
  8008                           ;mcc_generated_files/pin_manager.c: 130:     IOCCF4_SetInterruptHandler(IOCCF4_DefaultIn
      +                          terruptHandler);
  8009  26C9  30A3               	movlw	low _IOCCF4_DefaultInterruptHandler
  8010  26CA  0020               	movlb	0	; select bank0
  8011  26CB  00A9               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  8012  26CC  3022               	movlw	high _IOCCF4_DefaultInterruptHandler
  8013  26CD  00AA               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  8014  26CE  31A2  22CF  31A6   	fcall	_IOCCF4_SetInterruptHandler
  8015                           
  8016                           ;mcc_generated_files/pin_manager.c: 131:     IOCCF5_SetInterruptHandler(IOCCF5_DefaultIn
      +                          terruptHandler);
  8017  26D1  3001               	movlw	low _IOCCF5_DefaultInterruptHandler
  8018  26D2  0020               	movlb	0	; select bank0
  8019  26D3  00A9               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler
  8020  26D4  301A               	movlw	high _IOCCF5_DefaultInterruptHandler
  8021  26D5  00AA               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler+1
  8022  26D6  31A2  22D8         	fcall	_IOCCF5_SetInterruptHandler
  8023                           
  8024                           ;mcc_generated_files/pin_manager.c: 134:     PIE0bits.IOCIE = 1;
  8025  26D8  0021               	movlb	1	; select bank1
  8026  26D9  1610               	bsf	16,4	;volatile
  8027  26DA  0008               	return
  8028  26DB                     __end_of_PIN_MANAGER_Initialize:
  8029                           
  8030                           	psect	text8
  8031  22F3                     __ptext8:	
  8032 ;; *************** function _OSCILLATOR_Initialize *****************
  8033 ;; Defined at:
  8034 ;;		line 62 in file "mcc_generated_files/mcc.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;		None
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;		None
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  1    wreg      void 
  8041 ;; Registers used:
  8042 ;;		wreg, status,2
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8052 ;;Total ram usage:        0 bytes
  8053 ;; Hardware stack levels used: 1
  8054 ;; Hardware stack levels required when called: 5
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_SYSTEM_Initialize
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062  22F3                     _OSCILLATOR_Initialize:	
  8063                           ;psect for function _OSCILLATOR_Initialize
  8064                           
  8065                           
  8066                           ;mcc_generated_files/mcc.c: 65:     OSCCON1 = 0x60;
  8067                           
  8068                           ;incstack = 0
  8069                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8070  22F3  3060               	movlw	96
  8071  22F4  0032               	movlb	18	; select bank18
  8072  22F5  0099               	movwf	25	;volatile
  8073                           
  8074                           ;mcc_generated_files/mcc.c: 67:     OSCCON3 = 0x00;
  8075  22F6  019B               	clrf	27	;volatile
  8076                           
  8077                           ;mcc_generated_files/mcc.c: 69:     OSCEN = 0x00;
  8078  22F7  019D               	clrf	29	;volatile
  8079                           
  8080                           ;mcc_generated_files/mcc.c: 71:     OSCFRQ = 0x07;
  8081  22F8  3007               	movlw	7
  8082  22F9  009F               	movwf	31	;volatile
  8083                           
  8084                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
  8085  22FA  019E               	clrf	30	;volatile
  8086  22FB  0008               	return
  8087  22FC                     __end_of_OSCILLATOR_Initialize:
  8088                           
  8089                           	psect	text9
  8090  1C9D                     __ptext9:	
  8091 ;; *************** function _APP_TASKS *****************
  8092 ;; Defined at:
  8093 ;;		line 98 in file "app.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8109 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8110 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8111 ;;Total ram usage:        2 bytes
  8112 ;; Hardware stack levels used: 1
  8113 ;; Hardware stack levels required when called: 11
  8114 ;; This function calls:
  8115 ;;		_Clock_PrerenderPixelAndBackgroundValues
  8116 ;;		_RotaryEncoder_GetSwitchState
  8117 ;;		_RotaryEncoder_HasButtonPressOccurred
  8118 ;;		_STATE_ChangeColorMode
  8119 ;;		_STATE_PatternMode
  8120 ;;		_Time_RenderIfMinutesHaveChanged
  8121 ;; This function is called by:
  8122 ;;		_main
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126  1C9D                     _APP_TASKS:	
  8127                           ;psect for function _APP_TASKS
  8128                           
  8129                           
  8130                           ;app.c: 100:     static _Bool wasSwitchPressedInTimeMode = 0;;app.c: 103:     if( Rotary
      +                          Encoder_HasButtonPressOccurred( ) )
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _APP_TASKS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8134  1C9D  31A3  23D1  319C   	fcall	_RotaryEncoder_HasButtonPressOccurred
  8135  1CA0  3A00               	xorlw	0
  8136  1CA1  1D03               	btfss	3,2
  8137  1CA2  2CC7               	goto	l6128
  8138  1CA3  2CEA               	goto	l6140
  8139  1CA4                     l6110:
  8140                           
  8141                           ;app.c: 108:                 if( PATTERN_MODE == app.state )
  8142  1CA4  3002               	movlw	2
  8143  1CA5  0022               	movlb	2	; select bank2
  8144  1CA6  0620               	xorwf	_app^(0+256),w
  8145  1CA7  1D03               	btfss	3,2
  8146  1CA8  2CAF               	goto	l6116
  8147                           
  8148                           ;app.c: 109:                 {;app.c: 110:                     Clock_PrerenderPixelAndBa
      +                          ckgroundValues( );
  8149  1CA9  31A6  2602  319C   	fcall	_Clock_PrerenderPixelAndBackgroundValues
  8150  1CAC                     l6114:
  8151                           
  8152                           ;app.c: 111:                     app.state = DISPLAY_TIME_MODE;
  8153  1CAC  0022               	movlb	2	; select bank2
  8154  1CAD  01A0               	clrf	_app^(0+256)
  8155                           
  8156                           ;app.c: 112:                 }
  8157  1CAE  2CEA               	goto	l6140
  8158  1CAF                     l6116:
  8159  1CAF  0820               	movf	_app^(0+256),w
  8160  1CB0  1D03               	btfss	3,2
  8161  1CB1  2CEA               	goto	l6140
  8162                           
  8163                           ;app.c: 114:                 {;app.c: 115:                     app.state = PATTERN_MODE;
  8164  1CB2  3002               	movlw	2
  8165  1CB3  0021               	movlb	1	; select bank1
  8166  1CB4  00B9               	movwf	??_APP_TASKS^(0+128)
  8167  1CB5  0839               	movf	??_APP_TASKS^(0+128),w
  8168  1CB6  0022               	movlb	2	; select bank2
  8169  1CB7  00A0               	movwf	_app^(0+256)
  8170                           
  8171                           ;app.c: 116:                 }
  8172  1CB8  2CEA               	goto	l6140
  8173  1CB9                     l809:	
  8174                           ;app.c: 122:             case SWITCH_HOLD:
  8175                           
  8176                           
  8177                           ;app.c: 123:                 app.state = CHANGE_COLOR_MODE;
  8178  1CB9  0022               	movlb	2	; select bank2
  8179  1CBA  01A0               	clrf	_app^(0+256)
  8180  1CBB  0AA0               	incf	_app^(0+256),f
  8181                           
  8182                           ;app.c: 124:                 break;
  8183  1CBC  2CEA               	goto	l6140
  8184  1CBD                     l6120:
  8185                           
  8186                           ;app.c: 126:                 if( DISPLAY_TIME_MODE == app.state )
  8187  1CBD  0022               	movlb	2	; select bank2
  8188  1CBE  0820               	movf	_app^(0+256),w
  8189  1CBF  1D03               	btfss	3,2
  8190  1CC0  2CEA               	goto	l6140
  8191                           
  8192                           ;app.c: 127:                 {;app.c: 128:                     wasSwitchPressedInTimeMod
      +                          e ^= 1;
  8193  1CC1  3001               	movlw	1
  8194  1CC2  0021               	movlb	1	; select bank1
  8195  1CC3  00B9               	movwf	??_APP_TASKS^(0+128)
  8196  1CC4  0839               	movf	??_APP_TASKS^(0+128),w
  8197  1CC5  06C7               	xorwf	APP_TASKS@wasSwitchPressedInTimeMode^(0+128),f
  8198  1CC6  2CEA               	goto	l6140
  8199  1CC7                     l6128:
  8200  1CC7  31A3  23B0  319C   	fcall	_RotaryEncoder_GetSwitchState
  8201  1CCA  0021               	movlb	1	; select bank1
  8202  1CCB  00B9               	movwf	??_APP_TASKS^(0+128)
  8203  1CCC  01BA               	clrf	(??_APP_TASKS^(0+128)+1)
  8204                           
  8205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8206                           ; Switch size 1, requested type "simple"
  8207                           ; Number of cases is 1, Range of values is 0 to 0
  8208                           ; switch strategies available:
  8209                           ; Name         Instructions Cycles
  8210                           ; simple_byte            4     3 (average)
  8211                           ; direct_byte            8     6 (fixed)
  8212                           ; jumptable            260     6 (fixed)
  8213                           ;	Chosen strategy is simple_byte
  8214  1CCD  083A               	movf	(??_APP_TASKS+1)^(0+128),w
  8215  1CCE  3A00               	xorlw	0	; case 0
  8216  1CCF  1903               	skipnz
  8217  1CD0  2CD2               	goto	l6264
  8218  1CD1  2CAC               	goto	l6114
  8219  1CD2                     l6264:
  8220                           
  8221                           ; Switch size 1, requested type "simple"
  8222                           ; Number of cases is 3, Range of values is 1 to 3
  8223                           ; switch strategies available:
  8224                           ; Name         Instructions Cycles
  8225                           ; simple_byte           10     6 (average)
  8226                           ; direct_byte           15     9 (fixed)
  8227                           ; jumptable            263     9 (fixed)
  8228                           ;	Chosen strategy is simple_byte
  8229  1CD2  0839               	movf	??_APP_TASKS^(0+128),w
  8230  1CD3  3A01               	xorlw	1	; case 1
  8231  1CD4  1903               	skipnz
  8232  1CD5  2CBD               	goto	l6120
  8233  1CD6  3A03               	xorlw	3	; case 2
  8234  1CD7  1903               	skipnz
  8235  1CD8  2CA4               	goto	l6110
  8236  1CD9  3A01               	xorlw	1	; case 3
  8237  1CDA  1903               	skipnz
  8238  1CDB  2CB9               	goto	l809
  8239  1CDC  2CAC               	goto	l6114
  8240  1CDD  2CEA               	goto	l6140
  8241  1CDE                     l6130:
  8242                           
  8243                           ;app.c: 141:             Time_RenderIfMinutesHaveChanged( wasSwitchPressedInTimeMode );
  8244  1CDE  0847               	movf	APP_TASKS@wasSwitchPressedInTimeMode^(0+128),w
  8245  1CDF  3193  2366         	fcall	_Time_RenderIfMinutesHaveChanged
  8246                           
  8247                           ;app.c: 142:             break;
  8248  1CE1  0008               	return
  8249  1CE2                     l6132:
  8250                           
  8251                           ;app.c: 144:             STATE_ChangeColorMode( );
  8252  1CE2  3188  2084         	fcall	_STATE_ChangeColorMode
  8253                           
  8254                           ;app.c: 145:             app.state = DISPLAY_TIME_MODE;
  8255  1CE4  0022               	movlb	2	; select bank2
  8256  1CE5  01A0               	clrf	_app^(0+256)
  8257                           
  8258                           ;app.c: 146:             break;
  8259  1CE6  0008               	return
  8260  1CE7                     l6136:
  8261                           
  8262                           ;app.c: 148:             STATE_PatternMode( );
  8263  1CE7  319C  243E         	fcall	_STATE_PatternMode
  8264                           
  8265                           ;app.c: 149:             break;
  8266  1CE9  0008               	return
  8267  1CEA                     l6140:
  8268  1CEA  0022               	movlb	2	; select bank2
  8269  1CEB  0820               	movf	_app^(0+256),w
  8270  1CEC  0021               	movlb	1	; select bank1
  8271  1CED  00B9               	movwf	??_APP_TASKS^(0+128)
  8272  1CEE  01BA               	clrf	(??_APP_TASKS^(0+128)+1)
  8273                           
  8274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8275                           ; Switch size 1, requested type "simple"
  8276                           ; Number of cases is 1, Range of values is 0 to 0
  8277                           ; switch strategies available:
  8278                           ; Name         Instructions Cycles
  8279                           ; simple_byte            4     3 (average)
  8280                           ; direct_byte            8     6 (fixed)
  8281                           ; jumptable            260     6 (fixed)
  8282                           ;	Chosen strategy is simple_byte
  8283  1CEF  083A               	movf	(??_APP_TASKS+1)^(0+128),w
  8284  1CF0  3A00               	xorlw	0	; case 0
  8285  1CF1  1903               	skipnz
  8286  1CF2  2CF4               	goto	l6266
  8287  1CF3  2CFF               	goto	l819
  8288  1CF4                     l6266:
  8289                           
  8290                           ; Switch size 1, requested type "simple"
  8291                           ; Number of cases is 3, Range of values is 0 to 2
  8292                           ; switch strategies available:
  8293                           ; Name         Instructions Cycles
  8294                           ; simple_byte           10     6 (average)
  8295                           ; direct_byte           12     6 (fixed)
  8296                           ; jumptable            260     6 (fixed)
  8297                           ;	Chosen strategy is simple_byte
  8298  1CF4  0839               	movf	??_APP_TASKS^(0+128),w
  8299  1CF5  3A00               	xorlw	0	; case 0
  8300  1CF6  1903               	skipnz
  8301  1CF7  2CDE               	goto	l6130
  8302  1CF8  3A01               	xorlw	1	; case 1
  8303  1CF9  1903               	skipnz
  8304  1CFA  2CE2               	goto	l6132
  8305  1CFB  3A03               	xorlw	3	; case 2
  8306  1CFC  1903               	skipnz
  8307  1CFD  2CE7               	goto	l6136
  8308  1CFE  2CFF               	goto	l819
  8309  1CFF                     l819:
  8310  1CFF  0008               	return
  8311  1D00                     __end_of_APP_TASKS:
  8312                           
  8313                           	psect	text10
  8314  1366                     __ptext10:	
  8315 ;; *************** function _Time_RenderIfMinutesHaveChanged *****************
  8316 ;; Defined at:
  8317 ;;		line 66 in file "timeCalculation.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  isSwitchPres    1    wreg     _Bool 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;  isSwitchPres    1    4[BANK1 ] _Bool 
  8322 ;;  t               4   21[BANK1 ] struct .
  8323 ;;  minutes         1   14[BANK1 ] unsigned char 
  8324 ;;  hours           1   13[BANK1 ] unsigned char 
  8325 ;;  thisTimeInSe    4   17[BANK1 ] long 
  8326 ;;  minutesDelta    4    9[BANK1 ] long 
  8327 ;;  currentTimeI    2   15[BANK1 ] unsigned short 
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      void 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8338 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8339 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8340 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8341 ;;Total ram usage:       25 bytes
  8342 ;; Hardware stack levels used: 1
  8343 ;; Hardware stack levels required when called: 9
  8344 ;; This function calls:
  8345 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
  8346 ;;		_RotaryEncoder_GetShaftCounts
  8347 ;;		___awdiv
  8348 ;;		___awmod
  8349 ;;		___lldiv
  8350 ;;		___lmul
  8351 ;;		___lwdiv
  8352 ;;		___lwmod
  8353 ;; This function is called by:
  8354 ;;		_APP_TASKS
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358  1366                     _Time_RenderIfMinutesHaveChanged:	
  8359                           ;psect for function _Time_RenderIfMinutesHaveChanged
  8360                           
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _Time_RenderIfMinutesHaveChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  8364                           ;Time_RenderIfMinutesHaveChanged@isSwitchPressHrMnMode stored from wreg
  8365  1366  0021               	movlb	1	; select bank1
  8366  1367  00A4               	movwf	Time_RenderIfMinutesHaveChanged@isSwitchPressHrMnMode^(0+128)
  8367                           
  8368                           ;timeCalculation.c: 66: void Time_RenderIfMinutesHaveChanged( _Bool isSwitchPressHrMnMod
      +                          e );timeCalculation.c: 67: {;timeCalculation.c: 69:     static uint16_t minutesAtLastCha
      +                          nge = 0xFFFF;;timeCalculation.c: 72:     int32_t minutesDelta = RotaryEncoder_GetShaftCo
      +                          unts( );
  8369  1368  31A5  2535  3193   	fcall	_RotaryEncoder_GetShaftCounts
  8370  136B  0020               	movlb	0	; select bank0
  8371  136C  082C               	movf	?_RotaryEncoder_GetShaftCounts+3,w
  8372  136D  0021               	movlb	1	; select bank1
  8373  136E  00AC               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+3)^(0+128)
  8374  136F  0020               	movlb	0	; select bank0
  8375  1370  082B               	movf	?_RotaryEncoder_GetShaftCounts+2,w
  8376  1371  0021               	movlb	1	; select bank1
  8377  1372  00AB               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+2)^(0+128)
  8378  1373  0020               	movlb	0	; select bank0
  8379  1374  082A               	movf	?_RotaryEncoder_GetShaftCounts+1,w
  8380  1375  0021               	movlb	1	; select bank1
  8381  1376  00AA               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+1)^(0+128)
  8382  1377  0020               	movlb	0	; select bank0
  8383  1378  0829               	movf	?_RotaryEncoder_GetShaftCounts,w
  8384  1379  0021               	movlb	1	; select bank1
  8385  137A  00A9               	movwf	Time_RenderIfMinutesHaveChanged@minutesDelta^(0+128)
  8386                           
  8387                           ;timeCalculation.c: 74:     if( isSwitchPressHrMnMode )
  8388  137B  0824               	movf	Time_RenderIfMinutesHaveChanged@isSwitchPressHrMnMode^(0+128),w
  8389  137C  1903               	btfsc	3,2
  8390  137D  2BAA               	goto	l526
  8391                           
  8392                           ;timeCalculation.c: 75:     {;timeCalculation.c: 76:         minutesDelta *= 60u;
  8393  137E  3000               	movlw	0
  8394  137F  0020               	movlb	0	; select bank0
  8395  1380  00AC               	movwf	___lmul@multiplier+3
  8396  1381  3000               	movlw	0
  8397  1382  00AB               	movwf	___lmul@multiplier+2
  8398  1383  3000               	movlw	0
  8399  1384  00AA               	movwf	___lmul@multiplier+1
  8400  1385  303C               	movlw	60
  8401  1386  00A9               	movwf	___lmul@multiplier
  8402  1387  0021               	movlb	1	; select bank1
  8403  1388  082C               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+3)^(0+128),w
  8404  1389  0020               	movlb	0	; select bank0
  8405  138A  00B0               	movwf	___lmul@multiplicand+3
  8406  138B  0021               	movlb	1	; select bank1
  8407  138C  082B               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+2)^(0+128),w
  8408  138D  0020               	movlb	0	; select bank0
  8409  138E  00AF               	movwf	___lmul@multiplicand+2
  8410  138F  0021               	movlb	1	; select bank1
  8411  1390  082A               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+1)^(0+128),w
  8412  1391  0020               	movlb	0	; select bank0
  8413  1392  00AE               	movwf	___lmul@multiplicand+1
  8414  1393  0021               	movlb	1	; select bank1
  8415  1394  0829               	movf	Time_RenderIfMinutesHaveChanged@minutesDelta^(0+128),w
  8416  1395  0020               	movlb	0	; select bank0
  8417  1396  00AD               	movwf	___lmul@multiplicand
  8418  1397  3190  2001  3193   	fcall	___lmul
  8419  139A  0020               	movlb	0	; select bank0
  8420  139B  082C               	movf	?___lmul+3,w
  8421  139C  0021               	movlb	1	; select bank1
  8422  139D  00AC               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+3)^(0+128)
  8423  139E  0020               	movlb	0	; select bank0
  8424  139F  082B               	movf	?___lmul+2,w
  8425  13A0  0021               	movlb	1	; select bank1
  8426  13A1  00AB               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+2)^(0+128)
  8427  13A2  0020               	movlb	0	; select bank0
  8428  13A3  082A               	movf	?___lmul+1,w
  8429  13A4  0021               	movlb	1	; select bank1
  8430  13A5  00AA               	movwf	(Time_RenderIfMinutesHaveChanged@minutesDelta+1)^(0+128)
  8431  13A6  0020               	movlb	0	; select bank0
  8432  13A7  0829               	movf	?___lmul,w
  8433  13A8  0021               	movlb	1	; select bank1
  8434  13A9  00A9               	movwf	Time_RenderIfMinutesHaveChanged@minutesDelta^(0+128)
  8435  13AA                     l526:	
  8436                           ;timeCalculation.c: 77:     }
  8437                           
  8438                           
  8439                           ;timeCalculation.c: 79:     int32_t thisTimeInSeconds = (int32_t) currentTimeInSeconds +
      +                           ( minutesDelta * 60 );
  8440  13AA  082C               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+3)^(0+128),w
  8441  13AB  0020               	movlb	0	; select bank0
  8442  13AC  00AC               	movwf	___lmul@multiplier+3
  8443  13AD  0021               	movlb	1	; select bank1
  8444  13AE  082B               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+2)^(0+128),w
  8445  13AF  0020               	movlb	0	; select bank0
  8446  13B0  00AB               	movwf	___lmul@multiplier+2
  8447  13B1  0021               	movlb	1	; select bank1
  8448  13B2  082A               	movf	(Time_RenderIfMinutesHaveChanged@minutesDelta+1)^(0+128),w
  8449  13B3  0020               	movlb	0	; select bank0
  8450  13B4  00AA               	movwf	___lmul@multiplier+1
  8451  13B5  0021               	movlb	1	; select bank1
  8452  13B6  0829               	movf	Time_RenderIfMinutesHaveChanged@minutesDelta^(0+128),w
  8453  13B7  0020               	movlb	0	; select bank0
  8454  13B8  00A9               	movwf	___lmul@multiplier
  8455  13B9  3000               	movlw	0
  8456  13BA  00B0               	movwf	___lmul@multiplicand+3
  8457  13BB  3000               	movlw	0
  8458  13BC  00AF               	movwf	___lmul@multiplicand+2
  8459  13BD  3000               	movlw	0
  8460  13BE  00AE               	movwf	___lmul@multiplicand+1
  8461  13BF  303C               	movlw	60
  8462  13C0  00AD               	movwf	___lmul@multiplicand
  8463  13C1  3190  2001  3193   	fcall	___lmul
  8464  13C4  0020               	movlb	0	; select bank0
  8465  13C5  0829               	movf	?___lmul,w
  8466  13C6  0021               	movlb	1	; select bank1
  8467  13C7  073B               	addwf	_currentTimeInSeconds^(0+128),w	;volatile
  8468  13C8  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8469  13C9  0020               	movlb	0	; select bank0
  8470  13CA  082A               	movf	?___lmul+1,w
  8471  13CB  0021               	movlb	1	; select bank1
  8472  13CC  3D3C               	addwfc	(_currentTimeInSeconds+1)^(0+128),w	;volatile
  8473  13CD  00A1               	movwf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+1)
  8474  13CE  0020               	movlb	0	; select bank0
  8475  13CF  082B               	movf	?___lmul+2,w
  8476  13D0  0021               	movlb	1	; select bank1
  8477  13D1  3D3D               	addwfc	(_currentTimeInSeconds+2)^(0+128),w	;volatile
  8478  13D2  00A2               	movwf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+2)
  8479  13D3  0020               	movlb	0	; select bank0
  8480  13D4  082C               	movf	?___lmul+3,w
  8481  13D5  0021               	movlb	1	; select bank1
  8482  13D6  3D3E               	addwfc	(_currentTimeInSeconds+3)^(0+128),w	;volatile
  8483  13D7  00A3               	movwf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+3)
  8484  13D8  0823               	movf	(??_Time_RenderIfMinutesHaveChanged+3)^(0+128),w
  8485  13D9  00B4               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128)
  8486  13DA  0822               	movf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128),w
  8487  13DB  00B3               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128)
  8488  13DC  0821               	movf	(??_Time_RenderIfMinutesHaveChanged+1)^(0+128),w
  8489  13DD  00B2               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128)
  8490  13DE  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8491  13DF  00B1               	movwf	Time_RenderIfMinutesHaveChanged@thisTimeInSeconds^(0+128)
  8492                           
  8493                           ;timeCalculation.c: 80:     thisTimeInSeconds = ( (thisTimeInSeconds < 0) ? 43199u : (th
      +                          isTimeInSeconds > 43199u) ? 0 : thisTimeInSeconds);
  8494  13E0  1BB4               	btfsc	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128),7
  8495  13E1  2C0A               	goto	l5688
  8496  13E2  1BB4               	btfsc	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128),7
  8497  13E3  2BF0               	goto	l5684
  8498  13E4  0834               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128),w
  8499  13E5  1D03               	btfss	3,2
  8500  13E6  2BF9               	goto	l5686
  8501  13E7  0833               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128),w
  8502  13E8  1D03               	btfss	3,2
  8503  13E9  2BF9               	goto	l5686
  8504  13EA  30C0               	movlw	192
  8505  13EB  0231               	subwf	Time_RenderIfMinutesHaveChanged@thisTimeInSeconds^(0+128),w
  8506  13EC  30A8               	movlw	168
  8507  13ED  3B32               	subwfb	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128),w
  8508  13EE  1803               	btfsc	3,0
  8509  13EF  2BF9               	goto	l5686
  8510  13F0                     l5684:
  8511  13F0  0021               	movlb	1	; select bank1
  8512  13F1  0834               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128),w
  8513  13F2  00A8               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+3)^(0+128)
  8514  13F3  0833               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128),w
  8515  13F4  00A7               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+2)^(0+128)
  8516  13F5  0832               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128),w
  8517  13F6  00A6               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+1)^(0+128)
  8518  13F7  0831               	movf	Time_RenderIfMinutesHaveChanged@thisTimeInSeconds^(0+128),w
  8519  13F8  2C01               	goto	L2
  8520  13F9                     l5686:
  8521  13F9  3000               	movlw	0
  8522  13FA  0021               	movlb	1	; select bank1
  8523  13FB  00A8               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+3)^(0+128)
  8524  13FC  3000               	movlw	0
  8525  13FD  00A7               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+2)^(0+128)
  8526  13FE  3000               	movlw	0
  8527  13FF  00A6               	movwf	(_Time_RenderIfMinutesHaveChanged$1035+1)^(0+128)
  8528  1400  3000               	movlw	0
  8529  1401                     L2:
  8530  1401  00A5               	movwf	_Time_RenderIfMinutesHaveChanged$1035^(0+128)
  8531  1402  0828               	movf	(_Time_RenderIfMinutesHaveChanged$1035+3)^(0+128),w
  8532  1403  00B4               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128)
  8533  1404  0827               	movf	(_Time_RenderIfMinutesHaveChanged$1035+2)^(0+128),w
  8534  1405  00B3               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128)
  8535  1406  0826               	movf	(_Time_RenderIfMinutesHaveChanged$1035+1)^(0+128),w
  8536  1407  00B2               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128)
  8537  1408  0825               	movf	_Time_RenderIfMinutesHaveChanged$1035^(0+128),w
  8538  1409  2C11               	goto	L3
  8539  140A                     l5688:
  8540  140A  3000               	movlw	0
  8541  140B  00B4               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128)
  8542  140C  3000               	movlw	0
  8543  140D  00B3               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128)
  8544  140E  30A8               	movlw	168
  8545  140F  00B2               	movwf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128)
  8546  1410  30BF               	movlw	191
  8547  1411                     L3:
  8548  1411  00B1               	movwf	Time_RenderIfMinutesHaveChanged@thisTimeInSeconds^(0+128)
  8549                           
  8550                           ;timeCalculation.c: 81:     currentTimeInSeconds = ( volatile uint32_t ) thisTimeInSecon
      +                          ds;
  8551  1412  0834               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+3)^(0+128),w
  8552  1413  00BE               	movwf	(_currentTimeInSeconds+3)^(0+128)	;volatile
  8553  1414  0833               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+2)^(0+128),w
  8554  1415  00BD               	movwf	(_currentTimeInSeconds+2)^(0+128)	;volatile
  8555  1416  0832               	movf	(Time_RenderIfMinutesHaveChanged@thisTimeInSeconds+1)^(0+128),w
  8556  1417  00BC               	movwf	(_currentTimeInSeconds+1)^(0+128)	;volatile
  8557  1418  0831               	movf	Time_RenderIfMinutesHaveChanged@thisTimeInSeconds^(0+128),w
  8558  1419  00BB               	movwf	_currentTimeInSeconds^(0+128)	;volatile
  8559                           
  8560                           ;timeCalculation.c: 82:     uint16_t currentTimeInMinutes = (uint16_t) ( currentTimeInSe
      +                          conds / 60u );
  8561  141A  3000               	movlw	0
  8562  141B  0020               	movlb	0	; select bank0
  8563  141C  00AC               	movwf	___lldiv@divisor+3
  8564  141D  3000               	movlw	0
  8565  141E  00AB               	movwf	___lldiv@divisor+2
  8566  141F  3000               	movlw	0
  8567  1420  00AA               	movwf	___lldiv@divisor+1
  8568  1421  303C               	movlw	60
  8569  1422  00A9               	movwf	___lldiv@divisor
  8570  1423  0021               	movlb	1	; select bank1
  8571  1424  083E               	movf	(_currentTimeInSeconds+3)^(0+128),w	;volatile
  8572  1425  0020               	movlb	0	; select bank0
  8573  1426  00B0               	movwf	___lldiv@dividend+3
  8574  1427  0021               	movlb	1	; select bank1
  8575  1428  083D               	movf	(_currentTimeInSeconds+2)^(0+128),w	;volatile
  8576  1429  0020               	movlb	0	; select bank0
  8577  142A  00AF               	movwf	___lldiv@dividend+2
  8578  142B  0021               	movlb	1	; select bank1
  8579  142C  083C               	movf	(_currentTimeInSeconds+1)^(0+128),w	;volatile
  8580  142D  0020               	movlb	0	; select bank0
  8581  142E  00AE               	movwf	___lldiv@dividend+1
  8582  142F  0021               	movlb	1	; select bank1
  8583  1430  083B               	movf	_currentTimeInSeconds^(0+128),w	;volatile
  8584  1431  0020               	movlb	0	; select bank0
  8585  1432  00AD               	movwf	___lldiv@dividend
  8586  1433  319B  2333  3193   	fcall	___lldiv
  8587  1436  0020               	movlb	0	; select bank0
  8588  1437  082A               	movf	?___lldiv+1,w
  8589  1438  0021               	movlb	1	; select bank1
  8590  1439  00B0               	movwf	(Time_RenderIfMinutesHaveChanged@currentTimeInMinutes+1)^(0+128)
  8591  143A  0020               	movlb	0	; select bank0
  8592  143B  0829               	movf	?___lldiv,w
  8593  143C  0021               	movlb	1	; select bank1
  8594  143D  00AF               	movwf	Time_RenderIfMinutesHaveChanged@currentTimeInMinutes^(0+128)
  8595                           
  8596                           ;timeCalculation.c: 85:     if( currentTimeInMinutes != minutesAtLastChange )
  8597  143E  084F               	movf	(Time_RenderIfMinutesHaveChanged@minutesAtLastChange+1)^(0+128),w
  8598  143F  0630               	xorwf	(Time_RenderIfMinutesHaveChanged@currentTimeInMinutes+1)^(0+128),w
  8599  1440  1D03               	skipz
  8600  1441  2C44               	goto	u4635
  8601  1442  084E               	movf	Time_RenderIfMinutesHaveChanged@minutesAtLastChange^(0+128),w
  8602  1443  062F               	xorwf	Time_RenderIfMinutesHaveChanged@currentTimeInMinutes^(0+128),w
  8603  1444                     u4635:
  8604  1444  1903               	skipnz
  8605  1445  0008               	return
  8606                           
  8607                           ;timeCalculation.c: 86:     {;timeCalculation.c: 87:         minutesAtLastChange = curre
      +                          ntTimeInMinutes;
  8608  1446  0830               	movf	(Time_RenderIfMinutesHaveChanged@currentTimeInMinutes+1)^(0+128),w
  8609  1447  00CF               	movwf	(Time_RenderIfMinutesHaveChanged@minutesAtLastChange+1)^(0+128)
  8610  1448  082F               	movf	Time_RenderIfMinutesHaveChanged@currentTimeInMinutes^(0+128),w
  8611  1449  00CE               	movwf	Time_RenderIfMinutesHaveChanged@minutesAtLastChange^(0+128)
  8612                           
  8613                           ;timeCalculation.c: 88:         uint8_t hours = (uint8_t) ( currentTimeInMinutes / 60u )
      +                           + 1u;
  8614  144A  303C               	movlw	60
  8615  144B  0020               	movlb	0	; select bank0
  8616  144C  00A9               	movwf	___lwdiv@divisor
  8617  144D  3000               	movlw	0
  8618  144E  00AA               	movwf	___lwdiv@divisor+1
  8619  144F  0021               	movlb	1	; select bank1
  8620  1450  0830               	movf	(Time_RenderIfMinutesHaveChanged@currentTimeInMinutes+1)^(0+128),w
  8621  1451  0020               	movlb	0	; select bank0
  8622  1452  00AC               	movwf	___lwdiv@dividend+1
  8623  1453  0021               	movlb	1	; select bank1
  8624  1454  082F               	movf	Time_RenderIfMinutesHaveChanged@currentTimeInMinutes^(0+128),w
  8625  1455  0020               	movlb	0	; select bank0
  8626  1456  00AB               	movwf	___lwdiv@dividend
  8627  1457  31A6  2667  3193   	fcall	___lwdiv
  8628  145A  0020               	movlb	0	; select bank0
  8629  145B  0829               	movf	?___lwdiv,w
  8630  145C  3E01               	addlw	1
  8631  145D  0021               	movlb	1	; select bank1
  8632  145E  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8633  145F  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8634  1460  00AD               	movwf	Time_RenderIfMinutesHaveChanged@hours^(0+128)
  8635                           
  8636                           ;timeCalculation.c: 89:         uint8_t minutes = (uint8_t) ( currentTimeInMinutes % 60u
      +                           );
  8637  1461  303C               	movlw	60
  8638  1462  0020               	movlb	0	; select bank0
  8639  1463  00BB               	movwf	___lwmod@divisor
  8640  1464  3000               	movlw	0
  8641  1465  00BC               	movwf	___lwmod@divisor+1
  8642  1466  0021               	movlb	1	; select bank1
  8643  1467  0830               	movf	(Time_RenderIfMinutesHaveChanged@currentTimeInMinutes+1)^(0+128),w
  8644  1468  0020               	movlb	0	; select bank0
  8645  1469  00BE               	movwf	___lwmod@dividend+1
  8646  146A  0021               	movlb	1	; select bank1
  8647  146B  082F               	movf	Time_RenderIfMinutesHaveChanged@currentTimeInMinutes^(0+128),w
  8648  146C  0020               	movlb	0	; select bank0
  8649  146D  00BD               	movwf	___lwmod@dividend
  8650  146E  31A5  25D5  3193   	fcall	___lwmod
  8651  1471  0020               	movlb	0	; select bank0
  8652  1472  083B               	movf	?___lwmod,w
  8653  1473  0021               	movlb	1	; select bank1
  8654  1474  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8655  1475  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8656  1476  00AE               	movwf	Time_RenderIfMinutesHaveChanged@minutes^(0+128)
  8657                           
  8658                           ;timeCalculation.c: 91:         TimeInDigits t = {
  8659  1477  0022               	movlb	2	; select bank2
  8660  1478  083B               	movf	(Time_RenderIfMinutesHaveChanged@F6453+3)^(0+256),w
  8661  1479  0021               	movlb	1	; select bank1
  8662  147A  00B8               	movwf	(Time_RenderIfMinutesHaveChanged@t+3)^(0+128)
  8663  147B  0022               	movlb	2	; select bank2
  8664  147C  083A               	movf	(Time_RenderIfMinutesHaveChanged@F6453+2)^(0+256),w
  8665  147D  0021               	movlb	1	; select bank1
  8666  147E  00B7               	movwf	(Time_RenderIfMinutesHaveChanged@t+2)^(0+128)
  8667  147F  0022               	movlb	2	; select bank2
  8668  1480  0839               	movf	(Time_RenderIfMinutesHaveChanged@F6453+1)^(0+256),w
  8669  1481  0021               	movlb	1	; select bank1
  8670  1482  00B6               	movwf	(Time_RenderIfMinutesHaveChanged@t+1)^(0+128)
  8671  1483  0022               	movlb	2	; select bank2
  8672  1484  0838               	movf	Time_RenderIfMinutesHaveChanged@F6453^(0+256),w
  8673  1485  0021               	movlb	1	; select bank1
  8674  1486  00B5               	movwf	Time_RenderIfMinutesHaveChanged@t^(0+128)
  8675  1487  300A               	movlw	10
  8676  1488  0020               	movlb	0	; select bank0
  8677  1489  00C2               	movwf	___awdiv@divisor
  8678  148A  3000               	movlw	0
  8679  148B  00C3               	movwf	___awdiv@divisor+1
  8680  148C  0021               	movlb	1	; select bank1
  8681  148D  082D               	movf	Time_RenderIfMinutesHaveChanged@hours^(0+128),w
  8682  148E  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8683  148F  01A1               	clrf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+1)
  8684  1490  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8685  1491  0020               	movlb	0	; select bank0
  8686  1492  00BD               	movwf	___awmod@dividend
  8687  1493  0021               	movlb	1	; select bank1
  8688  1494  0821               	movf	(??_Time_RenderIfMinutesHaveChanged+1)^(0+128),w
  8689  1495  0020               	movlb	0	; select bank0
  8690  1496  00BE               	movwf	___awmod@dividend+1
  8691  1497  3064               	movlw	100
  8692  1498  00BB               	movwf	___awmod@divisor
  8693  1499  3000               	movlw	0
  8694  149A  00BC               	movwf	___awmod@divisor+1
  8695  149B  31A6  26DB  3193   	fcall	___awmod
  8696  149E  0020               	movlb	0	; select bank0
  8697  149F  083C               	movf	?___awmod+1,w
  8698  14A0  00C5               	movwf	___awdiv@dividend+1
  8699  14A1  083B               	movf	?___awmod,w
  8700  14A2  00C4               	movwf	___awdiv@dividend
  8701  14A3  319A  22E1  3193   	fcall	___awdiv
  8702  14A6  0020               	movlb	0	; select bank0
  8703  14A7  0842               	movf	?___awdiv,w
  8704  14A8  0021               	movlb	1	; select bank1
  8705  14A9  00A2               	movwf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128)
  8706  14AA  0822               	movf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128),w
  8707  14AB  00B5               	movwf	Time_RenderIfMinutesHaveChanged@t^(0+128)
  8708  14AC  300A               	movlw	10
  8709  14AD  0020               	movlb	0	; select bank0
  8710  14AE  00BB               	movwf	___awmod@divisor
  8711  14AF  3000               	movlw	0
  8712  14B0  00BC               	movwf	___awmod@divisor+1
  8713  14B1  0021               	movlb	1	; select bank1
  8714  14B2  082D               	movf	Time_RenderIfMinutesHaveChanged@hours^(0+128),w
  8715  14B3  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8716  14B4  01A1               	clrf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+1)
  8717  14B5  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8718  14B6  0020               	movlb	0	; select bank0
  8719  14B7  00BD               	movwf	___awmod@dividend
  8720  14B8  0021               	movlb	1	; select bank1
  8721  14B9  0821               	movf	(??_Time_RenderIfMinutesHaveChanged+1)^(0+128),w
  8722  14BA  0020               	movlb	0	; select bank0
  8723  14BB  00BE               	movwf	___awmod@dividend+1
  8724  14BC  31A6  26DB  3193   	fcall	___awmod
  8725  14BF  0020               	movlb	0	; select bank0
  8726  14C0  083B               	movf	?___awmod,w
  8727  14C1  0021               	movlb	1	; select bank1
  8728  14C2  00A2               	movwf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128)
  8729  14C3  0822               	movf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128),w
  8730  14C4  00B6               	movwf	(Time_RenderIfMinutesHaveChanged@t^(0+128)+1)
  8731  14C5  300A               	movlw	10
  8732  14C6  0020               	movlb	0	; select bank0
  8733  14C7  00C2               	movwf	___awdiv@divisor
  8734  14C8  3000               	movlw	0
  8735  14C9  00C3               	movwf	___awdiv@divisor+1
  8736  14CA  0021               	movlb	1	; select bank1
  8737  14CB  082E               	movf	Time_RenderIfMinutesHaveChanged@minutes^(0+128),w
  8738  14CC  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8739  14CD  01A1               	clrf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+1)
  8740  14CE  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8741  14CF  0020               	movlb	0	; select bank0
  8742  14D0  00BD               	movwf	___awmod@dividend
  8743  14D1  0021               	movlb	1	; select bank1
  8744  14D2  0821               	movf	(??_Time_RenderIfMinutesHaveChanged+1)^(0+128),w
  8745  14D3  0020               	movlb	0	; select bank0
  8746  14D4  00BE               	movwf	___awmod@dividend+1
  8747  14D5  3064               	movlw	100
  8748  14D6  00BB               	movwf	___awmod@divisor
  8749  14D7  3000               	movlw	0
  8750  14D8  00BC               	movwf	___awmod@divisor+1
  8751  14D9  31A6  26DB  3193   	fcall	___awmod
  8752  14DC  0020               	movlb	0	; select bank0
  8753  14DD  083C               	movf	?___awmod+1,w
  8754  14DE  00C5               	movwf	___awdiv@dividend+1
  8755  14DF  083B               	movf	?___awmod,w
  8756  14E0  00C4               	movwf	___awdiv@dividend
  8757  14E1  319A  22E1  3193   	fcall	___awdiv
  8758  14E4  0020               	movlb	0	; select bank0
  8759  14E5  0842               	movf	?___awdiv,w
  8760  14E6  0021               	movlb	1	; select bank1
  8761  14E7  00A2               	movwf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128)
  8762  14E8  0822               	movf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128),w
  8763  14E9  00B7               	movwf	(Time_RenderIfMinutesHaveChanged@t^(0+128)+2)
  8764  14EA  300A               	movlw	10
  8765  14EB  0020               	movlb	0	; select bank0
  8766  14EC  00BB               	movwf	___awmod@divisor
  8767  14ED  3000               	movlw	0
  8768  14EE  00BC               	movwf	___awmod@divisor+1
  8769  14EF  0021               	movlb	1	; select bank1
  8770  14F0  082E               	movf	Time_RenderIfMinutesHaveChanged@minutes^(0+128),w
  8771  14F1  00A0               	movwf	??_Time_RenderIfMinutesHaveChanged^(0+128)
  8772  14F2  01A1               	clrf	(??_Time_RenderIfMinutesHaveChanged^(0+128)+1)
  8773  14F3  0820               	movf	??_Time_RenderIfMinutesHaveChanged^(0+128),w
  8774  14F4  0020               	movlb	0	; select bank0
  8775  14F5  00BD               	movwf	___awmod@dividend
  8776  14F6  0021               	movlb	1	; select bank1
  8777  14F7  0821               	movf	(??_Time_RenderIfMinutesHaveChanged+1)^(0+128),w
  8778  14F8  0020               	movlb	0	; select bank0
  8779  14F9  00BE               	movwf	___awmod@dividend+1
  8780  14FA  31A6  26DB  3193   	fcall	___awmod
  8781  14FD  0020               	movlb	0	; select bank0
  8782  14FE  083B               	movf	?___awmod,w
  8783  14FF  0021               	movlb	1	; select bank1
  8784  1500  00A2               	movwf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128)
  8785  1501  0822               	movf	(??_Time_RenderIfMinutesHaveChanged+2)^(0+128),w
  8786  1502  00B8               	movwf	(Time_RenderIfMinutesHaveChanged@t^(0+128)+3)
  8787                           
  8788                           ;timeCalculation.c: 98:         Clock_WriteTimeDigitValuesAndRenderScreen( &t );
  8789  1503  30B5               	movlw	(low (Time_RenderIfMinutesHaveChanged@t| 0))& (0+255)
  8790  1504  3192  2242         	fcall	_Clock_WriteTimeDigitValuesAndRenderScreen
  8791  1506  0008               	return
  8792  1507                     __end_of_Time_RenderIfMinutesHaveChanged:
  8793                           
  8794                           	psect	text11
  8795  1C3E                     __ptext11:	
  8796 ;; *************** function _STATE_PatternMode *****************
  8797 ;; Defined at:
  8798 ;;		line 29 in file "patternMode.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  rotCounts       4    4[BANK1 ] long 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      void 
  8805 ;; Registers used:
  8806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8813 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8815 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8816 ;;Total ram usage:        8 bytes
  8817 ;; Hardware stack levels used: 1
  8818 ;; Hardware stack levels required when called: 9
  8819 ;; This function calls:
  8820 ;;		_Clock_CrossingRainbowPattern
  8821 ;;		_Clock_CrossingRainbowPatternwithDelays
  8822 ;;		_Clock_IterateSinglePixelByIndex
  8823 ;;		_Clock_Popcorn_Pattern
  8824 ;;		_Clock_Popcorn_Pattern_Hold
  8825 ;;		_RotaryEncoder_GetShaftCounts
  8826 ;; This function is called by:
  8827 ;;		_APP_TASKS
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831  1C3E                     _STATE_PatternMode:	
  8832                           ;psect for function _STATE_PatternMode
  8833                           
  8834                           
  8835                           ;patternMode.c: 35:     static int32_t patternIndex = 0;;patternMode.c: 36:     int32_t 
      +                          rotCounts = RotaryEncoder_GetShaftCounts();
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in _STATE_PatternMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8839  1C3E  31A5  2535  319C   	fcall	_RotaryEncoder_GetShaftCounts
  8840  1C41  0020               	movlb	0	; select bank0
  8841  1C42  082C               	movf	?_RotaryEncoder_GetShaftCounts+3,w
  8842  1C43  0021               	movlb	1	; select bank1
  8843  1C44  00A7               	movwf	(STATE_PatternMode@rotCounts+3)^(0+128)
  8844  1C45  0020               	movlb	0	; select bank0
  8845  1C46  082B               	movf	?_RotaryEncoder_GetShaftCounts+2,w
  8846  1C47  0021               	movlb	1	; select bank1
  8847  1C48  00A6               	movwf	(STATE_PatternMode@rotCounts+2)^(0+128)
  8848  1C49  0020               	movlb	0	; select bank0
  8849  1C4A  082A               	movf	?_RotaryEncoder_GetShaftCounts+1,w
  8850  1C4B  0021               	movlb	1	; select bank1
  8851  1C4C  00A5               	movwf	(STATE_PatternMode@rotCounts+1)^(0+128)
  8852  1C4D  0020               	movlb	0	; select bank0
  8853  1C4E  0829               	movf	?_RotaryEncoder_GetShaftCounts,w
  8854  1C4F  0021               	movlb	1	; select bank1
  8855  1C50  00A4               	movwf	STATE_PatternMode@rotCounts^(0+128)
  8856                           
  8857                           ;patternMode.c: 38:     if (rotCounts)
  8858  1C51  0827               	movf	(STATE_PatternMode@rotCounts+3)^(0+128),w
  8859  1C52  0426               	iorwf	(STATE_PatternMode@rotCounts+2)^(0+128),w
  8860  1C53  0425               	iorwf	(STATE_PatternMode@rotCounts+1)^(0+128),w
  8861  1C54  0424               	iorwf	STATE_PatternMode@rotCounts^(0+128),w
  8862  1C55  1903               	skipnz
  8863  1C56  2C92               	goto	l5542
  8864                           
  8865                           ;patternMode.c: 39:     {;patternMode.c: 40:         patternIndex += rotCounts;
  8866  1C57  0824               	movf	STATE_PatternMode@rotCounts^(0+128),w
  8867  1C58  07BF               	addwf	STATE_PatternMode@patternIndex^(0+128),f
  8868  1C59  0825               	movf	(STATE_PatternMode@rotCounts+1)^(0+128),w
  8869  1C5A  3DC0               	addwfc	(STATE_PatternMode@patternIndex+1)^(0+128),f
  8870  1C5B  0826               	movf	(STATE_PatternMode@rotCounts+2)^(0+128),w
  8871  1C5C  3DC1               	addwfc	(STATE_PatternMode@patternIndex+2)^(0+128),f
  8872  1C5D  0827               	movf	(STATE_PatternMode@rotCounts+3)^(0+128),w
  8873  1C5E  3DC2               	addwfc	(STATE_PatternMode@patternIndex+3)^(0+128),f
  8874                           
  8875                           ;patternMode.c: 41:         patternIndex = ( (patternIndex < 0) ? 5u -1 : (patternIndex 
      +                          > 5u -1) ? 0 : patternIndex);
  8876  1C5F  1BC2               	btfsc	(STATE_PatternMode@patternIndex+3)^(0+128),7
  8877  1C60  2C8A               	goto	l5540
  8878  1C61  1BC2               	btfsc	(STATE_PatternMode@patternIndex+3)^(0+128),7
  8879  1C62  2C70               	goto	l5536
  8880  1C63  0842               	movf	(STATE_PatternMode@patternIndex+3)^(0+128),w
  8881  1C64  1D03               	btfss	3,2
  8882  1C65  2C79               	goto	l5538
  8883  1C66  0841               	movf	(STATE_PatternMode@patternIndex+2)^(0+128),w
  8884  1C67  1D03               	btfss	3,2
  8885  1C68  2C79               	goto	l5538
  8886  1C69  0840               	movf	(STATE_PatternMode@patternIndex+1)^(0+128),w
  8887  1C6A  1D03               	btfss	3,2
  8888  1C6B  2C79               	goto	l5538
  8889  1C6C  3005               	movlw	5
  8890  1C6D  023F               	subwf	STATE_PatternMode@patternIndex^(0+128),w
  8891  1C6E  1803               	btfsc	3,0
  8892  1C6F  2C79               	goto	l5538
  8893  1C70                     l5536:
  8894  1C70  0021               	movlb	1	; select bank1
  8895  1C71  0842               	movf	(STATE_PatternMode@patternIndex+3)^(0+128),w
  8896  1C72  00A3               	movwf	(_STATE_PatternMode$916+3)^(0+128)
  8897  1C73  0841               	movf	(STATE_PatternMode@patternIndex+2)^(0+128),w
  8898  1C74  00A2               	movwf	(_STATE_PatternMode$916+2)^(0+128)
  8899  1C75  0840               	movf	(STATE_PatternMode@patternIndex+1)^(0+128),w
  8900  1C76  00A1               	movwf	(_STATE_PatternMode$916+1)^(0+128)
  8901  1C77  083F               	movf	STATE_PatternMode@patternIndex^(0+128),w
  8902  1C78  2C81               	goto	L4
  8903  1C79                     l5538:
  8904  1C79  3000               	movlw	0
  8905  1C7A  0021               	movlb	1	; select bank1
  8906  1C7B  00A3               	movwf	(_STATE_PatternMode$916+3)^(0+128)
  8907  1C7C  3000               	movlw	0
  8908  1C7D  00A2               	movwf	(_STATE_PatternMode$916+2)^(0+128)
  8909  1C7E  3000               	movlw	0
  8910  1C7F  00A1               	movwf	(_STATE_PatternMode$916+1)^(0+128)
  8911  1C80  3000               	movlw	0
  8912  1C81                     L4:
  8913  1C81  00A0               	movwf	_STATE_PatternMode$916^(0+128)
  8914  1C82  0823               	movf	(_STATE_PatternMode$916+3)^(0+128),w
  8915  1C83  00C2               	movwf	(STATE_PatternMode@patternIndex+3)^(0+128)
  8916  1C84  0822               	movf	(_STATE_PatternMode$916+2)^(0+128),w
  8917  1C85  00C1               	movwf	(STATE_PatternMode@patternIndex+2)^(0+128)
  8918  1C86  0821               	movf	(_STATE_PatternMode$916+1)^(0+128),w
  8919  1C87  00C0               	movwf	(STATE_PatternMode@patternIndex+1)^(0+128)
  8920  1C88  0820               	movf	_STATE_PatternMode$916^(0+128),w
  8921  1C89  2C91               	goto	L5
  8922  1C8A                     l5540:
  8923  1C8A  3000               	movlw	0
  8924  1C8B  00C2               	movwf	(STATE_PatternMode@patternIndex+3)^(0+128)
  8925  1C8C  3000               	movlw	0
  8926  1C8D  00C1               	movwf	(STATE_PatternMode@patternIndex+2)^(0+128)
  8927  1C8E  3000               	movlw	0
  8928  1C8F  00C0               	movwf	(STATE_PatternMode@patternIndex+1)^(0+128)
  8929  1C90  3004               	movlw	4
  8930  1C91                     L5:
  8931  1C91  00BF               	movwf	STATE_PatternMode@patternIndex^(0+128)
  8932  1C92                     l5542:
  8933                           
  8934                           ;patternMode.c: 44:     (*patterns[patternIndex])();
  8935  1C92  353F               	lslf	STATE_PatternMode@patternIndex^(0+128),w
  8936  1C93  3E2A               	addlw	(low (_patterns| (0+256)))& (0+255)
  8937  1C94  0086               	movwf	6
  8938  1C95  3001               	movlw	1	; select bank2/3
  8939  1C96  0087               	movwf	7
  8940  1C97  3F41               	moviw [1]fsr1
  8941  1C98  008A               	movwf	10
  8942  1C99  3F40               	moviw [0]fsr1
  8943  1C9A  000A               	callw
  8944  1C9B  319C               	pagesel	$
  8945  1C9C  0008               	return
  8946  1C9D                     __end_of_STATE_PatternMode:
  8947                           
  8948                           	psect	text12
  8949  1507                     __ptext12:	
  8950 ;; *************** function _Clock_Popcorn_Pattern *****************
  8951 ;; Defined at:
  8952 ;;		line 597 in file "clockLEDs.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;		None
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;		None
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      void 
  8959 ;; Registers used:
  8960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8968 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8969 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8970 ;;Total ram usage:        5 bytes
  8971 ;; Hardware stack levels used: 1
  8972 ;; Hardware stack levels required when called: 8
  8973 ;; This function calls:
  8974 ;;		_WS2812B_Render
  8975 ;;		_WS2812b_SetSinglePixelColor
  8976 ;;		_WS2812b_SetStripConstantColor
  8977 ;;		___awmod
  8978 ;;		___lwmod
  8979 ;;		_rand
  8980 ;; This function is called by:
  8981 ;;		_State_SetFunctionLookupTable
  8982 ;;		_STATE_PatternMode
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986  1507                     _Clock_Popcorn_Pattern:	
  8987                           ;psect for function _Clock_Popcorn_Pattern
  8988                           
  8989                           
  8990                           ;clockLEDs.c: 599:     WS2812b_SetStripConstantColor( &ledArray,
  8991                           
  8992                           ;incstack = 0
  8993                           ; Regs used in _Clock_Popcorn_Pattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8994  1507  3062               	movlw	low _ledArray
  8995  1508  0020               	movlb	0	; select bank0
  8996  1509  00CF               	movwf	WS2812b_SetStripConstantColor@strip
  8997  150A  3000               	movlw	high _ledArray
  8998  150B  00D0               	movwf	WS2812b_SetStripConstantColor@strip+1
  8999  150C  01D1               	clrf	WS2812b_SetStripConstantColor@red
  9000  150D  01D2               	clrf	WS2812b_SetStripConstantColor@green
  9001  150E  01D3               	clrf	WS2812b_SetStripConstantColor@blue
  9002  150F  31A5  25A9  3195   	fcall	_WS2812b_SetStripConstantColor
  9003                           
  9004                           ;clockLEDs.c: 603:     WS2812b_SetSinglePixelColor( &ledArray,
  9005  1512  3062               	movlw	low _ledArray
  9006  1513  0020               	movlb	0	; select bank0
  9007  1514  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9008  1515  3000               	movlw	high _ledArray
  9009  1516  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9010  1517  300A               	movlw	10
  9011  1518  00BB               	movwf	___lwmod@divisor
  9012  1519  3000               	movlw	0
  9013  151A  00BC               	movwf	___lwmod@divisor+1
  9014  151B  31A7  2769  3195   	fcall	_rand
  9015  151E  0020               	movlb	0	; select bank0
  9016  151F  0835               	movf	?_rand,w
  9017  1520  00D7               	movwf	??_Clock_Popcorn_Pattern
  9018  1521  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9019  1522  0857               	movf	??_Clock_Popcorn_Pattern,w
  9020  1523  00BD               	movwf	___lwmod@dividend
  9021  1524  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9022  1525  00BE               	movwf	___lwmod@dividend+1
  9023  1526  31A5  25D5  3195   	fcall	___lwmod
  9024  1529  0020               	movlb	0	; select bank0
  9025  152A  083C               	movf	?___lwmod+1,w
  9026  152B  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9027  152C  083B               	movf	?___lwmod,w
  9028  152D  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9029  152E  30FF               	movlw	255
  9030  152F  00BB               	movwf	___awmod@divisor
  9031  1530  3000               	movlw	0
  9032  1531  00BC               	movwf	___awmod@divisor+1
  9033  1532  31A7  2769  3195   	fcall	_rand
  9034  1535  0020               	movlb	0	; select bank0
  9035  1536  0836               	movf	?_rand+1,w
  9036  1537  00BE               	movwf	___awmod@dividend+1
  9037  1538  0835               	movf	?_rand,w
  9038  1539  00BD               	movwf	___awmod@dividend
  9039  153A  31A6  26DB  3195   	fcall	___awmod
  9040  153D  0020               	movlb	0	; select bank0
  9041  153E  083B               	movf	?___awmod,w
  9042  153F  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9043  1540  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9044  1541  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9045  1542  30FF               	movlw	255
  9046  1543  00BB               	movwf	___awmod@divisor
  9047  1544  3000               	movlw	0
  9048  1545  00BC               	movwf	___awmod@divisor+1
  9049  1546  31A7  2769  3195   	fcall	_rand
  9050  1549  0020               	movlb	0	; select bank0
  9051  154A  0836               	movf	?_rand+1,w
  9052  154B  00BE               	movwf	___awmod@dividend+1
  9053  154C  0835               	movf	?_rand,w
  9054  154D  00BD               	movwf	___awmod@dividend
  9055  154E  31A6  26DB  3195   	fcall	___awmod
  9056  1551  0020               	movlb	0	; select bank0
  9057  1552  083B               	movf	?___awmod,w
  9058  1553  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9059  1554  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9060  1555  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9061  1556  30FF               	movlw	255
  9062  1557  00BB               	movwf	___awmod@divisor
  9063  1558  3000               	movlw	0
  9064  1559  00BC               	movwf	___awmod@divisor+1
  9065  155A  31A7  2769  3195   	fcall	_rand
  9066  155D  0020               	movlb	0	; select bank0
  9067  155E  0836               	movf	?_rand+1,w
  9068  155F  00BE               	movwf	___awmod@dividend+1
  9069  1560  0835               	movf	?_rand,w
  9070  1561  00BD               	movwf	___awmod@dividend
  9071  1562  31A6  26DB  3195   	fcall	___awmod
  9072  1565  0020               	movlb	0	; select bank0
  9073  1566  083B               	movf	?___awmod,w
  9074  1567  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9075  1568  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9076  1569  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9077  156A  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9078                           
  9079                           ;clockLEDs.c: 608:     WS2812b_SetSinglePixelColor( &ledArray,
  9080  156D  3062               	movlw	low _ledArray
  9081  156E  0020               	movlb	0	; select bank0
  9082  156F  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9083  1570  3000               	movlw	high _ledArray
  9084  1571  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9085  1572  300A               	movlw	10
  9086  1573  00BB               	movwf	___lwmod@divisor
  9087  1574  3000               	movlw	0
  9088  1575  00BC               	movwf	___lwmod@divisor+1
  9089  1576  31A7  2769  3195   	fcall	_rand
  9090  1579  0020               	movlb	0	; select bank0
  9091  157A  0835               	movf	?_rand,w
  9092  157B  00D7               	movwf	??_Clock_Popcorn_Pattern
  9093  157C  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9094  157D  0857               	movf	??_Clock_Popcorn_Pattern,w
  9095  157E  00BD               	movwf	___lwmod@dividend
  9096  157F  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9097  1580  00BE               	movwf	___lwmod@dividend+1
  9098  1581  31A5  25D5  3195   	fcall	___lwmod
  9099  1584  0020               	movlb	0	; select bank0
  9100  1585  083C               	movf	?___lwmod+1,w
  9101  1586  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9102  1587  083B               	movf	?___lwmod,w
  9103  1588  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9104  1589  30FF               	movlw	255
  9105  158A  00BB               	movwf	___awmod@divisor
  9106  158B  3000               	movlw	0
  9107  158C  00BC               	movwf	___awmod@divisor+1
  9108  158D  31A7  2769  3195   	fcall	_rand
  9109  1590  0020               	movlb	0	; select bank0
  9110  1591  0836               	movf	?_rand+1,w
  9111  1592  00BE               	movwf	___awmod@dividend+1
  9112  1593  0835               	movf	?_rand,w
  9113  1594  00BD               	movwf	___awmod@dividend
  9114  1595  31A6  26DB  3195   	fcall	___awmod
  9115  1598  0020               	movlb	0	; select bank0
  9116  1599  083B               	movf	?___awmod,w
  9117  159A  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9118  159B  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9119  159C  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9120  159D  30FF               	movlw	255
  9121  159E  00BB               	movwf	___awmod@divisor
  9122  159F  3000               	movlw	0
  9123  15A0  00BC               	movwf	___awmod@divisor+1
  9124  15A1  31A7  2769  3195   	fcall	_rand
  9125  15A4  0020               	movlb	0	; select bank0
  9126  15A5  0836               	movf	?_rand+1,w
  9127  15A6  00BE               	movwf	___awmod@dividend+1
  9128  15A7  0835               	movf	?_rand,w
  9129  15A8  00BD               	movwf	___awmod@dividend
  9130  15A9  31A6  26DB  3195   	fcall	___awmod
  9131  15AC  0020               	movlb	0	; select bank0
  9132  15AD  083B               	movf	?___awmod,w
  9133  15AE  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9134  15AF  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9135  15B0  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9136  15B1  30FF               	movlw	255
  9137  15B2  00BB               	movwf	___awmod@divisor
  9138  15B3  3000               	movlw	0
  9139  15B4  00BC               	movwf	___awmod@divisor+1
  9140  15B5  31A7  2769  3195   	fcall	_rand
  9141  15B8  0020               	movlb	0	; select bank0
  9142  15B9  0836               	movf	?_rand+1,w
  9143  15BA  00BE               	movwf	___awmod@dividend+1
  9144  15BB  0835               	movf	?_rand,w
  9145  15BC  00BD               	movwf	___awmod@dividend
  9146  15BD  31A6  26DB  3195   	fcall	___awmod
  9147  15C0  0020               	movlb	0	; select bank0
  9148  15C1  083B               	movf	?___awmod,w
  9149  15C2  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9150  15C3  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9151  15C4  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9152  15C5  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9153                           
  9154                           ;clockLEDs.c: 613:     WS2812b_SetSinglePixelColor( &ledArray,
  9155  15C8  3062               	movlw	low _ledArray
  9156  15C9  0020               	movlb	0	; select bank0
  9157  15CA  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9158  15CB  3000               	movlw	high _ledArray
  9159  15CC  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9160  15CD  300A               	movlw	10
  9161  15CE  00BB               	movwf	___lwmod@divisor
  9162  15CF  3000               	movlw	0
  9163  15D0  00BC               	movwf	___lwmod@divisor+1
  9164  15D1  31A7  2769  3195   	fcall	_rand
  9165  15D4  0020               	movlb	0	; select bank0
  9166  15D5  0835               	movf	?_rand,w
  9167  15D6  00D7               	movwf	??_Clock_Popcorn_Pattern
  9168  15D7  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9169  15D8  0857               	movf	??_Clock_Popcorn_Pattern,w
  9170  15D9  00BD               	movwf	___lwmod@dividend
  9171  15DA  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9172  15DB  00BE               	movwf	___lwmod@dividend+1
  9173  15DC  31A5  25D5  3195   	fcall	___lwmod
  9174  15DF  0020               	movlb	0	; select bank0
  9175  15E0  083C               	movf	?___lwmod+1,w
  9176  15E1  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9177  15E2  083B               	movf	?___lwmod,w
  9178  15E3  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9179  15E4  30FF               	movlw	255
  9180  15E5  00BB               	movwf	___awmod@divisor
  9181  15E6  3000               	movlw	0
  9182  15E7  00BC               	movwf	___awmod@divisor+1
  9183  15E8  31A7  2769  3195   	fcall	_rand
  9184  15EB  0020               	movlb	0	; select bank0
  9185  15EC  0836               	movf	?_rand+1,w
  9186  15ED  00BE               	movwf	___awmod@dividend+1
  9187  15EE  0835               	movf	?_rand,w
  9188  15EF  00BD               	movwf	___awmod@dividend
  9189  15F0  31A6  26DB  3195   	fcall	___awmod
  9190  15F3  0020               	movlb	0	; select bank0
  9191  15F4  083B               	movf	?___awmod,w
  9192  15F5  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9193  15F6  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9194  15F7  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9195  15F8  30FF               	movlw	255
  9196  15F9  00BB               	movwf	___awmod@divisor
  9197  15FA  3000               	movlw	0
  9198  15FB  00BC               	movwf	___awmod@divisor+1
  9199  15FC  31A7  2769  3195   	fcall	_rand
  9200  15FF  0020               	movlb	0	; select bank0
  9201  1600  0836               	movf	?_rand+1,w
  9202  1601  00BE               	movwf	___awmod@dividend+1
  9203  1602  0835               	movf	?_rand,w
  9204  1603  00BD               	movwf	___awmod@dividend
  9205  1604  31A6  26DB  3195   	fcall	___awmod
  9206  1607  0020               	movlb	0	; select bank0
  9207  1608  083B               	movf	?___awmod,w
  9208  1609  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9209  160A  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9210  160B  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9211  160C  30FF               	movlw	255
  9212  160D  00BB               	movwf	___awmod@divisor
  9213  160E  3000               	movlw	0
  9214  160F  00BC               	movwf	___awmod@divisor+1
  9215  1610  31A7  2769  3195   	fcall	_rand
  9216  1613  0020               	movlb	0	; select bank0
  9217  1614  0836               	movf	?_rand+1,w
  9218  1615  00BE               	movwf	___awmod@dividend+1
  9219  1616  0835               	movf	?_rand,w
  9220  1617  00BD               	movwf	___awmod@dividend
  9221  1618  31A6  26DB  3195   	fcall	___awmod
  9222  161B  0020               	movlb	0	; select bank0
  9223  161C  083B               	movf	?___awmod,w
  9224  161D  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9225  161E  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9226  161F  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9227  1620  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9228                           
  9229                           ;clockLEDs.c: 618:     WS2812b_SetSinglePixelColor( &ledArray,
  9230  1623  3062               	movlw	low _ledArray
  9231  1624  0020               	movlb	0	; select bank0
  9232  1625  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9233  1626  3000               	movlw	high _ledArray
  9234  1627  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9235  1628  300A               	movlw	10
  9236  1629  00BB               	movwf	___lwmod@divisor
  9237  162A  3000               	movlw	0
  9238  162B  00BC               	movwf	___lwmod@divisor+1
  9239  162C  31A7  2769  3195   	fcall	_rand
  9240  162F  0020               	movlb	0	; select bank0
  9241  1630  0835               	movf	?_rand,w
  9242  1631  00D7               	movwf	??_Clock_Popcorn_Pattern
  9243  1632  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9244  1633  0857               	movf	??_Clock_Popcorn_Pattern,w
  9245  1634  00BD               	movwf	___lwmod@dividend
  9246  1635  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9247  1636  00BE               	movwf	___lwmod@dividend+1
  9248  1637  31A5  25D5  3195   	fcall	___lwmod
  9249  163A  0020               	movlb	0	; select bank0
  9250  163B  083C               	movf	?___lwmod+1,w
  9251  163C  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9252  163D  083B               	movf	?___lwmod,w
  9253  163E  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9254  163F  30FF               	movlw	255
  9255  1640  00BB               	movwf	___awmod@divisor
  9256  1641  3000               	movlw	0
  9257  1642  00BC               	movwf	___awmod@divisor+1
  9258  1643  31A7  2769  3195   	fcall	_rand
  9259  1646  0020               	movlb	0	; select bank0
  9260  1647  0836               	movf	?_rand+1,w
  9261  1648  00BE               	movwf	___awmod@dividend+1
  9262  1649  0835               	movf	?_rand,w
  9263  164A  00BD               	movwf	___awmod@dividend
  9264  164B  31A6  26DB  3195   	fcall	___awmod
  9265  164E  0020               	movlb	0	; select bank0
  9266  164F  083B               	movf	?___awmod,w
  9267  1650  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9268  1651  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9269  1652  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9270  1653  30FF               	movlw	255
  9271  1654  00BB               	movwf	___awmod@divisor
  9272  1655  3000               	movlw	0
  9273  1656  00BC               	movwf	___awmod@divisor+1
  9274  1657  31A7  2769  3195   	fcall	_rand
  9275  165A  0020               	movlb	0	; select bank0
  9276  165B  0836               	movf	?_rand+1,w
  9277  165C  00BE               	movwf	___awmod@dividend+1
  9278  165D  0835               	movf	?_rand,w
  9279  165E  00BD               	movwf	___awmod@dividend
  9280  165F  31A6  26DB  3195   	fcall	___awmod
  9281  1662  0020               	movlb	0	; select bank0
  9282  1663  083B               	movf	?___awmod,w
  9283  1664  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9284  1665  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9285  1666  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9286  1667  30FF               	movlw	255
  9287  1668  00BB               	movwf	___awmod@divisor
  9288  1669  3000               	movlw	0
  9289  166A  00BC               	movwf	___awmod@divisor+1
  9290  166B  31A7  2769  3195   	fcall	_rand
  9291  166E  0020               	movlb	0	; select bank0
  9292  166F  0836               	movf	?_rand+1,w
  9293  1670  00BE               	movwf	___awmod@dividend+1
  9294  1671  0835               	movf	?_rand,w
  9295  1672  00BD               	movwf	___awmod@dividend
  9296  1673  31A6  26DB  3195   	fcall	___awmod
  9297  1676  0020               	movlb	0	; select bank0
  9298  1677  083B               	movf	?___awmod,w
  9299  1678  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9300  1679  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9301  167A  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9302  167B  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9303                           
  9304                           ;clockLEDs.c: 623:     WS2812b_SetSinglePixelColor( &ledArray,
  9305  167E  3062               	movlw	low _ledArray
  9306  167F  0020               	movlb	0	; select bank0
  9307  1680  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9308  1681  3000               	movlw	high _ledArray
  9309  1682  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9310  1683  300A               	movlw	10
  9311  1684  00BB               	movwf	___lwmod@divisor
  9312  1685  3000               	movlw	0
  9313  1686  00BC               	movwf	___lwmod@divisor+1
  9314  1687  31A7  2769  3195   	fcall	_rand
  9315  168A  0020               	movlb	0	; select bank0
  9316  168B  0835               	movf	?_rand,w
  9317  168C  00D7               	movwf	??_Clock_Popcorn_Pattern
  9318  168D  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9319  168E  0857               	movf	??_Clock_Popcorn_Pattern,w
  9320  168F  00BD               	movwf	___lwmod@dividend
  9321  1690  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9322  1691  00BE               	movwf	___lwmod@dividend+1
  9323  1692  31A5  25D5  3195   	fcall	___lwmod
  9324  1695  0020               	movlb	0	; select bank0
  9325  1696  083C               	movf	?___lwmod+1,w
  9326  1697  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9327  1698  083B               	movf	?___lwmod,w
  9328  1699  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9329  169A  30FF               	movlw	255
  9330  169B  00BB               	movwf	___awmod@divisor
  9331  169C  3000               	movlw	0
  9332  169D  00BC               	movwf	___awmod@divisor+1
  9333  169E  31A7  2769  3195   	fcall	_rand
  9334  16A1  0020               	movlb	0	; select bank0
  9335  16A2  0836               	movf	?_rand+1,w
  9336  16A3  00BE               	movwf	___awmod@dividend+1
  9337  16A4  0835               	movf	?_rand,w
  9338  16A5  00BD               	movwf	___awmod@dividend
  9339  16A6  31A6  26DB  3195   	fcall	___awmod
  9340  16A9  0020               	movlb	0	; select bank0
  9341  16AA  083B               	movf	?___awmod,w
  9342  16AB  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9343  16AC  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9344  16AD  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9345  16AE  30FF               	movlw	255
  9346  16AF  00BB               	movwf	___awmod@divisor
  9347  16B0  3000               	movlw	0
  9348  16B1  00BC               	movwf	___awmod@divisor+1
  9349  16B2  31A7  2769  3195   	fcall	_rand
  9350  16B5  0020               	movlb	0	; select bank0
  9351  16B6  0836               	movf	?_rand+1,w
  9352  16B7  00BE               	movwf	___awmod@dividend+1
  9353  16B8  0835               	movf	?_rand,w
  9354  16B9  00BD               	movwf	___awmod@dividend
  9355  16BA  31A6  26DB  3195   	fcall	___awmod
  9356  16BD  0020               	movlb	0	; select bank0
  9357  16BE  083B               	movf	?___awmod,w
  9358  16BF  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9359  16C0  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9360  16C1  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9361  16C2  30FF               	movlw	255
  9362  16C3  00BB               	movwf	___awmod@divisor
  9363  16C4  3000               	movlw	0
  9364  16C5  00BC               	movwf	___awmod@divisor+1
  9365  16C6  31A7  2769  3195   	fcall	_rand
  9366  16C9  0020               	movlb	0	; select bank0
  9367  16CA  0836               	movf	?_rand+1,w
  9368  16CB  00BE               	movwf	___awmod@dividend+1
  9369  16CC  0835               	movf	?_rand,w
  9370  16CD  00BD               	movwf	___awmod@dividend
  9371  16CE  31A6  26DB  3195   	fcall	___awmod
  9372  16D1  0020               	movlb	0	; select bank0
  9373  16D2  083B               	movf	?___awmod,w
  9374  16D3  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9375  16D4  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9376  16D5  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9377  16D6  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9378                           
  9379                           ;clockLEDs.c: 628:     WS2812b_SetSinglePixelColor( &ledArray,
  9380  16D9  3062               	movlw	low _ledArray
  9381  16DA  0020               	movlb	0	; select bank0
  9382  16DB  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9383  16DC  3000               	movlw	high _ledArray
  9384  16DD  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9385  16DE  300A               	movlw	10
  9386  16DF  00BB               	movwf	___lwmod@divisor
  9387  16E0  3000               	movlw	0
  9388  16E1  00BC               	movwf	___lwmod@divisor+1
  9389  16E2  31A7  2769  3195   	fcall	_rand
  9390  16E5  0020               	movlb	0	; select bank0
  9391  16E6  0835               	movf	?_rand,w
  9392  16E7  00D7               	movwf	??_Clock_Popcorn_Pattern
  9393  16E8  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9394  16E9  0857               	movf	??_Clock_Popcorn_Pattern,w
  9395  16EA  00BD               	movwf	___lwmod@dividend
  9396  16EB  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9397  16EC  00BE               	movwf	___lwmod@dividend+1
  9398  16ED  31A5  25D5  3195   	fcall	___lwmod
  9399  16F0  0020               	movlb	0	; select bank0
  9400  16F1  083C               	movf	?___lwmod+1,w
  9401  16F2  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9402  16F3  083B               	movf	?___lwmod,w
  9403  16F4  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9404  16F5  30FF               	movlw	255
  9405  16F6  00BB               	movwf	___awmod@divisor
  9406  16F7  3000               	movlw	0
  9407  16F8  00BC               	movwf	___awmod@divisor+1
  9408  16F9  31A7  2769  3195   	fcall	_rand
  9409  16FC  0020               	movlb	0	; select bank0
  9410  16FD  0836               	movf	?_rand+1,w
  9411  16FE  00BE               	movwf	___awmod@dividend+1
  9412  16FF  0835               	movf	?_rand,w
  9413  1700  00BD               	movwf	___awmod@dividend
  9414  1701  31A6  26DB  3195   	fcall	___awmod
  9415  1704  0020               	movlb	0	; select bank0
  9416  1705  083B               	movf	?___awmod,w
  9417  1706  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9418  1707  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9419  1708  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9420  1709  30FF               	movlw	255
  9421  170A  00BB               	movwf	___awmod@divisor
  9422  170B  3000               	movlw	0
  9423  170C  00BC               	movwf	___awmod@divisor+1
  9424  170D  31A7  2769  3195   	fcall	_rand
  9425  1710  0020               	movlb	0	; select bank0
  9426  1711  0836               	movf	?_rand+1,w
  9427  1712  00BE               	movwf	___awmod@dividend+1
  9428  1713  0835               	movf	?_rand,w
  9429  1714  00BD               	movwf	___awmod@dividend
  9430  1715  31A6  26DB  3195   	fcall	___awmod
  9431  1718  0020               	movlb	0	; select bank0
  9432  1719  083B               	movf	?___awmod,w
  9433  171A  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9434  171B  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9435  171C  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9436  171D  30FF               	movlw	255
  9437  171E  00BB               	movwf	___awmod@divisor
  9438  171F  3000               	movlw	0
  9439  1720  00BC               	movwf	___awmod@divisor+1
  9440  1721  31A7  2769  3195   	fcall	_rand
  9441  1724  0020               	movlb	0	; select bank0
  9442  1725  0836               	movf	?_rand+1,w
  9443  1726  00BE               	movwf	___awmod@dividend+1
  9444  1727  0835               	movf	?_rand,w
  9445  1728  00BD               	movwf	___awmod@dividend
  9446  1729  31A6  26DB  3195   	fcall	___awmod
  9447  172C  0020               	movlb	0	; select bank0
  9448  172D  083B               	movf	?___awmod,w
  9449  172E  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9450  172F  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9451  1730  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9452  1731  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9453                           
  9454                           ;clockLEDs.c: 633:     WS2812b_SetSinglePixelColor( &ledArray,
  9455  1734  3062               	movlw	low _ledArray
  9456  1735  0020               	movlb	0	; select bank0
  9457  1736  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9458  1737  3000               	movlw	high _ledArray
  9459  1738  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9460  1739  300A               	movlw	10
  9461  173A  00BB               	movwf	___lwmod@divisor
  9462  173B  3000               	movlw	0
  9463  173C  00BC               	movwf	___lwmod@divisor+1
  9464  173D  31A7  2769  3195   	fcall	_rand
  9465  1740  0020               	movlb	0	; select bank0
  9466  1741  0835               	movf	?_rand,w
  9467  1742  00D7               	movwf	??_Clock_Popcorn_Pattern
  9468  1743  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9469  1744  0857               	movf	??_Clock_Popcorn_Pattern,w
  9470  1745  00BD               	movwf	___lwmod@dividend
  9471  1746  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9472  1747  00BE               	movwf	___lwmod@dividend+1
  9473  1748  31A5  25D5  3195   	fcall	___lwmod
  9474  174B  0020               	movlb	0	; select bank0
  9475  174C  083C               	movf	?___lwmod+1,w
  9476  174D  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9477  174E  083B               	movf	?___lwmod,w
  9478  174F  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9479  1750  30FF               	movlw	255
  9480  1751  00BB               	movwf	___awmod@divisor
  9481  1752  3000               	movlw	0
  9482  1753  00BC               	movwf	___awmod@divisor+1
  9483  1754  31A7  2769  3195   	fcall	_rand
  9484  1757  0020               	movlb	0	; select bank0
  9485  1758  0836               	movf	?_rand+1,w
  9486  1759  00BE               	movwf	___awmod@dividend+1
  9487  175A  0835               	movf	?_rand,w
  9488  175B  00BD               	movwf	___awmod@dividend
  9489  175C  31A6  26DB  3195   	fcall	___awmod
  9490  175F  0020               	movlb	0	; select bank0
  9491  1760  083B               	movf	?___awmod,w
  9492  1761  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9493  1762  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9494  1763  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9495  1764  30FF               	movlw	255
  9496  1765  00BB               	movwf	___awmod@divisor
  9497  1766  3000               	movlw	0
  9498  1767  00BC               	movwf	___awmod@divisor+1
  9499  1768  31A7  2769  3195   	fcall	_rand
  9500  176B  0020               	movlb	0	; select bank0
  9501  176C  0836               	movf	?_rand+1,w
  9502  176D  00BE               	movwf	___awmod@dividend+1
  9503  176E  0835               	movf	?_rand,w
  9504  176F  00BD               	movwf	___awmod@dividend
  9505  1770  31A6  26DB  3195   	fcall	___awmod
  9506  1773  0020               	movlb	0	; select bank0
  9507  1774  083B               	movf	?___awmod,w
  9508  1775  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9509  1776  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9510  1777  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9511  1778  30FF               	movlw	255
  9512  1779  00BB               	movwf	___awmod@divisor
  9513  177A  3000               	movlw	0
  9514  177B  00BC               	movwf	___awmod@divisor+1
  9515  177C  31A7  2769  3195   	fcall	_rand
  9516  177F  0020               	movlb	0	; select bank0
  9517  1780  0836               	movf	?_rand+1,w
  9518  1781  00BE               	movwf	___awmod@dividend+1
  9519  1782  0835               	movf	?_rand,w
  9520  1783  00BD               	movwf	___awmod@dividend
  9521  1784  31A6  26DB  3195   	fcall	___awmod
  9522  1787  0020               	movlb	0	; select bank0
  9523  1788  083B               	movf	?___awmod,w
  9524  1789  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9525  178A  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9526  178B  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9527  178C  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9528                           
  9529                           ;clockLEDs.c: 638:     WS2812b_SetSinglePixelColor( &ledArray,
  9530  178F  3062               	movlw	low _ledArray
  9531  1790  0020               	movlb	0	; select bank0
  9532  1791  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9533  1792  3000               	movlw	high _ledArray
  9534  1793  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9535  1794  300A               	movlw	10
  9536  1795  00BB               	movwf	___lwmod@divisor
  9537  1796  3000               	movlw	0
  9538  1797  00BC               	movwf	___lwmod@divisor+1
  9539  1798  31A7  2769  3195   	fcall	_rand
  9540  179B  0020               	movlb	0	; select bank0
  9541  179C  0835               	movf	?_rand,w
  9542  179D  00D7               	movwf	??_Clock_Popcorn_Pattern
  9543  179E  01D8               	clrf	??_Clock_Popcorn_Pattern+1
  9544  179F  0857               	movf	??_Clock_Popcorn_Pattern,w
  9545  17A0  00BD               	movwf	___lwmod@dividend
  9546  17A1  0858               	movf	??_Clock_Popcorn_Pattern+1,w
  9547  17A2  00BE               	movwf	___lwmod@dividend+1
  9548  17A3  31A5  25D5  3195   	fcall	___lwmod
  9549  17A6  0020               	movlb	0	; select bank0
  9550  17A7  083C               	movf	?___lwmod+1,w
  9551  17A8  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9552  17A9  083B               	movf	?___lwmod,w
  9553  17AA  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9554  17AB  30FF               	movlw	255
  9555  17AC  00BB               	movwf	___awmod@divisor
  9556  17AD  3000               	movlw	0
  9557  17AE  00BC               	movwf	___awmod@divisor+1
  9558  17AF  31A7  2769  3195   	fcall	_rand
  9559  17B2  0020               	movlb	0	; select bank0
  9560  17B3  0836               	movf	?_rand+1,w
  9561  17B4  00BE               	movwf	___awmod@dividend+1
  9562  17B5  0835               	movf	?_rand,w
  9563  17B6  00BD               	movwf	___awmod@dividend
  9564  17B7  31A6  26DB  3195   	fcall	___awmod
  9565  17BA  0020               	movlb	0	; select bank0
  9566  17BB  083B               	movf	?___awmod,w
  9567  17BC  00D9               	movwf	??_Clock_Popcorn_Pattern+2
  9568  17BD  0859               	movf	??_Clock_Popcorn_Pattern+2,w
  9569  17BE  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9570  17BF  30FF               	movlw	255
  9571  17C0  00BB               	movwf	___awmod@divisor
  9572  17C1  3000               	movlw	0
  9573  17C2  00BC               	movwf	___awmod@divisor+1
  9574  17C3  31A7  2769  3195   	fcall	_rand
  9575  17C6  0020               	movlb	0	; select bank0
  9576  17C7  0836               	movf	?_rand+1,w
  9577  17C8  00BE               	movwf	___awmod@dividend+1
  9578  17C9  0835               	movf	?_rand,w
  9579  17CA  00BD               	movwf	___awmod@dividend
  9580  17CB  31A6  26DB  3195   	fcall	___awmod
  9581  17CE  0020               	movlb	0	; select bank0
  9582  17CF  083B               	movf	?___awmod,w
  9583  17D0  00DA               	movwf	??_Clock_Popcorn_Pattern+3
  9584  17D1  085A               	movf	??_Clock_Popcorn_Pattern+3,w
  9585  17D2  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9586  17D3  30FF               	movlw	255
  9587  17D4  00BB               	movwf	___awmod@divisor
  9588  17D5  3000               	movlw	0
  9589  17D6  00BC               	movwf	___awmod@divisor+1
  9590  17D7  31A7  2769  3195   	fcall	_rand
  9591  17DA  0020               	movlb	0	; select bank0
  9592  17DB  0836               	movf	?_rand+1,w
  9593  17DC  00BE               	movwf	___awmod@dividend+1
  9594  17DD  0835               	movf	?_rand,w
  9595  17DE  00BD               	movwf	___awmod@dividend
  9596  17DF  31A6  26DB  3195   	fcall	___awmod
  9597  17E2  0020               	movlb	0	; select bank0
  9598  17E3  083B               	movf	?___awmod,w
  9599  17E4  00DB               	movwf	??_Clock_Popcorn_Pattern+4
  9600  17E5  085B               	movf	??_Clock_Popcorn_Pattern+4,w
  9601  17E6  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9602  17E7  319B  2386  3195   	fcall	_WS2812b_SetSinglePixelColor
  9603                           
  9604                           ;clockLEDs.c: 643:     WS2812B_Render( &ledArray );
  9605  17EA  3062               	movlw	low _ledArray
  9606  17EB  0020               	movlb	0	; select bank0
  9607  17EC  00A9               	movwf	WS2812B_Render@strip
  9608  17ED  3000               	movlw	high _ledArray
  9609  17EE  00AA               	movwf	WS2812B_Render@strip+1
  9610  17EF  3190  2031  3195   	fcall	_WS2812B_Render
  9611                           
  9612                           ;clockLEDs.c: 644:     _delay((unsigned long)((150)*(32000000u/4000.0)));
  9613  17F2  3007               	movlw	7
  9614  17F3  0020               	movlb	0	; select bank0
  9615  17F4  00D8               	movwf	??_Clock_Popcorn_Pattern+1
  9616  17F5  3017               	movlw	23
  9617  17F6  00D7               	movwf	??_Clock_Popcorn_Pattern
  9618  17F7  306A               	movlw	106
  9619  17F8                     u4927:
  9620  17F8  0B89               	decfsz	9,f
  9621  17F9  2FF8               	goto	u4927
  9622  17FA  0BD7               	decfsz	??_Clock_Popcorn_Pattern,f
  9623  17FB  2FF8               	goto	u4927
  9624  17FC  0BD8               	decfsz	??_Clock_Popcorn_Pattern+1,f
  9625  17FD  2FF8               	goto	u4927
  9626  17FE  0000               	nop
  9627  17FF  0008               	return
  9628  1800                     __end_of_Clock_Popcorn_Pattern:
  9629                           
  9630                           	psect	text13
  9631  007B                     __ptext13:	
  9632 ;; *************** function _Clock_CrossingRainbowPatternwithDelays *****************
  9633 ;; Defined at:
  9634 ;;		line 511 in file "clockLEDs.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;		None
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;		None
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      void 
  9641 ;; Registers used:
  9642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9649 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9650 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9651 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9652 ;;Total ram usage:        8 bytes
  9653 ;; Hardware stack levels used: 1
  9654 ;; Hardware stack levels required when called: 7
  9655 ;; This function calls:
  9656 ;;		_WS2812B_Render
  9657 ;;		_WS2812b_SetSinglePixelColor
  9658 ;;		___wmul
  9659 ;; This function is called by:
  9660 ;;		_State_SetFunctionLookupTable
  9661 ;;		_STATE_PatternMode
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665  007B                     _Clock_CrossingRainbowPatternwithDelays:	
  9666                           ;psect for function _Clock_CrossingRainbowPatternwithDelays
  9667                           
  9668                           
  9669                           ;clockLEDs.c: 516:     static size_t thisIndex = 0;;clockLEDs.c: 517:     static size_t 
      +                          rainbowRowIdx = 0;;clockLEDs.c: 521:     if( 0 == thisIndex )
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in _Clock_CrossingRainbowPatternwithDelays: [wreg-fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  9673  007B  0021               	movlb	1	; select bank1
  9674  007C  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
  9675  007D  0444               	iorwf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
  9676  007E  1D03               	btfss	3,2
  9677  007F  28D6               	goto	l5444
  9678                           
  9679                           ;clockLEDs.c: 522:     {;clockLEDs.c: 523:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9680  0080  0020               	movlb	0	; select bank0
  9681  0081  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9682  0082  00AA               	movwf	___wmul@multiplier+1
  9683  0083  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9684  0084  00A9               	movwf	___wmul@multiplier
  9685  0085  3003               	movlw	3
  9686  0086  00AB               	movwf	___wmul@multiplicand
  9687  0087  3000               	movlw	0
  9688  0088  00AC               	movwf	___wmul@multiplicand+1
  9689  0089  31A4  247E  3180   	fcall	___wmul
  9690  008C  0020               	movlb	0	; select bank0
  9691  008D  082A               	movf	?___wmul+1,w
  9692  008E  0085               	movwf	5
  9693  008F  0829               	movf	?___wmul,w
  9694  0090  0084               	movwf	4
  9695  0091  3058               	movlw	low (_rainbowRGBValues| (0+32768))
  9696  0092  0784               	addwf	4,f
  9697  0093  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
  9698  0094  3D85               	addwfc	5,f
  9699  0095  0800               	movf	0,w	;code access
  9700  0096  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9701  0097  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9702  0098  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
  9703                           
  9704                           ;clockLEDs.c: 522:     {;clockLEDs.c: 523:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9705  0099  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9706  009A  00AA               	movwf	___wmul@multiplier+1
  9707  009B  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9708  009C  00A9               	movwf	___wmul@multiplier
  9709  009D  3003               	movlw	3
  9710  009E  00AB               	movwf	___wmul@multiplicand
  9711  009F  3000               	movlw	0
  9712  00A0  00AC               	movwf	___wmul@multiplicand+1
  9713  00A1  31A4  247E  3180   	fcall	___wmul
  9714  00A4  0020               	movlb	0	; select bank0
  9715  00A5  082A               	movf	?___wmul+1,w
  9716  00A6  0085               	movwf	5
  9717  00A7  0829               	movf	?___wmul,w
  9718  00A8  0084               	movwf	4
  9719  00A9  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
  9720  00AA  0784               	addwf	4,f
  9721  00AB  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
  9722  00AC  3D85               	addwfc	5,f
  9723  00AD  0800               	movf	0,w	;code access
  9724  00AE  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9725  00AF  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9726  00B0  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
  9727                           
  9728                           ;clockLEDs.c: 522:     {;clockLEDs.c: 523:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9729  00B1  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9730  00B2  00AA               	movwf	___wmul@multiplier+1
  9731  00B3  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9732  00B4  00A9               	movwf	___wmul@multiplier
  9733  00B5  3003               	movlw	3
  9734  00B6  00AB               	movwf	___wmul@multiplicand
  9735  00B7  3000               	movlw	0
  9736  00B8  00AC               	movwf	___wmul@multiplicand+1
  9737  00B9  31A4  247E  3180   	fcall	___wmul
  9738  00BC  0020               	movlb	0	; select bank0
  9739  00BD  082A               	movf	?___wmul+1,w
  9740  00BE  0085               	movwf	5
  9741  00BF  0829               	movf	?___wmul,w
  9742  00C0  0084               	movwf	4
  9743  00C1  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
  9744  00C2  0784               	addwf	4,f
  9745  00C3  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
  9746  00C4  3D85               	addwfc	5,f
  9747  00C5  0800               	movf	0,w	;code access
  9748  00C6  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9749  00C7  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9750  00C8  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
  9751                           
  9752                           ;clockLEDs.c: 522:     {;clockLEDs.c: 523:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9753  00C9  3062               	movlw	low _ledArray
  9754  00CA  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9755  00CB  3000               	movlw	high _ledArray
  9756  00CC  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9757  00CD  0021               	movlb	1	; select bank1
  9758  00CE  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
  9759  00CF  0085               	movwf	5
  9760  00D0  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
  9761  00D1  0084               	movwf	4
  9762  00D2  306A               	movlw	low (_row3| (0+32768))
  9763  00D3  0784               	addwf	4,f
  9764  00D4  30A8               	movlw	high (_row3| (0+32768))
  9765  00D5  2C13               	goto	L6
  9766  00D6                     l5444:	
  9767                           ;clockLEDs.c: 528:     }
  9768                           
  9769  00D6  0343               	decf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
  9770  00D7  0444               	iorwf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
  9771  00D8  1D03               	btfss	3,2
  9772  00D9  2A0A               	goto	l5464
  9773                           
  9774                           ;clockLEDs.c: 532:     {;clockLEDs.c: 533:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9775  00DA  0020               	movlb	0	; select bank0
  9776  00DB  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9777  00DC  00AA               	movwf	___wmul@multiplier+1
  9778  00DD  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9779  00DE  00A9               	movwf	___wmul@multiplier
  9780  00DF  3003               	movlw	3
  9781  00E0  00AB               	movwf	___wmul@multiplicand
  9782  00E1  3000               	movlw	0
  9783  00E2  00AC               	movwf	___wmul@multiplicand+1
  9784  00E3  31A4  247E  3180   	fcall	___wmul
  9785  00E6  0020               	movlb	0	; select bank0
  9786  00E7  082A               	movf	?___wmul+1,w
  9787  00E8  0085               	movwf	5
  9788  00E9  0829               	movf	?___wmul,w
  9789  00EA  0084               	movwf	4
  9790  00EB  3058               	movlw	low (_rainbowRGBValues| (0+32768))
  9791  00EC  0784               	addwf	4,f
  9792  00ED  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
  9793  00EE  3D85               	addwfc	5,f
  9794  00EF  0800               	movf	0,w	;code access
  9795  00F0  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9796  00F1  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9797  00F2  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
  9798                           
  9799                           ;clockLEDs.c: 532:     {;clockLEDs.c: 533:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9800  00F3  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9801  00F4  00AA               	movwf	___wmul@multiplier+1
  9802  00F5  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9803  00F6  00A9               	movwf	___wmul@multiplier
  9804  00F7  3003               	movlw	3
  9805  00F8  00AB               	movwf	___wmul@multiplicand
  9806  00F9  3000               	movlw	0
  9807  00FA  00AC               	movwf	___wmul@multiplicand+1
  9808  00FB  31A4  247E  3180   	fcall	___wmul
  9809  00FE  0020               	movlb	0	; select bank0
  9810  00FF  082A               	movf	?___wmul+1,w
  9811  0100  0085               	movwf	5
  9812  0101  0829               	movf	?___wmul,w
  9813  0102  0084               	movwf	4
  9814  0103  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
  9815  0104  0784               	addwf	4,f
  9816  0105  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
  9817  0106  3D85               	addwfc	5,f
  9818  0107  0800               	movf	0,w	;code access
  9819  0108  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9820  0109  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9821  010A  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
  9822                           
  9823                           ;clockLEDs.c: 532:     {;clockLEDs.c: 533:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9824  010B  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9825  010C  00AA               	movwf	___wmul@multiplier+1
  9826  010D  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9827  010E  00A9               	movwf	___wmul@multiplier
  9828  010F  3003               	movlw	3
  9829  0110  00AB               	movwf	___wmul@multiplicand
  9830  0111  3000               	movlw	0
  9831  0112  00AC               	movwf	___wmul@multiplicand+1
  9832  0113  31A4  247E  3180   	fcall	___wmul
  9833  0116  0020               	movlb	0	; select bank0
  9834  0117  082A               	movf	?___wmul+1,w
  9835  0118  0085               	movwf	5
  9836  0119  0829               	movf	?___wmul,w
  9837  011A  0084               	movwf	4
  9838  011B  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
  9839  011C  0784               	addwf	4,f
  9840  011D  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
  9841  011E  3D85               	addwfc	5,f
  9842  011F  0800               	movf	0,w	;code access
  9843  0120  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9844  0121  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9845  0122  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
  9846                           
  9847                           ;clockLEDs.c: 532:     {;clockLEDs.c: 533:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
  9848  0123  3062               	movlw	low _ledArray
  9849  0124  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9850  0125  3000               	movlw	high _ledArray
  9851  0126  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9852  0127  0021               	movlb	1	; select bank1
  9853  0128  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
  9854  0129  0085               	movwf	5
  9855  012A  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
  9856  012B  0084               	movwf	4
  9857  012C  3084               	movlw	low ((_row2+65535)| (0+32768))
  9858  012D  0784               	addwf	4,f
  9859  012E  30A8               	movlw	high ((_row2+65535)| (0+32768))
  9860  012F  3D85               	addwfc	5,f
  9861  0130  0800               	movf	0,w	;code access
  9862  0131  0020               	movlb	0	; select bank0
  9863  0132  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9864  0133  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
  9865  0134  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9866  0135  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9867  0136  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
  9868  0137  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9869  0138  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
  9870  0139  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
  9871  013A  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
  9872  013B  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9873  013C  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
  9874  013D  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
  9875  013E  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
  9876  013F  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9877  0140  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
  9878  0141  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
  9879  0142  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
  9880  0143  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9881  0144  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
  9882                           
  9883                           ;clockLEDs.c: 538:         WS2812b_SetSinglePixelColor( &ledArray,
  9884  0147  0020               	movlb	0	; select bank0
  9885  0148  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9886  0149  00AA               	movwf	___wmul@multiplier+1
  9887  014A  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9888  014B  00A9               	movwf	___wmul@multiplier
  9889  014C  3003               	movlw	3
  9890  014D  00AB               	movwf	___wmul@multiplicand
  9891  014E  3000               	movlw	0
  9892  014F  00AC               	movwf	___wmul@multiplicand+1
  9893  0150  31A4  247E  3180   	fcall	___wmul
  9894  0153  0020               	movlb	0	; select bank0
  9895  0154  082A               	movf	?___wmul+1,w
  9896  0155  0085               	movwf	5
  9897  0156  0829               	movf	?___wmul,w
  9898  0157  0084               	movwf	4
  9899  0158  3058               	movlw	low (_rainbowRGBValues| (0+32768))
  9900  0159  0784               	addwf	4,f
  9901  015A  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
  9902  015B  3D85               	addwfc	5,f
  9903  015C  0800               	movf	0,w	;code access
  9904  015D  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9905  015E  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9906  015F  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
  9907                           
  9908                           ;clockLEDs.c: 538:         WS2812b_SetSinglePixelColor( &ledArray,
  9909  0160  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9910  0161  00AA               	movwf	___wmul@multiplier+1
  9911  0162  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9912  0163  00A9               	movwf	___wmul@multiplier
  9913  0164  3003               	movlw	3
  9914  0165  00AB               	movwf	___wmul@multiplicand
  9915  0166  3000               	movlw	0
  9916  0167  00AC               	movwf	___wmul@multiplicand+1
  9917  0168  31A4  247E  3180   	fcall	___wmul
  9918  016B  0020               	movlb	0	; select bank0
  9919  016C  082A               	movf	?___wmul+1,w
  9920  016D  0085               	movwf	5
  9921  016E  0829               	movf	?___wmul,w
  9922  016F  0084               	movwf	4
  9923  0170  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
  9924  0171  0784               	addwf	4,f
  9925  0172  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
  9926  0173  3D85               	addwfc	5,f
  9927  0174  0800               	movf	0,w	;code access
  9928  0175  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9929  0176  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9930  0177  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
  9931                           
  9932                           ;clockLEDs.c: 538:         WS2812b_SetSinglePixelColor( &ledArray,
  9933  0178  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9934  0179  00AA               	movwf	___wmul@multiplier+1
  9935  017A  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9936  017B  00A9               	movwf	___wmul@multiplier
  9937  017C  3003               	movlw	3
  9938  017D  00AB               	movwf	___wmul@multiplicand
  9939  017E  3000               	movlw	0
  9940  017F  00AC               	movwf	___wmul@multiplicand+1
  9941  0180  31A4  247E  3180   	fcall	___wmul
  9942  0183  0020               	movlb	0	; select bank0
  9943  0184  082A               	movf	?___wmul+1,w
  9944  0185  0085               	movwf	5
  9945  0186  0829               	movf	?___wmul,w
  9946  0187  0084               	movwf	4
  9947  0188  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
  9948  0189  0784               	addwf	4,f
  9949  018A  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
  9950  018B  3D85               	addwfc	5,f
  9951  018C  0800               	movf	0,w	;code access
  9952  018D  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9953  018E  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9954  018F  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
  9955                           
  9956                           ;clockLEDs.c: 538:         WS2812b_SetSinglePixelColor( &ledArray,
  9957  0190  3062               	movlw	low _ledArray
  9958  0191  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
  9959  0192  3000               	movlw	high _ledArray
  9960  0193  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
  9961  0194  0021               	movlb	1	; select bank1
  9962  0195  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
  9963  0196  0085               	movwf	5
  9964  0197  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
  9965  0198  0084               	movwf	4
  9966  0199  306A               	movlw	low (_row3| (0+32768))
  9967  019A  0784               	addwf	4,f
  9968  019B  30A8               	movlw	high (_row3| (0+32768))
  9969  019C  3D85               	addwfc	5,f
  9970  019D  0800               	movf	0,w	;code access
  9971  019E  0020               	movlb	0	; select bank0
  9972  019F  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
  9973  01A0  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
  9974  01A1  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
  9975  01A2  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
  9976  01A3  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
  9977  01A4  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
  9978  01A5  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
  9979  01A6  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
  9980  01A7  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
  9981  01A8  00C6               	movwf	WS2812b_SetSinglePixelColor@red
  9982  01A9  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
  9983  01AA  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
  9984  01AB  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
  9985  01AC  00C7               	movwf	WS2812b_SetSinglePixelColor@green
  9986  01AD  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
  9987  01AE  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
  9988  01AF  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
  9989  01B0  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
  9990  01B1  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
  9991                           
  9992                           ;clockLEDs.c: 543:         WS2812b_SetSinglePixelColor( &ledArray,
  9993  01B4  0020               	movlb	0	; select bank0
  9994  01B5  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
  9995  01B6  00AA               	movwf	___wmul@multiplier+1
  9996  01B7  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
  9997  01B8  00A9               	movwf	___wmul@multiplier
  9998  01B9  3003               	movlw	3
  9999  01BA  00AB               	movwf	___wmul@multiplicand
 10000  01BB  3000               	movlw	0
 10001  01BC  00AC               	movwf	___wmul@multiplicand+1
 10002  01BD  31A4  247E  3180   	fcall	___wmul
 10003  01C0  0020               	movlb	0	; select bank0
 10004  01C1  082A               	movf	?___wmul+1,w
 10005  01C2  0085               	movwf	5
 10006  01C3  0829               	movf	?___wmul,w
 10007  01C4  0084               	movwf	4
 10008  01C5  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10009  01C6  0784               	addwf	4,f
 10010  01C7  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10011  01C8  3D85               	addwfc	5,f
 10012  01C9  0800               	movf	0,w	;code access
 10013  01CA  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10014  01CB  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10015  01CC  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10016                           
 10017                           ;clockLEDs.c: 543:         WS2812b_SetSinglePixelColor( &ledArray,
 10018  01CD  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10019  01CE  00AA               	movwf	___wmul@multiplier+1
 10020  01CF  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10021  01D0  00A9               	movwf	___wmul@multiplier
 10022  01D1  3003               	movlw	3
 10023  01D2  00AB               	movwf	___wmul@multiplicand
 10024  01D3  3000               	movlw	0
 10025  01D4  00AC               	movwf	___wmul@multiplicand+1
 10026  01D5  31A4  247E  3180   	fcall	___wmul
 10027  01D8  0020               	movlb	0	; select bank0
 10028  01D9  082A               	movf	?___wmul+1,w
 10029  01DA  0085               	movwf	5
 10030  01DB  0829               	movf	?___wmul,w
 10031  01DC  0084               	movwf	4
 10032  01DD  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10033  01DE  0784               	addwf	4,f
 10034  01DF  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10035  01E0  3D85               	addwfc	5,f
 10036  01E1  0800               	movf	0,w	;code access
 10037  01E2  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10038  01E3  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10039  01E4  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10040                           
 10041                           ;clockLEDs.c: 543:         WS2812b_SetSinglePixelColor( &ledArray,
 10042  01E5  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10043  01E6  00AA               	movwf	___wmul@multiplier+1
 10044  01E7  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10045  01E8  00A9               	movwf	___wmul@multiplier
 10046  01E9  3003               	movlw	3
 10047  01EA  00AB               	movwf	___wmul@multiplicand
 10048  01EB  3000               	movlw	0
 10049  01EC  00AC               	movwf	___wmul@multiplicand+1
 10050  01ED  31A4  247E  3180   	fcall	___wmul
 10051  01F0  0020               	movlb	0	; select bank0
 10052  01F1  082A               	movf	?___wmul+1,w
 10053  01F2  0085               	movwf	5
 10054  01F3  0829               	movf	?___wmul,w
 10055  01F4  0084               	movwf	4
 10056  01F5  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10057  01F6  0784               	addwf	4,f
 10058  01F7  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10059  01F8  3D85               	addwfc	5,f
 10060  01F9  0800               	movf	0,w	;code access
 10061  01FA  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10062  01FB  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10063  01FC  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10064                           
 10065                           ;clockLEDs.c: 543:         WS2812b_SetSinglePixelColor( &ledArray,
 10066  01FD  3062               	movlw	low _ledArray
 10067  01FE  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10068  01FF  3000               	movlw	high _ledArray
 10069  0200  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10070  0201  0021               	movlb	1	; select bank1
 10071  0202  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10072  0203  0085               	movwf	5
 10073  0204  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10074  0205  0084               	movwf	4
 10075  0206  3077               	movlw	low ((_row4+65535)| (0+32768))
 10076  0207  0784               	addwf	4,f
 10077  0208  30A8               	movlw	high ((_row4+65535)| (0+32768))
 10078  0209  2C13               	goto	L6
 10079  020A                     l5464:	
 10080                           ;clockLEDs.c: 548:     }
 10081                           
 10082                           
 10083                           ;clockLEDs.c: 552:     {;clockLEDs.c: 553:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10084  020A  0020               	movlb	0	; select bank0
 10085  020B  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10086  020C  00AA               	movwf	___wmul@multiplier+1
 10087  020D  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10088  020E  00A9               	movwf	___wmul@multiplier
 10089  020F  3003               	movlw	3
 10090  0210  00AB               	movwf	___wmul@multiplicand
 10091  0211  3000               	movlw	0
 10092  0212  00AC               	movwf	___wmul@multiplicand+1
 10093  0213  31A4  247E  3180   	fcall	___wmul
 10094  0216  0020               	movlb	0	; select bank0
 10095  0217  082A               	movf	?___wmul+1,w
 10096  0218  0085               	movwf	5
 10097  0219  0829               	movf	?___wmul,w
 10098  021A  0084               	movwf	4
 10099  021B  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10100  021C  0784               	addwf	4,f
 10101  021D  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10102  021E  3D85               	addwfc	5,f
 10103  021F  0800               	movf	0,w	;code access
 10104  0220  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10105  0221  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10106  0222  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10107                           
 10108                           ;clockLEDs.c: 552:     {;clockLEDs.c: 553:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10109  0223  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10110  0224  00AA               	movwf	___wmul@multiplier+1
 10111  0225  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10112  0226  00A9               	movwf	___wmul@multiplier
 10113  0227  3003               	movlw	3
 10114  0228  00AB               	movwf	___wmul@multiplicand
 10115  0229  3000               	movlw	0
 10116  022A  00AC               	movwf	___wmul@multiplicand+1
 10117  022B  31A4  247E  3180   	fcall	___wmul
 10118  022E  0020               	movlb	0	; select bank0
 10119  022F  082A               	movf	?___wmul+1,w
 10120  0230  0085               	movwf	5
 10121  0231  0829               	movf	?___wmul,w
 10122  0232  0084               	movwf	4
 10123  0233  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10124  0234  0784               	addwf	4,f
 10125  0235  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10126  0236  3D85               	addwfc	5,f
 10127  0237  0800               	movf	0,w	;code access
 10128  0238  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10129  0239  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10130  023A  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10131                           
 10132                           ;clockLEDs.c: 552:     {;clockLEDs.c: 553:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10133  023B  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10134  023C  00AA               	movwf	___wmul@multiplier+1
 10135  023D  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10136  023E  00A9               	movwf	___wmul@multiplier
 10137  023F  3003               	movlw	3
 10138  0240  00AB               	movwf	___wmul@multiplicand
 10139  0241  3000               	movlw	0
 10140  0242  00AC               	movwf	___wmul@multiplicand+1
 10141  0243  31A4  247E  3180   	fcall	___wmul
 10142  0246  0020               	movlb	0	; select bank0
 10143  0247  082A               	movf	?___wmul+1,w
 10144  0248  0085               	movwf	5
 10145  0249  0829               	movf	?___wmul,w
 10146  024A  0084               	movwf	4
 10147  024B  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10148  024C  0784               	addwf	4,f
 10149  024D  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10150  024E  3D85               	addwfc	5,f
 10151  024F  0800               	movf	0,w	;code access
 10152  0250  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10153  0251  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10154  0252  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10155                           
 10156                           ;clockLEDs.c: 552:     {;clockLEDs.c: 553:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10157  0253  3062               	movlw	low _ledArray
 10158  0254  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10159  0255  3000               	movlw	high _ledArray
 10160  0256  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10161  0257  0021               	movlb	1	; select bank1
 10162  0258  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10163  0259  0085               	movwf	5
 10164  025A  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10165  025B  0084               	movwf	4
 10166  025C  309C               	movlw	low ((_row1+65534)| (0+32768))
 10167  025D  0784               	addwf	4,f
 10168  025E  30A8               	movlw	high ((_row1+65534)| (0+32768))
 10169  025F  3D85               	addwfc	5,f
 10170  0260  0800               	movf	0,w	;code access
 10171  0261  0020               	movlb	0	; select bank0
 10172  0262  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10173  0263  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
 10174  0264  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10175  0265  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10176  0266  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
 10177  0267  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10178  0268  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
 10179  0269  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
 10180  026A  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
 10181  026B  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10182  026C  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
 10183  026D  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
 10184  026E  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
 10185  026F  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10186  0270  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
 10187  0271  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
 10188  0272  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
 10189  0273  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10190  0274  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
 10191                           
 10192                           ;clockLEDs.c: 558:         WS2812b_SetSinglePixelColor( &ledArray,
 10193  0277  0020               	movlb	0	; select bank0
 10194  0278  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10195  0279  00AA               	movwf	___wmul@multiplier+1
 10196  027A  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10197  027B  00A9               	movwf	___wmul@multiplier
 10198  027C  3003               	movlw	3
 10199  027D  00AB               	movwf	___wmul@multiplicand
 10200  027E  3000               	movlw	0
 10201  027F  00AC               	movwf	___wmul@multiplicand+1
 10202  0280  31A4  247E  3180   	fcall	___wmul
 10203  0283  0020               	movlb	0	; select bank0
 10204  0284  082A               	movf	?___wmul+1,w
 10205  0285  0085               	movwf	5
 10206  0286  0829               	movf	?___wmul,w
 10207  0287  0084               	movwf	4
 10208  0288  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10209  0289  0784               	addwf	4,f
 10210  028A  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10211  028B  3D85               	addwfc	5,f
 10212  028C  0800               	movf	0,w	;code access
 10213  028D  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10214  028E  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10215  028F  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10216                           
 10217                           ;clockLEDs.c: 558:         WS2812b_SetSinglePixelColor( &ledArray,
 10218  0290  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10219  0291  00AA               	movwf	___wmul@multiplier+1
 10220  0292  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10221  0293  00A9               	movwf	___wmul@multiplier
 10222  0294  3003               	movlw	3
 10223  0295  00AB               	movwf	___wmul@multiplicand
 10224  0296  3000               	movlw	0
 10225  0297  00AC               	movwf	___wmul@multiplicand+1
 10226  0298  31A4  247E  3180   	fcall	___wmul
 10227  029B  0020               	movlb	0	; select bank0
 10228  029C  082A               	movf	?___wmul+1,w
 10229  029D  0085               	movwf	5
 10230  029E  0829               	movf	?___wmul,w
 10231  029F  0084               	movwf	4
 10232  02A0  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10233  02A1  0784               	addwf	4,f
 10234  02A2  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10235  02A3  3D85               	addwfc	5,f
 10236  02A4  0800               	movf	0,w	;code access
 10237  02A5  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10238  02A6  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10239  02A7  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10240                           
 10241                           ;clockLEDs.c: 558:         WS2812b_SetSinglePixelColor( &ledArray,
 10242  02A8  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10243  02A9  00AA               	movwf	___wmul@multiplier+1
 10244  02AA  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10245  02AB  00A9               	movwf	___wmul@multiplier
 10246  02AC  3003               	movlw	3
 10247  02AD  00AB               	movwf	___wmul@multiplicand
 10248  02AE  3000               	movlw	0
 10249  02AF  00AC               	movwf	___wmul@multiplicand+1
 10250  02B0  31A4  247E  3180   	fcall	___wmul
 10251  02B3  0020               	movlb	0	; select bank0
 10252  02B4  082A               	movf	?___wmul+1,w
 10253  02B5  0085               	movwf	5
 10254  02B6  0829               	movf	?___wmul,w
 10255  02B7  0084               	movwf	4
 10256  02B8  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10257  02B9  0784               	addwf	4,f
 10258  02BA  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10259  02BB  3D85               	addwfc	5,f
 10260  02BC  0800               	movf	0,w	;code access
 10261  02BD  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10262  02BE  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10263  02BF  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10264                           
 10265                           ;clockLEDs.c: 558:         WS2812b_SetSinglePixelColor( &ledArray,
 10266  02C0  3062               	movlw	low _ledArray
 10267  02C1  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10268  02C2  3000               	movlw	high _ledArray
 10269  02C3  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10270  02C4  0021               	movlb	1	; select bank1
 10271  02C5  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10272  02C6  0085               	movwf	5
 10273  02C7  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10274  02C8  0084               	movwf	4
 10275  02C9  3084               	movlw	low ((_row2+65535)| (0+32768))
 10276  02CA  0784               	addwf	4,f
 10277  02CB  30A8               	movlw	high ((_row2+65535)| (0+32768))
 10278  02CC  3D85               	addwfc	5,f
 10279  02CD  0800               	movf	0,w	;code access
 10280  02CE  0020               	movlb	0	; select bank0
 10281  02CF  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10282  02D0  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
 10283  02D1  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10284  02D2  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10285  02D3  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
 10286  02D4  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10287  02D5  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
 10288  02D6  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
 10289  02D7  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
 10290  02D8  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10291  02D9  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
 10292  02DA  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
 10293  02DB  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
 10294  02DC  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10295  02DD  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
 10296  02DE  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
 10297  02DF  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
 10298  02E0  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10299  02E1  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
 10300                           
 10301                           ;clockLEDs.c: 563:         WS2812b_SetSinglePixelColor( &ledArray,
 10302  02E4  0020               	movlb	0	; select bank0
 10303  02E5  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10304  02E6  00AA               	movwf	___wmul@multiplier+1
 10305  02E7  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10306  02E8  00A9               	movwf	___wmul@multiplier
 10307  02E9  3003               	movlw	3
 10308  02EA  00AB               	movwf	___wmul@multiplicand
 10309  02EB  3000               	movlw	0
 10310  02EC  00AC               	movwf	___wmul@multiplicand+1
 10311  02ED  31A4  247E  3180   	fcall	___wmul
 10312  02F0  0020               	movlb	0	; select bank0
 10313  02F1  082A               	movf	?___wmul+1,w
 10314  02F2  0085               	movwf	5
 10315  02F3  0829               	movf	?___wmul,w
 10316  02F4  0084               	movwf	4
 10317  02F5  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10318  02F6  0784               	addwf	4,f
 10319  02F7  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10320  02F8  3D85               	addwfc	5,f
 10321  02F9  0800               	movf	0,w	;code access
 10322  02FA  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10323  02FB  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10324  02FC  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10325                           
 10326                           ;clockLEDs.c: 563:         WS2812b_SetSinglePixelColor( &ledArray,
 10327  02FD  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10328  02FE  00AA               	movwf	___wmul@multiplier+1
 10329  02FF  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10330  0300  00A9               	movwf	___wmul@multiplier
 10331  0301  3003               	movlw	3
 10332  0302  00AB               	movwf	___wmul@multiplicand
 10333  0303  3000               	movlw	0
 10334  0304  00AC               	movwf	___wmul@multiplicand+1
 10335  0305  31A4  247E  3180   	fcall	___wmul
 10336  0308  0020               	movlb	0	; select bank0
 10337  0309  082A               	movf	?___wmul+1,w
 10338  030A  0085               	movwf	5
 10339  030B  0829               	movf	?___wmul,w
 10340  030C  0084               	movwf	4
 10341  030D  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10342  030E  0784               	addwf	4,f
 10343  030F  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10344  0310  3D85               	addwfc	5,f
 10345  0311  0800               	movf	0,w	;code access
 10346  0312  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10347  0313  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10348  0314  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10349                           
 10350                           ;clockLEDs.c: 563:         WS2812b_SetSinglePixelColor( &ledArray,
 10351  0315  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10352  0316  00AA               	movwf	___wmul@multiplier+1
 10353  0317  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10354  0318  00A9               	movwf	___wmul@multiplier
 10355  0319  3003               	movlw	3
 10356  031A  00AB               	movwf	___wmul@multiplicand
 10357  031B  3000               	movlw	0
 10358  031C  00AC               	movwf	___wmul@multiplicand+1
 10359  031D  31A4  247E  3180   	fcall	___wmul
 10360  0320  0020               	movlb	0	; select bank0
 10361  0321  082A               	movf	?___wmul+1,w
 10362  0322  0085               	movwf	5
 10363  0323  0829               	movf	?___wmul,w
 10364  0324  0084               	movwf	4
 10365  0325  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10366  0326  0784               	addwf	4,f
 10367  0327  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10368  0328  3D85               	addwfc	5,f
 10369  0329  0800               	movf	0,w	;code access
 10370  032A  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10371  032B  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10372  032C  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10373                           
 10374                           ;clockLEDs.c: 563:         WS2812b_SetSinglePixelColor( &ledArray,
 10375  032D  3062               	movlw	low _ledArray
 10376  032E  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10377  032F  3000               	movlw	high _ledArray
 10378  0330  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10379  0331  0021               	movlb	1	; select bank1
 10380  0332  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10381  0333  0085               	movwf	5
 10382  0334  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10383  0335  0084               	movwf	4
 10384  0336  306A               	movlw	low (_row3| (0+32768))
 10385  0337  0784               	addwf	4,f
 10386  0338  30A8               	movlw	high (_row3| (0+32768))
 10387  0339  3D85               	addwfc	5,f
 10388  033A  0800               	movf	0,w	;code access
 10389  033B  0020               	movlb	0	; select bank0
 10390  033C  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10391  033D  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
 10392  033E  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10393  033F  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10394  0340  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
 10395  0341  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10396  0342  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
 10397  0343  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
 10398  0344  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
 10399  0345  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10400  0346  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
 10401  0347  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
 10402  0348  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
 10403  0349  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10404  034A  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
 10405  034B  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
 10406  034C  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
 10407  034D  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10408  034E  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
 10409                           
 10410                           ;clockLEDs.c: 568:         WS2812b_SetSinglePixelColor( &ledArray,
 10411  0351  0020               	movlb	0	; select bank0
 10412  0352  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10413  0353  00AA               	movwf	___wmul@multiplier+1
 10414  0354  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10415  0355  00A9               	movwf	___wmul@multiplier
 10416  0356  3003               	movlw	3
 10417  0357  00AB               	movwf	___wmul@multiplicand
 10418  0358  3000               	movlw	0
 10419  0359  00AC               	movwf	___wmul@multiplicand+1
 10420  035A  31A4  247E  3180   	fcall	___wmul
 10421  035D  0020               	movlb	0	; select bank0
 10422  035E  082A               	movf	?___wmul+1,w
 10423  035F  0085               	movwf	5
 10424  0360  0829               	movf	?___wmul,w
 10425  0361  0084               	movwf	4
 10426  0362  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10427  0363  0784               	addwf	4,f
 10428  0364  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10429  0365  3D85               	addwfc	5,f
 10430  0366  0800               	movf	0,w	;code access
 10431  0367  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10432  0368  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10433  0369  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10434                           
 10435                           ;clockLEDs.c: 568:         WS2812b_SetSinglePixelColor( &ledArray,
 10436  036A  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10437  036B  00AA               	movwf	___wmul@multiplier+1
 10438  036C  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10439  036D  00A9               	movwf	___wmul@multiplier
 10440  036E  3003               	movlw	3
 10441  036F  00AB               	movwf	___wmul@multiplicand
 10442  0370  3000               	movlw	0
 10443  0371  00AC               	movwf	___wmul@multiplicand+1
 10444  0372  31A4  247E  3180   	fcall	___wmul
 10445  0375  0020               	movlb	0	; select bank0
 10446  0376  082A               	movf	?___wmul+1,w
 10447  0377  0085               	movwf	5
 10448  0378  0829               	movf	?___wmul,w
 10449  0379  0084               	movwf	4
 10450  037A  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10451  037B  0784               	addwf	4,f
 10452  037C  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10453  037D  3D85               	addwfc	5,f
 10454  037E  0800               	movf	0,w	;code access
 10455  037F  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10456  0380  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10457  0381  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10458                           
 10459                           ;clockLEDs.c: 568:         WS2812b_SetSinglePixelColor( &ledArray,
 10460  0382  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10461  0383  00AA               	movwf	___wmul@multiplier+1
 10462  0384  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10463  0385  00A9               	movwf	___wmul@multiplier
 10464  0386  3003               	movlw	3
 10465  0387  00AB               	movwf	___wmul@multiplicand
 10466  0388  3000               	movlw	0
 10467  0389  00AC               	movwf	___wmul@multiplicand+1
 10468  038A  31A4  247E  3180   	fcall	___wmul
 10469  038D  0020               	movlb	0	; select bank0
 10470  038E  082A               	movf	?___wmul+1,w
 10471  038F  0085               	movwf	5
 10472  0390  0829               	movf	?___wmul,w
 10473  0391  0084               	movwf	4
 10474  0392  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10475  0393  0784               	addwf	4,f
 10476  0394  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10477  0395  3D85               	addwfc	5,f
 10478  0396  0800               	movf	0,w	;code access
 10479  0397  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10480  0398  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10481  0399  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10482                           
 10483                           ;clockLEDs.c: 568:         WS2812b_SetSinglePixelColor( &ledArray,
 10484  039A  3062               	movlw	low _ledArray
 10485  039B  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10486  039C  3000               	movlw	high _ledArray
 10487  039D  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10488  039E  0021               	movlb	1	; select bank1
 10489  039F  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10490  03A0  0085               	movwf	5
 10491  03A1  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10492  03A2  0084               	movwf	4
 10493  03A3  3077               	movlw	low ((_row4+65535)| (0+32768))
 10494  03A4  0784               	addwf	4,f
 10495  03A5  30A8               	movlw	high ((_row4+65535)| (0+32768))
 10496  03A6  3D85               	addwfc	5,f
 10497  03A7  0800               	movf	0,w	;code access
 10498  03A8  0020               	movlb	0	; select bank0
 10499  03A9  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10500  03AA  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
 10501  03AB  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10502  03AC  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10503  03AD  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
 10504  03AE  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10505  03AF  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
 10506  03B0  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
 10507  03B1  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
 10508  03B2  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10509  03B3  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
 10510  03B4  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
 10511  03B5  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
 10512  03B6  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10513  03B7  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
 10514  03B8  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
 10515  03B9  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
 10516  03BA  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10517  03BB  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
 10518                           
 10519                           ;clockLEDs.c: 573:         WS2812b_SetSinglePixelColor( &ledArray,
 10520  03BE  0020               	movlb	0	; select bank0
 10521  03BF  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10522  03C0  00AA               	movwf	___wmul@multiplier+1
 10523  03C1  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10524  03C2  00A9               	movwf	___wmul@multiplier
 10525  03C3  3003               	movlw	3
 10526  03C4  00AB               	movwf	___wmul@multiplicand
 10527  03C5  3000               	movlw	0
 10528  03C6  00AC               	movwf	___wmul@multiplicand+1
 10529  03C7  31A4  247E  3180   	fcall	___wmul
 10530  03CA  0020               	movlb	0	; select bank0
 10531  03CB  082A               	movf	?___wmul+1,w
 10532  03CC  0085               	movwf	5
 10533  03CD  0829               	movf	?___wmul,w
 10534  03CE  0084               	movwf	4
 10535  03CF  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10536  03D0  0784               	addwf	4,f
 10537  03D1  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10538  03D2  3D85               	addwfc	5,f
 10539  03D3  0800               	movf	0,w	;code access
 10540  03D4  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10541  03D5  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10542  03D6  00D2               	movwf	_Clock_CrossingRainbowPatternwithDelays$2396
 10543                           
 10544                           ;clockLEDs.c: 573:         WS2812b_SetSinglePixelColor( &ledArray,
 10545  03D7  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10546  03D8  00AA               	movwf	___wmul@multiplier+1
 10547  03D9  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10548  03DA  00A9               	movwf	___wmul@multiplier
 10549  03DB  3003               	movlw	3
 10550  03DC  00AB               	movwf	___wmul@multiplicand
 10551  03DD  3000               	movlw	0
 10552  03DE  00AC               	movwf	___wmul@multiplicand+1
 10553  03DF  31A4  247E  3180   	fcall	___wmul
 10554  03E2  0020               	movlb	0	; select bank0
 10555  03E3  082A               	movf	?___wmul+1,w
 10556  03E4  0085               	movwf	5
 10557  03E5  0829               	movf	?___wmul,w
 10558  03E6  0084               	movwf	4
 10559  03E7  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10560  03E8  0784               	addwf	4,f
 10561  03E9  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10562  03EA  3D85               	addwfc	5,f
 10563  03EB  0800               	movf	0,w	;code access
 10564  03EC  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10565  03ED  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10566  03EE  00D3               	movwf	_Clock_CrossingRainbowPatternwithDelays$2397
 10567                           
 10568                           ;clockLEDs.c: 573:         WS2812b_SetSinglePixelColor( &ledArray,
 10569  03EF  085E               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10570  03F0  00AA               	movwf	___wmul@multiplier+1
 10571  03F1  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10572  03F2  00A9               	movwf	___wmul@multiplier
 10573  03F3  3003               	movlw	3
 10574  03F4  00AB               	movwf	___wmul@multiplicand
 10575  03F5  3000               	movlw	0
 10576  03F6  00AC               	movwf	___wmul@multiplicand+1
 10577  03F7  31A4  247E  3180   	fcall	___wmul
 10578  03FA  0020               	movlb	0	; select bank0
 10579  03FB  082A               	movf	?___wmul+1,w
 10580  03FC  0085               	movwf	5
 10581  03FD  0829               	movf	?___wmul,w
 10582  03FE  0084               	movwf	4
 10583  03FF  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10584  0400  0784               	addwf	4,f
 10585  0401  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10586  0402  3D85               	addwfc	5,f
 10587  0403  0800               	movf	0,w	;code access
 10588  0404  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10589  0405  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10590  0406  00D4               	movwf	_Clock_CrossingRainbowPatternwithDelays$2398
 10591                           
 10592                           ;clockLEDs.c: 573:         WS2812b_SetSinglePixelColor( &ledArray,
 10593  0407  3062               	movlw	low _ledArray
 10594  0408  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10595  0409  3000               	movlw	high _ledArray
 10596  040A  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10597  040B  0021               	movlb	1	; select bank1
 10598  040C  0844               	movf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10599  040D  0085               	movwf	5
 10600  040E  0843               	movf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10601  040F  0084               	movwf	4
 10602  0410  3090               	movlw	low ((_row5+65534)| (0+32768))
 10603  0411  0784               	addwf	4,f
 10604  0412  30A8               	movlw	high ((_row5+65534)| (0+32768))
 10605  0413                     L6:
 10606  0413  3D85               	addwfc	5,f
 10607  0414  0800               	movf	0,w	;code access
 10608  0415  0020               	movlb	0	; select bank0
 10609  0416  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10610  0417  01CE               	clrf	??_Clock_CrossingRainbowPatternwithDelays+1
 10611  0418  084D               	movf	??_Clock_CrossingRainbowPatternwithDelays,w
 10612  0419  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10613  041A  084E               	movf	??_Clock_CrossingRainbowPatternwithDelays+1,w
 10614  041B  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10615  041C  0852               	movf	_Clock_CrossingRainbowPatternwithDelays$2396,w
 10616  041D  00CF               	movwf	??_Clock_CrossingRainbowPatternwithDelays+2
 10617  041E  084F               	movf	??_Clock_CrossingRainbowPatternwithDelays+2,w
 10618  041F  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10619  0420  0853               	movf	_Clock_CrossingRainbowPatternwithDelays$2397,w
 10620  0421  00D0               	movwf	??_Clock_CrossingRainbowPatternwithDelays+3
 10621  0422  0850               	movf	??_Clock_CrossingRainbowPatternwithDelays+3,w
 10622  0423  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10623  0424  0854               	movf	_Clock_CrossingRainbowPatternwithDelays$2398,w
 10624  0425  00D1               	movwf	??_Clock_CrossingRainbowPatternwithDelays+4
 10625  0426  0851               	movf	??_Clock_CrossingRainbowPatternwithDelays+4,w
 10626  0427  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10627  0428  319B  2386  3180   	fcall	_WS2812b_SetSinglePixelColor
 10628                           
 10629                           ;clockLEDs.c: 583:     if( 13 == thisIndex )
 10630  042B  300D               	movlw	13
 10631  042C  0021               	movlb	1	; select bank1
 10632  042D  0643               	xorwf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),w
 10633  042E  0444               	iorwf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),w
 10634  042F  1D03               	btfss	3,2
 10635  0430  2C43               	goto	l5500
 10636                           
 10637                           ;clockLEDs.c: 584:     {;clockLEDs.c: 585:         thisIndex = 0;
 10638  0431  01C3               	clrf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128)
 10639  0432  01C4               	clrf	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128)
 10640                           
 10641                           ;clockLEDs.c: 586:         rainbowRowIdx = ( 5 == rainbowRowIdx ) ? 0 : rainbowRowIdx + 
      +                          1;
 10642  0433  3005               	movlw	5
 10643  0434  0020               	movlb	0	; select bank0
 10644  0435  065D               	xorwf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10645  0436  045E               	iorwf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10646  0437  1903               	btfsc	3,2
 10647  0438  2C40               	goto	l5498
 10648  0439  085D               	movf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx,w
 10649  043A  3E01               	addlw	1
 10650  043B  00DD               	movwf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx
 10651  043C  3000               	movlw	0
 10652  043D  3D5E               	addwfc	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1,w
 10653  043E  00DE               	movwf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1
 10654  043F  2C47               	goto	l5502
 10655  0440                     l5498:
 10656  0440  01DD               	clrf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx
 10657  0441  01DE               	clrf	Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx+1
 10658  0442  2C47               	goto	l5502
 10659  0443                     l5500:
 10660                           
 10661                           ;clockLEDs.c: 589:     {;clockLEDs.c: 590:         thisIndex++;
 10662  0443  3001               	movlw	1
 10663  0444  07C3               	addwf	Clock_CrossingRainbowPatternwithDelays@thisIndex^(0+128),f
 10664  0445  3000               	movlw	0
 10665  0446  3DC4               	addwfc	(Clock_CrossingRainbowPatternwithDelays@thisIndex+1)^(0+128),f
 10666  0447                     l5502:
 10667                           
 10668                           ;clockLEDs.c: 592:     WS2812B_Render( &ledArray );
 10669  0447  3062               	movlw	low _ledArray
 10670  0448  0020               	movlb	0	; select bank0
 10671  0449  00A9               	movwf	WS2812B_Render@strip
 10672  044A  3000               	movlw	high _ledArray
 10673  044B  00AA               	movwf	WS2812B_Render@strip+1
 10674  044C  3190  2031  3180   	fcall	_WS2812B_Render
 10675                           
 10676                           ;clockLEDs.c: 593:     _delay((unsigned long)((75)*(32000000u/4000.0)));
 10677  044F  3004               	movlw	4
 10678  0450  0020               	movlb	0	; select bank0
 10679  0451  00CE               	movwf	??_Clock_CrossingRainbowPatternwithDelays+1
 10680  0452  300C               	movlw	12
 10681  0453  00CD               	movwf	??_Clock_CrossingRainbowPatternwithDelays
 10682  0454  3033               	movlw	51
 10683  0455                     u4937:
 10684  0455  0B89               	decfsz	9,f
 10685  0456  2C55               	goto	u4937
 10686  0457  0BCD               	decfsz	??_Clock_CrossingRainbowPatternwithDelays,f
 10687  0458  2C55               	goto	u4937
 10688  0459  0BCE               	decfsz	??_Clock_CrossingRainbowPatternwithDelays+1,f
 10689  045A  2C55               	goto	u4937
 10690  045B  3200               	nop2
 10691  045C  0008               	return
 10692  045D                     __end_of_Clock_CrossingRainbowPatternwithDelays:
 10693                           
 10694                           	psect	text14
 10695  0C3E                     __ptext14:	
 10696 ;; *************** function _Clock_CrossingRainbowPattern *****************
 10697 ;; Defined at:
 10698 ;;		line 425 in file "clockLEDs.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;		None
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10713 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10714 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10715 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10716 ;;Total ram usage:        8 bytes
 10717 ;; Hardware stack levels used: 1
 10718 ;; Hardware stack levels required when called: 7
 10719 ;; This function calls:
 10720 ;;		_WS2812B_Render
 10721 ;;		_WS2812b_SetSinglePixelColor
 10722 ;;		___wmul
 10723 ;; This function is called by:
 10724 ;;		_State_SetFunctionLookupTable
 10725 ;;		_STATE_PatternMode
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729  0C3E                     _Clock_CrossingRainbowPattern:	
 10730                           ;psect for function _Clock_CrossingRainbowPattern
 10731                           
 10732                           
 10733                           ;clockLEDs.c: 430:     static size_t thisIndex = 0;;clockLEDs.c: 431:     static size_t 
      +                          rainbowRowIdx = 0;;clockLEDs.c: 435:     if( 0 == thisIndex )
 10734                           
 10735                           ;incstack = 0
 10736                           ; Regs used in _Clock_CrossingRainbowPattern: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10737  0C3E  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 10738  0C3F  047C               	iorwf	Clock_CrossingRainbowPattern@thisIndex+1,w
 10739  0C40  1D03               	btfss	3,2
 10740  0C41  2C97               	goto	l5376
 10741                           
 10742                           ;clockLEDs.c: 436:     {;clockLEDs.c: 437:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10743  0C42  0020               	movlb	0	; select bank0
 10744  0C43  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10745  0C44  00AA               	movwf	___wmul@multiplier+1
 10746  0C45  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10747  0C46  00A9               	movwf	___wmul@multiplier
 10748  0C47  3003               	movlw	3
 10749  0C48  00AB               	movwf	___wmul@multiplicand
 10750  0C49  3000               	movlw	0
 10751  0C4A  00AC               	movwf	___wmul@multiplicand+1
 10752  0C4B  31A4  247E  318C   	fcall	___wmul
 10753  0C4E  0020               	movlb	0	; select bank0
 10754  0C4F  082A               	movf	?___wmul+1,w
 10755  0C50  0085               	movwf	5
 10756  0C51  0829               	movf	?___wmul,w
 10757  0C52  0084               	movwf	4
 10758  0C53  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10759  0C54  0784               	addwf	4,f
 10760  0C55  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10761  0C56  3D85               	addwfc	5,f
 10762  0C57  0800               	movf	0,w	;code access
 10763  0C58  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10764  0C59  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10765  0C5A  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 10766                           
 10767                           ;clockLEDs.c: 436:     {;clockLEDs.c: 437:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10768  0C5B  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10769  0C5C  00AA               	movwf	___wmul@multiplier+1
 10770  0C5D  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10771  0C5E  00A9               	movwf	___wmul@multiplier
 10772  0C5F  3003               	movlw	3
 10773  0C60  00AB               	movwf	___wmul@multiplicand
 10774  0C61  3000               	movlw	0
 10775  0C62  00AC               	movwf	___wmul@multiplicand+1
 10776  0C63  31A4  247E  318C   	fcall	___wmul
 10777  0C66  0020               	movlb	0	; select bank0
 10778  0C67  082A               	movf	?___wmul+1,w
 10779  0C68  0085               	movwf	5
 10780  0C69  0829               	movf	?___wmul,w
 10781  0C6A  0084               	movwf	4
 10782  0C6B  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10783  0C6C  0784               	addwf	4,f
 10784  0C6D  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10785  0C6E  3D85               	addwfc	5,f
 10786  0C6F  0800               	movf	0,w	;code access
 10787  0C70  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10788  0C71  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10789  0C72  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 10790                           
 10791                           ;clockLEDs.c: 436:     {;clockLEDs.c: 437:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10792  0C73  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10793  0C74  00AA               	movwf	___wmul@multiplier+1
 10794  0C75  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10795  0C76  00A9               	movwf	___wmul@multiplier
 10796  0C77  3003               	movlw	3
 10797  0C78  00AB               	movwf	___wmul@multiplicand
 10798  0C79  3000               	movlw	0
 10799  0C7A  00AC               	movwf	___wmul@multiplicand+1
 10800  0C7B  31A4  247E  318C   	fcall	___wmul
 10801  0C7E  0020               	movlb	0	; select bank0
 10802  0C7F  082A               	movf	?___wmul+1,w
 10803  0C80  0085               	movwf	5
 10804  0C81  0829               	movf	?___wmul,w
 10805  0C82  0084               	movwf	4
 10806  0C83  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10807  0C84  0784               	addwf	4,f
 10808  0C85  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10809  0C86  3D85               	addwfc	5,f
 10810  0C87  0800               	movf	0,w	;code access
 10811  0C88  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10812  0C89  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10813  0C8A  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 10814                           
 10815                           ;clockLEDs.c: 436:     {;clockLEDs.c: 437:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10816  0C8B  3062               	movlw	low _ledArray
 10817  0C8C  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10818  0C8D  3000               	movlw	high _ledArray
 10819  0C8E  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10820  0C8F  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 10821  0C90  0085               	movwf	5
 10822  0C91  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 10823  0C92  0084               	movwf	4
 10824  0C93  306A               	movlw	low (_row3| (0+32768))
 10825  0C94  0784               	addwf	4,f
 10826  0C95  30A8               	movlw	high (_row3| (0+32768))
 10827  0C96  2FC6               	goto	L7
 10828  0C97                     l5376:	
 10829                           ;clockLEDs.c: 442:     }
 10830                           
 10831  0C97  037B               	decf	Clock_CrossingRainbowPattern@thisIndex,w
 10832  0C98  047C               	iorwf	Clock_CrossingRainbowPattern@thisIndex+1,w
 10833  0C99  1D03               	btfss	3,2
 10834  0C9A  2DC6               	goto	l5396
 10835                           
 10836                           ;clockLEDs.c: 446:     {;clockLEDs.c: 447:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10837  0C9B  0020               	movlb	0	; select bank0
 10838  0C9C  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10839  0C9D  00AA               	movwf	___wmul@multiplier+1
 10840  0C9E  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10841  0C9F  00A9               	movwf	___wmul@multiplier
 10842  0CA0  3003               	movlw	3
 10843  0CA1  00AB               	movwf	___wmul@multiplicand
 10844  0CA2  3000               	movlw	0
 10845  0CA3  00AC               	movwf	___wmul@multiplicand+1
 10846  0CA4  31A4  247E  318C   	fcall	___wmul
 10847  0CA7  0020               	movlb	0	; select bank0
 10848  0CA8  082A               	movf	?___wmul+1,w
 10849  0CA9  0085               	movwf	5
 10850  0CAA  0829               	movf	?___wmul,w
 10851  0CAB  0084               	movwf	4
 10852  0CAC  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10853  0CAD  0784               	addwf	4,f
 10854  0CAE  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10855  0CAF  3D85               	addwfc	5,f
 10856  0CB0  0800               	movf	0,w	;code access
 10857  0CB1  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10858  0CB2  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10859  0CB3  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 10860                           
 10861                           ;clockLEDs.c: 446:     {;clockLEDs.c: 447:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10862  0CB4  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10863  0CB5  00AA               	movwf	___wmul@multiplier+1
 10864  0CB6  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10865  0CB7  00A9               	movwf	___wmul@multiplier
 10866  0CB8  3003               	movlw	3
 10867  0CB9  00AB               	movwf	___wmul@multiplicand
 10868  0CBA  3000               	movlw	0
 10869  0CBB  00AC               	movwf	___wmul@multiplicand+1
 10870  0CBC  31A4  247E  318C   	fcall	___wmul
 10871  0CBF  0020               	movlb	0	; select bank0
 10872  0CC0  082A               	movf	?___wmul+1,w
 10873  0CC1  0085               	movwf	5
 10874  0CC2  0829               	movf	?___wmul,w
 10875  0CC3  0084               	movwf	4
 10876  0CC4  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10877  0CC5  0784               	addwf	4,f
 10878  0CC6  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10879  0CC7  3D85               	addwfc	5,f
 10880  0CC8  0800               	movf	0,w	;code access
 10881  0CC9  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10882  0CCA  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10883  0CCB  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 10884                           
 10885                           ;clockLEDs.c: 446:     {;clockLEDs.c: 447:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10886  0CCC  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10887  0CCD  00AA               	movwf	___wmul@multiplier+1
 10888  0CCE  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10889  0CCF  00A9               	movwf	___wmul@multiplier
 10890  0CD0  3003               	movlw	3
 10891  0CD1  00AB               	movwf	___wmul@multiplicand
 10892  0CD2  3000               	movlw	0
 10893  0CD3  00AC               	movwf	___wmul@multiplicand+1
 10894  0CD4  31A4  247E  318C   	fcall	___wmul
 10895  0CD7  0020               	movlb	0	; select bank0
 10896  0CD8  082A               	movf	?___wmul+1,w
 10897  0CD9  0085               	movwf	5
 10898  0CDA  0829               	movf	?___wmul,w
 10899  0CDB  0084               	movwf	4
 10900  0CDC  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 10901  0CDD  0784               	addwf	4,f
 10902  0CDE  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 10903  0CDF  3D85               	addwfc	5,f
 10904  0CE0  0800               	movf	0,w	;code access
 10905  0CE1  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10906  0CE2  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10907  0CE3  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 10908                           
 10909                           ;clockLEDs.c: 446:     {;clockLEDs.c: 447:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 10910  0CE4  3062               	movlw	low _ledArray
 10911  0CE5  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 10912  0CE6  3000               	movlw	high _ledArray
 10913  0CE7  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 10914  0CE8  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 10915  0CE9  0085               	movwf	5
 10916  0CEA  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 10917  0CEB  0084               	movwf	4
 10918  0CEC  3084               	movlw	low ((_row2+65535)| (0+32768))
 10919  0CED  0784               	addwf	4,f
 10920  0CEE  30A8               	movlw	high ((_row2+65535)| (0+32768))
 10921  0CEF  3D85               	addwfc	5,f
 10922  0CF0  0800               	movf	0,w	;code access
 10923  0CF1  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10924  0CF2  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 10925  0CF3  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10926  0CF4  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 10927  0CF5  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 10928  0CF6  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 10929  0CF7  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 10930  0CF8  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 10931  0CF9  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 10932  0CFA  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 10933  0CFB  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 10934  0CFC  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 10935  0CFD  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 10936  0CFE  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 10937  0CFF  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 10938  0D00  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 10939  0D01  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 10940  0D02  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 10941  0D03  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 10942                           
 10943                           ;clockLEDs.c: 452:         WS2812b_SetSinglePixelColor( &ledArray,
 10944  0D06  0020               	movlb	0	; select bank0
 10945  0D07  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10946  0D08  00AA               	movwf	___wmul@multiplier+1
 10947  0D09  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10948  0D0A  00A9               	movwf	___wmul@multiplier
 10949  0D0B  3003               	movlw	3
 10950  0D0C  00AB               	movwf	___wmul@multiplicand
 10951  0D0D  3000               	movlw	0
 10952  0D0E  00AC               	movwf	___wmul@multiplicand+1
 10953  0D0F  31A4  247E  318C   	fcall	___wmul
 10954  0D12  0020               	movlb	0	; select bank0
 10955  0D13  082A               	movf	?___wmul+1,w
 10956  0D14  0085               	movwf	5
 10957  0D15  0829               	movf	?___wmul,w
 10958  0D16  0084               	movwf	4
 10959  0D17  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 10960  0D18  0784               	addwf	4,f
 10961  0D19  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 10962  0D1A  3D85               	addwfc	5,f
 10963  0D1B  0800               	movf	0,w	;code access
 10964  0D1C  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10965  0D1D  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10966  0D1E  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 10967                           
 10968                           ;clockLEDs.c: 452:         WS2812b_SetSinglePixelColor( &ledArray,
 10969  0D1F  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10970  0D20  00AA               	movwf	___wmul@multiplier+1
 10971  0D21  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10972  0D22  00A9               	movwf	___wmul@multiplier
 10973  0D23  3003               	movlw	3
 10974  0D24  00AB               	movwf	___wmul@multiplicand
 10975  0D25  3000               	movlw	0
 10976  0D26  00AC               	movwf	___wmul@multiplicand+1
 10977  0D27  31A4  247E  318C   	fcall	___wmul
 10978  0D2A  0020               	movlb	0	; select bank0
 10979  0D2B  082A               	movf	?___wmul+1,w
 10980  0D2C  0085               	movwf	5
 10981  0D2D  0829               	movf	?___wmul,w
 10982  0D2E  0084               	movwf	4
 10983  0D2F  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 10984  0D30  0784               	addwf	4,f
 10985  0D31  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 10986  0D32  3D85               	addwfc	5,f
 10987  0D33  0800               	movf	0,w	;code access
 10988  0D34  00CD               	movwf	??_Clock_CrossingRainbowPattern
 10989  0D35  084D               	movf	??_Clock_CrossingRainbowPattern,w
 10990  0D36  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 10991                           
 10992                           ;clockLEDs.c: 452:         WS2812b_SetSinglePixelColor( &ledArray,
 10993  0D37  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 10994  0D38  00AA               	movwf	___wmul@multiplier+1
 10995  0D39  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 10996  0D3A  00A9               	movwf	___wmul@multiplier
 10997  0D3B  3003               	movlw	3
 10998  0D3C  00AB               	movwf	___wmul@multiplicand
 10999  0D3D  3000               	movlw	0
 11000  0D3E  00AC               	movwf	___wmul@multiplicand+1
 11001  0D3F  31A4  247E  318C   	fcall	___wmul
 11002  0D42  0020               	movlb	0	; select bank0
 11003  0D43  082A               	movf	?___wmul+1,w
 11004  0D44  0085               	movwf	5
 11005  0D45  0829               	movf	?___wmul,w
 11006  0D46  0084               	movwf	4
 11007  0D47  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11008  0D48  0784               	addwf	4,f
 11009  0D49  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11010  0D4A  3D85               	addwfc	5,f
 11011  0D4B  0800               	movf	0,w	;code access
 11012  0D4C  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11013  0D4D  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11014  0D4E  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11015                           
 11016                           ;clockLEDs.c: 452:         WS2812b_SetSinglePixelColor( &ledArray,
 11017  0D4F  3062               	movlw	low _ledArray
 11018  0D50  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11019  0D51  3000               	movlw	high _ledArray
 11020  0D52  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11021  0D53  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11022  0D54  0085               	movwf	5
 11023  0D55  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11024  0D56  0084               	movwf	4
 11025  0D57  306A               	movlw	low (_row3| (0+32768))
 11026  0D58  0784               	addwf	4,f
 11027  0D59  30A8               	movlw	high (_row3| (0+32768))
 11028  0D5A  3D85               	addwfc	5,f
 11029  0D5B  0800               	movf	0,w	;code access
 11030  0D5C  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11031  0D5D  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11032  0D5E  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11033  0D5F  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11034  0D60  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11035  0D61  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11036  0D62  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11037  0D63  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11038  0D64  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11039  0D65  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11040  0D66  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11041  0D67  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11042  0D68  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11043  0D69  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11044  0D6A  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11045  0D6B  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11046  0D6C  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11047  0D6D  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11048  0D6E  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11049                           
 11050                           ;clockLEDs.c: 457:         WS2812b_SetSinglePixelColor( &ledArray,
 11051  0D71  0020               	movlb	0	; select bank0
 11052  0D72  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11053  0D73  00AA               	movwf	___wmul@multiplier+1
 11054  0D74  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11055  0D75  00A9               	movwf	___wmul@multiplier
 11056  0D76  3003               	movlw	3
 11057  0D77  00AB               	movwf	___wmul@multiplicand
 11058  0D78  3000               	movlw	0
 11059  0D79  00AC               	movwf	___wmul@multiplicand+1
 11060  0D7A  31A4  247E  318C   	fcall	___wmul
 11061  0D7D  0020               	movlb	0	; select bank0
 11062  0D7E  082A               	movf	?___wmul+1,w
 11063  0D7F  0085               	movwf	5
 11064  0D80  0829               	movf	?___wmul,w
 11065  0D81  0084               	movwf	4
 11066  0D82  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11067  0D83  0784               	addwf	4,f
 11068  0D84  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11069  0D85  3D85               	addwfc	5,f
 11070  0D86  0800               	movf	0,w	;code access
 11071  0D87  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11072  0D88  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11073  0D89  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11074                           
 11075                           ;clockLEDs.c: 457:         WS2812b_SetSinglePixelColor( &ledArray,
 11076  0D8A  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11077  0D8B  00AA               	movwf	___wmul@multiplier+1
 11078  0D8C  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11079  0D8D  00A9               	movwf	___wmul@multiplier
 11080  0D8E  3003               	movlw	3
 11081  0D8F  00AB               	movwf	___wmul@multiplicand
 11082  0D90  3000               	movlw	0
 11083  0D91  00AC               	movwf	___wmul@multiplicand+1
 11084  0D92  31A4  247E  318C   	fcall	___wmul
 11085  0D95  0020               	movlb	0	; select bank0
 11086  0D96  082A               	movf	?___wmul+1,w
 11087  0D97  0085               	movwf	5
 11088  0D98  0829               	movf	?___wmul,w
 11089  0D99  0084               	movwf	4
 11090  0D9A  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11091  0D9B  0784               	addwf	4,f
 11092  0D9C  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11093  0D9D  3D85               	addwfc	5,f
 11094  0D9E  0800               	movf	0,w	;code access
 11095  0D9F  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11096  0DA0  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11097  0DA1  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11098                           
 11099                           ;clockLEDs.c: 457:         WS2812b_SetSinglePixelColor( &ledArray,
 11100  0DA2  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11101  0DA3  00AA               	movwf	___wmul@multiplier+1
 11102  0DA4  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11103  0DA5  00A9               	movwf	___wmul@multiplier
 11104  0DA6  3003               	movlw	3
 11105  0DA7  00AB               	movwf	___wmul@multiplicand
 11106  0DA8  3000               	movlw	0
 11107  0DA9  00AC               	movwf	___wmul@multiplicand+1
 11108  0DAA  31A4  247E  318C   	fcall	___wmul
 11109  0DAD  0020               	movlb	0	; select bank0
 11110  0DAE  082A               	movf	?___wmul+1,w
 11111  0DAF  0085               	movwf	5
 11112  0DB0  0829               	movf	?___wmul,w
 11113  0DB1  0084               	movwf	4
 11114  0DB2  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11115  0DB3  0784               	addwf	4,f
 11116  0DB4  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11117  0DB5  3D85               	addwfc	5,f
 11118  0DB6  0800               	movf	0,w	;code access
 11119  0DB7  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11120  0DB8  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11121  0DB9  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11122                           
 11123                           ;clockLEDs.c: 457:         WS2812b_SetSinglePixelColor( &ledArray,
 11124  0DBA  3062               	movlw	low _ledArray
 11125  0DBB  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11126  0DBC  3000               	movlw	high _ledArray
 11127  0DBD  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11128  0DBE  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11129  0DBF  0085               	movwf	5
 11130  0DC0  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11131  0DC1  0084               	movwf	4
 11132  0DC2  3077               	movlw	low ((_row4+65535)| (0+32768))
 11133  0DC3  0784               	addwf	4,f
 11134  0DC4  30A8               	movlw	high ((_row4+65535)| (0+32768))
 11135  0DC5  2FC6               	goto	L7
 11136  0DC6                     l5396:	
 11137                           ;clockLEDs.c: 462:     }
 11138                           
 11139                           
 11140                           ;clockLEDs.c: 466:     {;clockLEDs.c: 467:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 11141  0DC6  0020               	movlb	0	; select bank0
 11142  0DC7  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11143  0DC8  00AA               	movwf	___wmul@multiplier+1
 11144  0DC9  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11145  0DCA  00A9               	movwf	___wmul@multiplier
 11146  0DCB  3003               	movlw	3
 11147  0DCC  00AB               	movwf	___wmul@multiplicand
 11148  0DCD  3000               	movlw	0
 11149  0DCE  00AC               	movwf	___wmul@multiplicand+1
 11150  0DCF  31A4  247E  318C   	fcall	___wmul
 11151  0DD2  0020               	movlb	0	; select bank0
 11152  0DD3  082A               	movf	?___wmul+1,w
 11153  0DD4  0085               	movwf	5
 11154  0DD5  0829               	movf	?___wmul,w
 11155  0DD6  0084               	movwf	4
 11156  0DD7  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11157  0DD8  0784               	addwf	4,f
 11158  0DD9  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11159  0DDA  3D85               	addwfc	5,f
 11160  0DDB  0800               	movf	0,w	;code access
 11161  0DDC  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11162  0DDD  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11163  0DDE  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11164                           
 11165                           ;clockLEDs.c: 466:     {;clockLEDs.c: 467:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 11166  0DDF  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11167  0DE0  00AA               	movwf	___wmul@multiplier+1
 11168  0DE1  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11169  0DE2  00A9               	movwf	___wmul@multiplier
 11170  0DE3  3003               	movlw	3
 11171  0DE4  00AB               	movwf	___wmul@multiplicand
 11172  0DE5  3000               	movlw	0
 11173  0DE6  00AC               	movwf	___wmul@multiplicand+1
 11174  0DE7  31A4  247E  318C   	fcall	___wmul
 11175  0DEA  0020               	movlb	0	; select bank0
 11176  0DEB  082A               	movf	?___wmul+1,w
 11177  0DEC  0085               	movwf	5
 11178  0DED  0829               	movf	?___wmul,w
 11179  0DEE  0084               	movwf	4
 11180  0DEF  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11181  0DF0  0784               	addwf	4,f
 11182  0DF1  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11183  0DF2  3D85               	addwfc	5,f
 11184  0DF3  0800               	movf	0,w	;code access
 11185  0DF4  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11186  0DF5  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11187  0DF6  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11188                           
 11189                           ;clockLEDs.c: 466:     {;clockLEDs.c: 467:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 11190  0DF7  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11191  0DF8  00AA               	movwf	___wmul@multiplier+1
 11192  0DF9  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11193  0DFA  00A9               	movwf	___wmul@multiplier
 11194  0DFB  3003               	movlw	3
 11195  0DFC  00AB               	movwf	___wmul@multiplicand
 11196  0DFD  3000               	movlw	0
 11197  0DFE  00AC               	movwf	___wmul@multiplicand+1
 11198  0DFF  31A4  247E  318C   	fcall	___wmul
 11199  0E02  0020               	movlb	0	; select bank0
 11200  0E03  082A               	movf	?___wmul+1,w
 11201  0E04  0085               	movwf	5
 11202  0E05  0829               	movf	?___wmul,w
 11203  0E06  0084               	movwf	4
 11204  0E07  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11205  0E08  0784               	addwf	4,f
 11206  0E09  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11207  0E0A  3D85               	addwfc	5,f
 11208  0E0B  0800               	movf	0,w	;code access
 11209  0E0C  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11210  0E0D  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11211  0E0E  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11212                           
 11213                           ;clockLEDs.c: 466:     {;clockLEDs.c: 467:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 11214  0E0F  3062               	movlw	low _ledArray
 11215  0E10  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11216  0E11  3000               	movlw	high _ledArray
 11217  0E12  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11218  0E13  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11219  0E14  0085               	movwf	5
 11220  0E15  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11221  0E16  0084               	movwf	4
 11222  0E17  309C               	movlw	low ((_row1+65534)| (0+32768))
 11223  0E18  0784               	addwf	4,f
 11224  0E19  30A8               	movlw	high ((_row1+65534)| (0+32768))
 11225  0E1A  3D85               	addwfc	5,f
 11226  0E1B  0800               	movf	0,w	;code access
 11227  0E1C  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11228  0E1D  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11229  0E1E  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11230  0E1F  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11231  0E20  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11232  0E21  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11233  0E22  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11234  0E23  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11235  0E24  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11236  0E25  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11237  0E26  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11238  0E27  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11239  0E28  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11240  0E29  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11241  0E2A  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11242  0E2B  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11243  0E2C  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11244  0E2D  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11245  0E2E  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11246                           
 11247                           ;clockLEDs.c: 472:         WS2812b_SetSinglePixelColor( &ledArray,
 11248  0E31  0020               	movlb	0	; select bank0
 11249  0E32  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11250  0E33  00AA               	movwf	___wmul@multiplier+1
 11251  0E34  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11252  0E35  00A9               	movwf	___wmul@multiplier
 11253  0E36  3003               	movlw	3
 11254  0E37  00AB               	movwf	___wmul@multiplicand
 11255  0E38  3000               	movlw	0
 11256  0E39  00AC               	movwf	___wmul@multiplicand+1
 11257  0E3A  31A4  247E  318C   	fcall	___wmul
 11258  0E3D  0020               	movlb	0	; select bank0
 11259  0E3E  082A               	movf	?___wmul+1,w
 11260  0E3F  0085               	movwf	5
 11261  0E40  0829               	movf	?___wmul,w
 11262  0E41  0084               	movwf	4
 11263  0E42  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11264  0E43  0784               	addwf	4,f
 11265  0E44  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11266  0E45  3D85               	addwfc	5,f
 11267  0E46  0800               	movf	0,w	;code access
 11268  0E47  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11269  0E48  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11270  0E49  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11271                           
 11272                           ;clockLEDs.c: 472:         WS2812b_SetSinglePixelColor( &ledArray,
 11273  0E4A  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11274  0E4B  00AA               	movwf	___wmul@multiplier+1
 11275  0E4C  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11276  0E4D  00A9               	movwf	___wmul@multiplier
 11277  0E4E  3003               	movlw	3
 11278  0E4F  00AB               	movwf	___wmul@multiplicand
 11279  0E50  3000               	movlw	0
 11280  0E51  00AC               	movwf	___wmul@multiplicand+1
 11281  0E52  31A4  247E  318C   	fcall	___wmul
 11282  0E55  0020               	movlb	0	; select bank0
 11283  0E56  082A               	movf	?___wmul+1,w
 11284  0E57  0085               	movwf	5
 11285  0E58  0829               	movf	?___wmul,w
 11286  0E59  0084               	movwf	4
 11287  0E5A  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11288  0E5B  0784               	addwf	4,f
 11289  0E5C  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11290  0E5D  3D85               	addwfc	5,f
 11291  0E5E  0800               	movf	0,w	;code access
 11292  0E5F  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11293  0E60  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11294  0E61  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11295                           
 11296                           ;clockLEDs.c: 472:         WS2812b_SetSinglePixelColor( &ledArray,
 11297  0E62  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11298  0E63  00AA               	movwf	___wmul@multiplier+1
 11299  0E64  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11300  0E65  00A9               	movwf	___wmul@multiplier
 11301  0E66  3003               	movlw	3
 11302  0E67  00AB               	movwf	___wmul@multiplicand
 11303  0E68  3000               	movlw	0
 11304  0E69  00AC               	movwf	___wmul@multiplicand+1
 11305  0E6A  31A4  247E  318C   	fcall	___wmul
 11306  0E6D  0020               	movlb	0	; select bank0
 11307  0E6E  082A               	movf	?___wmul+1,w
 11308  0E6F  0085               	movwf	5
 11309  0E70  0829               	movf	?___wmul,w
 11310  0E71  0084               	movwf	4
 11311  0E72  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11312  0E73  0784               	addwf	4,f
 11313  0E74  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11314  0E75  3D85               	addwfc	5,f
 11315  0E76  0800               	movf	0,w	;code access
 11316  0E77  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11317  0E78  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11318  0E79  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11319                           
 11320                           ;clockLEDs.c: 472:         WS2812b_SetSinglePixelColor( &ledArray,
 11321  0E7A  3062               	movlw	low _ledArray
 11322  0E7B  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11323  0E7C  3000               	movlw	high _ledArray
 11324  0E7D  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11325  0E7E  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11326  0E7F  0085               	movwf	5
 11327  0E80  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11328  0E81  0084               	movwf	4
 11329  0E82  3084               	movlw	low ((_row2+65535)| (0+32768))
 11330  0E83  0784               	addwf	4,f
 11331  0E84  30A8               	movlw	high ((_row2+65535)| (0+32768))
 11332  0E85  3D85               	addwfc	5,f
 11333  0E86  0800               	movf	0,w	;code access
 11334  0E87  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11335  0E88  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11336  0E89  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11337  0E8A  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11338  0E8B  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11339  0E8C  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11340  0E8D  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11341  0E8E  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11342  0E8F  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11343  0E90  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11344  0E91  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11345  0E92  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11346  0E93  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11347  0E94  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11348  0E95  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11349  0E96  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11350  0E97  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11351  0E98  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11352  0E99  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11353                           
 11354                           ;clockLEDs.c: 477:         WS2812b_SetSinglePixelColor( &ledArray,
 11355  0E9C  0020               	movlb	0	; select bank0
 11356  0E9D  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11357  0E9E  00AA               	movwf	___wmul@multiplier+1
 11358  0E9F  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11359  0EA0  00A9               	movwf	___wmul@multiplier
 11360  0EA1  3003               	movlw	3
 11361  0EA2  00AB               	movwf	___wmul@multiplicand
 11362  0EA3  3000               	movlw	0
 11363  0EA4  00AC               	movwf	___wmul@multiplicand+1
 11364  0EA5  31A4  247E  318C   	fcall	___wmul
 11365  0EA8  0020               	movlb	0	; select bank0
 11366  0EA9  082A               	movf	?___wmul+1,w
 11367  0EAA  0085               	movwf	5
 11368  0EAB  0829               	movf	?___wmul,w
 11369  0EAC  0084               	movwf	4
 11370  0EAD  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11371  0EAE  0784               	addwf	4,f
 11372  0EAF  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11373  0EB0  3D85               	addwfc	5,f
 11374  0EB1  0800               	movf	0,w	;code access
 11375  0EB2  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11376  0EB3  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11377  0EB4  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11378                           
 11379                           ;clockLEDs.c: 477:         WS2812b_SetSinglePixelColor( &ledArray,
 11380  0EB5  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11381  0EB6  00AA               	movwf	___wmul@multiplier+1
 11382  0EB7  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11383  0EB8  00A9               	movwf	___wmul@multiplier
 11384  0EB9  3003               	movlw	3
 11385  0EBA  00AB               	movwf	___wmul@multiplicand
 11386  0EBB  3000               	movlw	0
 11387  0EBC  00AC               	movwf	___wmul@multiplicand+1
 11388  0EBD  31A4  247E  318C   	fcall	___wmul
 11389  0EC0  0020               	movlb	0	; select bank0
 11390  0EC1  082A               	movf	?___wmul+1,w
 11391  0EC2  0085               	movwf	5
 11392  0EC3  0829               	movf	?___wmul,w
 11393  0EC4  0084               	movwf	4
 11394  0EC5  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11395  0EC6  0784               	addwf	4,f
 11396  0EC7  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11397  0EC8  3D85               	addwfc	5,f
 11398  0EC9  0800               	movf	0,w	;code access
 11399  0ECA  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11400  0ECB  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11401  0ECC  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11402                           
 11403                           ;clockLEDs.c: 477:         WS2812b_SetSinglePixelColor( &ledArray,
 11404  0ECD  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11405  0ECE  00AA               	movwf	___wmul@multiplier+1
 11406  0ECF  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11407  0ED0  00A9               	movwf	___wmul@multiplier
 11408  0ED1  3003               	movlw	3
 11409  0ED2  00AB               	movwf	___wmul@multiplicand
 11410  0ED3  3000               	movlw	0
 11411  0ED4  00AC               	movwf	___wmul@multiplicand+1
 11412  0ED5  31A4  247E  318C   	fcall	___wmul
 11413  0ED8  0020               	movlb	0	; select bank0
 11414  0ED9  082A               	movf	?___wmul+1,w
 11415  0EDA  0085               	movwf	5
 11416  0EDB  0829               	movf	?___wmul,w
 11417  0EDC  0084               	movwf	4
 11418  0EDD  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11419  0EDE  0784               	addwf	4,f
 11420  0EDF  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11421  0EE0  3D85               	addwfc	5,f
 11422  0EE1  0800               	movf	0,w	;code access
 11423  0EE2  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11424  0EE3  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11425  0EE4  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11426                           
 11427                           ;clockLEDs.c: 477:         WS2812b_SetSinglePixelColor( &ledArray,
 11428  0EE5  3062               	movlw	low _ledArray
 11429  0EE6  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11430  0EE7  3000               	movlw	high _ledArray
 11431  0EE8  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11432  0EE9  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11433  0EEA  0085               	movwf	5
 11434  0EEB  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11435  0EEC  0084               	movwf	4
 11436  0EED  306A               	movlw	low (_row3| (0+32768))
 11437  0EEE  0784               	addwf	4,f
 11438  0EEF  30A8               	movlw	high (_row3| (0+32768))
 11439  0EF0  3D85               	addwfc	5,f
 11440  0EF1  0800               	movf	0,w	;code access
 11441  0EF2  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11442  0EF3  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11443  0EF4  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11444  0EF5  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11445  0EF6  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11446  0EF7  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11447  0EF8  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11448  0EF9  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11449  0EFA  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11450  0EFB  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11451  0EFC  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11452  0EFD  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11453  0EFE  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11454  0EFF  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11455  0F00  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11456  0F01  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11457  0F02  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11458  0F03  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11459  0F04  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11460                           
 11461                           ;clockLEDs.c: 482:         WS2812b_SetSinglePixelColor( &ledArray,
 11462  0F07  0020               	movlb	0	; select bank0
 11463  0F08  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11464  0F09  00AA               	movwf	___wmul@multiplier+1
 11465  0F0A  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11466  0F0B  00A9               	movwf	___wmul@multiplier
 11467  0F0C  3003               	movlw	3
 11468  0F0D  00AB               	movwf	___wmul@multiplicand
 11469  0F0E  3000               	movlw	0
 11470  0F0F  00AC               	movwf	___wmul@multiplicand+1
 11471  0F10  31A4  247E  318C   	fcall	___wmul
 11472  0F13  0020               	movlb	0	; select bank0
 11473  0F14  082A               	movf	?___wmul+1,w
 11474  0F15  0085               	movwf	5
 11475  0F16  0829               	movf	?___wmul,w
 11476  0F17  0084               	movwf	4
 11477  0F18  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11478  0F19  0784               	addwf	4,f
 11479  0F1A  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11480  0F1B  3D85               	addwfc	5,f
 11481  0F1C  0800               	movf	0,w	;code access
 11482  0F1D  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11483  0F1E  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11484  0F1F  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11485                           
 11486                           ;clockLEDs.c: 482:         WS2812b_SetSinglePixelColor( &ledArray,
 11487  0F20  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11488  0F21  00AA               	movwf	___wmul@multiplier+1
 11489  0F22  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11490  0F23  00A9               	movwf	___wmul@multiplier
 11491  0F24  3003               	movlw	3
 11492  0F25  00AB               	movwf	___wmul@multiplicand
 11493  0F26  3000               	movlw	0
 11494  0F27  00AC               	movwf	___wmul@multiplicand+1
 11495  0F28  31A4  247E  318C   	fcall	___wmul
 11496  0F2B  0020               	movlb	0	; select bank0
 11497  0F2C  082A               	movf	?___wmul+1,w
 11498  0F2D  0085               	movwf	5
 11499  0F2E  0829               	movf	?___wmul,w
 11500  0F2F  0084               	movwf	4
 11501  0F30  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11502  0F31  0784               	addwf	4,f
 11503  0F32  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11504  0F33  3D85               	addwfc	5,f
 11505  0F34  0800               	movf	0,w	;code access
 11506  0F35  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11507  0F36  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11508  0F37  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11509                           
 11510                           ;clockLEDs.c: 482:         WS2812b_SetSinglePixelColor( &ledArray,
 11511  0F38  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11512  0F39  00AA               	movwf	___wmul@multiplier+1
 11513  0F3A  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11514  0F3B  00A9               	movwf	___wmul@multiplier
 11515  0F3C  3003               	movlw	3
 11516  0F3D  00AB               	movwf	___wmul@multiplicand
 11517  0F3E  3000               	movlw	0
 11518  0F3F  00AC               	movwf	___wmul@multiplicand+1
 11519  0F40  31A4  247E  318C   	fcall	___wmul
 11520  0F43  0020               	movlb	0	; select bank0
 11521  0F44  082A               	movf	?___wmul+1,w
 11522  0F45  0085               	movwf	5
 11523  0F46  0829               	movf	?___wmul,w
 11524  0F47  0084               	movwf	4
 11525  0F48  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11526  0F49  0784               	addwf	4,f
 11527  0F4A  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11528  0F4B  3D85               	addwfc	5,f
 11529  0F4C  0800               	movf	0,w	;code access
 11530  0F4D  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11531  0F4E  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11532  0F4F  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11533                           
 11534                           ;clockLEDs.c: 482:         WS2812b_SetSinglePixelColor( &ledArray,
 11535  0F50  3062               	movlw	low _ledArray
 11536  0F51  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11537  0F52  3000               	movlw	high _ledArray
 11538  0F53  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11539  0F54  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11540  0F55  0085               	movwf	5
 11541  0F56  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11542  0F57  0084               	movwf	4
 11543  0F58  3077               	movlw	low ((_row4+65535)| (0+32768))
 11544  0F59  0784               	addwf	4,f
 11545  0F5A  30A8               	movlw	high ((_row4+65535)| (0+32768))
 11546  0F5B  3D85               	addwfc	5,f
 11547  0F5C  0800               	movf	0,w	;code access
 11548  0F5D  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11549  0F5E  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11550  0F5F  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11551  0F60  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11552  0F61  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11553  0F62  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11554  0F63  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11555  0F64  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11556  0F65  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11557  0F66  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11558  0F67  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11559  0F68  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11560  0F69  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11561  0F6A  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11562  0F6B  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11563  0F6C  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11564  0F6D  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11565  0F6E  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11566  0F6F  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11567                           
 11568                           ;clockLEDs.c: 487:         WS2812b_SetSinglePixelColor( &ledArray,
 11569  0F72  0020               	movlb	0	; select bank0
 11570  0F73  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11571  0F74  00AA               	movwf	___wmul@multiplier+1
 11572  0F75  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11573  0F76  00A9               	movwf	___wmul@multiplier
 11574  0F77  3003               	movlw	3
 11575  0F78  00AB               	movwf	___wmul@multiplicand
 11576  0F79  3000               	movlw	0
 11577  0F7A  00AC               	movwf	___wmul@multiplicand+1
 11578  0F7B  31A4  247E  318C   	fcall	___wmul
 11579  0F7E  0020               	movlb	0	; select bank0
 11580  0F7F  082A               	movf	?___wmul+1,w
 11581  0F80  0085               	movwf	5
 11582  0F81  0829               	movf	?___wmul,w
 11583  0F82  0084               	movwf	4
 11584  0F83  3058               	movlw	low (_rainbowRGBValues| (0+32768))
 11585  0F84  0784               	addwf	4,f
 11586  0F85  30A8               	movlw	high (_rainbowRGBValues| (0+32768))
 11587  0F86  3D85               	addwfc	5,f
 11588  0F87  0800               	movf	0,w	;code access
 11589  0F88  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11590  0F89  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11591  0F8A  00D2               	movwf	_Clock_CrossingRainbowPattern$2393
 11592                           
 11593                           ;clockLEDs.c: 487:         WS2812b_SetSinglePixelColor( &ledArray,
 11594  0F8B  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11595  0F8C  00AA               	movwf	___wmul@multiplier+1
 11596  0F8D  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11597  0F8E  00A9               	movwf	___wmul@multiplier
 11598  0F8F  3003               	movlw	3
 11599  0F90  00AB               	movwf	___wmul@multiplicand
 11600  0F91  3000               	movlw	0
 11601  0F92  00AC               	movwf	___wmul@multiplicand+1
 11602  0F93  31A4  247E  318C   	fcall	___wmul
 11603  0F96  0020               	movlb	0	; select bank0
 11604  0F97  082A               	movf	?___wmul+1,w
 11605  0F98  0085               	movwf	5
 11606  0F99  0829               	movf	?___wmul,w
 11607  0F9A  0084               	movwf	4
 11608  0F9B  3059               	movlw	low ((_rainbowRGBValues+1)| (0+32768))
 11609  0F9C  0784               	addwf	4,f
 11610  0F9D  30A8               	movlw	high ((_rainbowRGBValues+1)| (0+32768))
 11611  0F9E  3D85               	addwfc	5,f
 11612  0F9F  0800               	movf	0,w	;code access
 11613  0FA0  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11614  0FA1  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11615  0FA2  00D3               	movwf	_Clock_CrossingRainbowPattern$2394
 11616                           
 11617                           ;clockLEDs.c: 487:         WS2812b_SetSinglePixelColor( &ledArray,
 11618  0FA3  0860               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11619  0FA4  00AA               	movwf	___wmul@multiplier+1
 11620  0FA5  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11621  0FA6  00A9               	movwf	___wmul@multiplier
 11622  0FA7  3003               	movlw	3
 11623  0FA8  00AB               	movwf	___wmul@multiplicand
 11624  0FA9  3000               	movlw	0
 11625  0FAA  00AC               	movwf	___wmul@multiplicand+1
 11626  0FAB  31A4  247E  318C   	fcall	___wmul
 11627  0FAE  0020               	movlb	0	; select bank0
 11628  0FAF  082A               	movf	?___wmul+1,w
 11629  0FB0  0085               	movwf	5
 11630  0FB1  0829               	movf	?___wmul,w
 11631  0FB2  0084               	movwf	4
 11632  0FB3  305A               	movlw	low ((_rainbowRGBValues+2)| (0+32768))
 11633  0FB4  0784               	addwf	4,f
 11634  0FB5  30A8               	movlw	high ((_rainbowRGBValues+2)| (0+32768))
 11635  0FB6  3D85               	addwfc	5,f
 11636  0FB7  0800               	movf	0,w	;code access
 11637  0FB8  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11638  0FB9  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11639  0FBA  00D4               	movwf	_Clock_CrossingRainbowPattern$2395
 11640                           
 11641                           ;clockLEDs.c: 487:         WS2812b_SetSinglePixelColor( &ledArray,
 11642  0FBB  3062               	movlw	low _ledArray
 11643  0FBC  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11644  0FBD  3000               	movlw	high _ledArray
 11645  0FBE  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11646  0FBF  087C               	movf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11647  0FC0  0085               	movwf	5
 11648  0FC1  087B               	movf	Clock_CrossingRainbowPattern@thisIndex,w
 11649  0FC2  0084               	movwf	4
 11650  0FC3  3090               	movlw	low ((_row5+65534)| (0+32768))
 11651  0FC4  0784               	addwf	4,f
 11652  0FC5  30A8               	movlw	high ((_row5+65534)| (0+32768))
 11653  0FC6                     L7:
 11654  0FC6  3D85               	addwfc	5,f
 11655  0FC7  0800               	movf	0,w	;code access
 11656  0FC8  00CD               	movwf	??_Clock_CrossingRainbowPattern
 11657  0FC9  01CE               	clrf	??_Clock_CrossingRainbowPattern+1
 11658  0FCA  084D               	movf	??_Clock_CrossingRainbowPattern,w
 11659  0FCB  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11660  0FCC  084E               	movf	??_Clock_CrossingRainbowPattern+1,w
 11661  0FCD  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11662  0FCE  0852               	movf	_Clock_CrossingRainbowPattern$2393,w
 11663  0FCF  00CF               	movwf	??_Clock_CrossingRainbowPattern+2
 11664  0FD0  084F               	movf	??_Clock_CrossingRainbowPattern+2,w
 11665  0FD1  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11666  0FD2  0853               	movf	_Clock_CrossingRainbowPattern$2394,w
 11667  0FD3  00D0               	movwf	??_Clock_CrossingRainbowPattern+3
 11668  0FD4  0850               	movf	??_Clock_CrossingRainbowPattern+3,w
 11669  0FD5  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11670  0FD6  0854               	movf	_Clock_CrossingRainbowPattern$2395,w
 11671  0FD7  00D1               	movwf	??_Clock_CrossingRainbowPattern+4
 11672  0FD8  0851               	movf	??_Clock_CrossingRainbowPattern+4,w
 11673  0FD9  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11674  0FDA  319B  2386  318C   	fcall	_WS2812b_SetSinglePixelColor
 11675                           
 11676                           ;clockLEDs.c: 497:     if( 13 == thisIndex )
 11677  0FDD  300D               	movlw	13
 11678  0FDE  067B               	xorwf	Clock_CrossingRainbowPattern@thisIndex,w
 11679  0FDF  047C               	iorwf	Clock_CrossingRainbowPattern@thisIndex+1,w
 11680  0FE0  1D03               	btfss	3,2
 11681  0FE1  2FF4               	goto	l5432
 11682                           
 11683                           ;clockLEDs.c: 498:     {;clockLEDs.c: 499:         thisIndex = 0;
 11684  0FE2  01FB               	clrf	Clock_CrossingRainbowPattern@thisIndex
 11685  0FE3  01FC               	clrf	Clock_CrossingRainbowPattern@thisIndex+1
 11686                           
 11687                           ;clockLEDs.c: 500:         rainbowRowIdx = ( 5 == rainbowRowIdx ) ? 0 : rainbowRowIdx + 
      +                          1;
 11688  0FE4  3005               	movlw	5
 11689  0FE5  0020               	movlb	0	; select bank0
 11690  0FE6  065F               	xorwf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11691  0FE7  0460               	iorwf	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11692  0FE8  1903               	btfsc	3,2
 11693  0FE9  2FF1               	goto	l5430
 11694  0FEA  085F               	movf	Clock_CrossingRainbowPattern@rainbowRowIdx,w
 11695  0FEB  3E01               	addlw	1
 11696  0FEC  00DF               	movwf	Clock_CrossingRainbowPattern@rainbowRowIdx
 11697  0FED  3000               	movlw	0
 11698  0FEE  3D60               	addwfc	Clock_CrossingRainbowPattern@rainbowRowIdx+1,w
 11699  0FEF  00E0               	movwf	Clock_CrossingRainbowPattern@rainbowRowIdx+1
 11700  0FF0  2FF8               	goto	l5434
 11701  0FF1                     l5430:
 11702  0FF1  01DF               	clrf	Clock_CrossingRainbowPattern@rainbowRowIdx
 11703  0FF2  01E0               	clrf	Clock_CrossingRainbowPattern@rainbowRowIdx+1
 11704  0FF3  2FF8               	goto	l5434
 11705  0FF4                     l5432:
 11706                           
 11707                           ;clockLEDs.c: 503:     {;clockLEDs.c: 504:         thisIndex++;
 11708  0FF4  3001               	movlw	1
 11709  0FF5  07FB               	addwf	Clock_CrossingRainbowPattern@thisIndex,f
 11710  0FF6  3000               	movlw	0
 11711  0FF7  3DFC               	addwfc	Clock_CrossingRainbowPattern@thisIndex+1,f
 11712  0FF8                     l5434:
 11713                           
 11714                           ;clockLEDs.c: 506:     WS2812B_Render( &ledArray );
 11715  0FF8  3062               	movlw	low _ledArray
 11716  0FF9  0020               	movlb	0	; select bank0
 11717  0FFA  00A9               	movwf	WS2812B_Render@strip
 11718  0FFB  3000               	movlw	high _ledArray
 11719  0FFC  00AA               	movwf	WS2812B_Render@strip+1
 11720  0FFD  3190  2031         	fcall	_WS2812B_Render
 11721  0FFF  0008               	return
 11722  1000                     __end_of_Clock_CrossingRainbowPattern:
 11723                           
 11724                           	psect	text15
 11725  2721                     __ptext15:	
 11726 ;; *************** function _Clock_IterateSinglePixelByIndex *****************
 11727 ;; Defined at:
 11728 ;;		line 380 in file "clockLEDs.c"
 11729 ;; Parameters:    Size  Location     Type
 11730 ;;		None
 11731 ;; Auto vars:     Size  Location     Type
 11732 ;;		None
 11733 ;; Return value:  Size  Location     Type
 11734 ;;                  1    wreg      void 
 11735 ;; Registers used:
 11736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11737 ;; Tracked objects:
 11738 ;;		On entry : 0/0
 11739 ;;		On exit  : 0/0
 11740 ;;		Unchanged: 0/0
 11741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11744 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11745 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11746 ;;Total ram usage:        3 bytes
 11747 ;; Hardware stack levels used: 1
 11748 ;; Hardware stack levels required when called: 8
 11749 ;; This function calls:
 11750 ;;		_WS2812B_Render
 11751 ;;		_WS2812b_SetSinglePixelColor
 11752 ;;		_WS2812b_SetStripConstantColor
 11753 ;; This function is called by:
 11754 ;;		_State_SetFunctionLookupTable
 11755 ;;		_STATE_PatternMode
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759  2721                     _Clock_IterateSinglePixelByIndex:	
 11760                           ;psect for function _Clock_IterateSinglePixelByIndex
 11761                           
 11762                           
 11763                           ;clockLEDs.c: 383:     static size_t idx = 0;;clockLEDs.c: 385:     WS2812b_SetSinglePix
      +                          elColor( &ledArray,
 11764                           
 11765                           ;incstack = 0
 11766                           ; Regs used in _Clock_IterateSinglePixelByIndex: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 11767  2721  3062               	movlw	low _ledArray
 11768  2722  0020               	movlb	0	; select bank0
 11769  2723  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11770  2724  3000               	movlw	high _ledArray
 11771  2725  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11772  2726  0021               	movlb	1	; select bank1
 11773  2727  0846               	movf	(Clock_IterateSinglePixelByIndex@idx+1)^(0+128),w
 11774  2728  0020               	movlb	0	; select bank0
 11775  2729  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11776  272A  0021               	movlb	1	; select bank1
 11777  272B  0845               	movf	Clock_IterateSinglePixelByIndex@idx^(0+128),w
 11778  272C  0020               	movlb	0	; select bank0
 11779  272D  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11780  272E  30FF               	movlw	255
 11781  272F  00D7               	movwf	??_Clock_IterateSinglePixelByIndex
 11782  2730  0857               	movf	??_Clock_IterateSinglePixelByIndex,w
 11783  2731  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11784  2732  30FF               	movlw	255
 11785  2733  00D8               	movwf	??_Clock_IterateSinglePixelByIndex+1
 11786  2734  0858               	movf	??_Clock_IterateSinglePixelByIndex+1,w
 11787  2735  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11788  2736  30FF               	movlw	255
 11789  2737  00D9               	movwf	??_Clock_IterateSinglePixelByIndex+2
 11790  2738  0859               	movf	??_Clock_IterateSinglePixelByIndex+2,w
 11791  2739  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11792  273A  319B  2386  31A7   	fcall	_WS2812b_SetSinglePixelColor
 11793                           
 11794                           ;clockLEDs.c: 390:     WS2812B_Render( &ledArray );
 11795  273D  3062               	movlw	low _ledArray
 11796  273E  0020               	movlb	0	; select bank0
 11797  273F  00A9               	movwf	WS2812B_Render@strip
 11798  2740  3000               	movlw	high _ledArray
 11799  2741  00AA               	movwf	WS2812B_Render@strip+1
 11800  2742  3190  2031  31A7   	fcall	_WS2812B_Render
 11801                           
 11802                           ;clockLEDs.c: 392:     _delay((unsigned long)((50)*(32000000u/4000.0)));
 11803  2745  3003               	movlw	3
 11804  2746  0020               	movlb	0	; select bank0
 11805  2747  00D8               	movwf	??_Clock_IterateSinglePixelByIndex+1
 11806  2748  3008               	movlw	8
 11807  2749  00D7               	movwf	??_Clock_IterateSinglePixelByIndex
 11808  274A  3077               	movlw	119
 11809  274B                     u4947:
 11810  274B  0B89               	decfsz	9,f
 11811  274C  2F4B               	goto	u4947
 11812  274D  0BD7               	decfsz	??_Clock_IterateSinglePixelByIndex,f
 11813  274E  2F4B               	goto	u4947
 11814  274F  0BD8               	decfsz	??_Clock_IterateSinglePixelByIndex+1,f
 11815  2750  2F4B               	goto	u4947
 11816                           
 11817                           ;clockLEDs.c: 393:     if( 63 == idx )
 11818  2751  303F               	movlw	63
 11819  2752  0021               	movlb	1	; select bank1
 11820  2753  0645               	xorwf	Clock_IterateSinglePixelByIndex@idx^(0+128),w
 11821  2754  0446               	iorwf	(Clock_IterateSinglePixelByIndex@idx+1)^(0+128),w
 11822  2755  1D03               	btfss	3,2
 11823  2756  2F64               	goto	l5366
 11824                           
 11825                           ;clockLEDs.c: 394:     {;clockLEDs.c: 395:         idx = 0;
 11826  2757  01C5               	clrf	Clock_IterateSinglePixelByIndex@idx^(0+128)
 11827  2758  01C6               	clrf	(Clock_IterateSinglePixelByIndex@idx+1)^(0+128)
 11828                           
 11829                           ;clockLEDs.c: 396:         WS2812b_SetStripConstantColor( &ledArray,
 11830  2759  3062               	movlw	low _ledArray
 11831  275A  0020               	movlb	0	; select bank0
 11832  275B  00CF               	movwf	WS2812b_SetStripConstantColor@strip
 11833  275C  3000               	movlw	high _ledArray
 11834  275D  00D0               	movwf	WS2812b_SetStripConstantColor@strip+1
 11835  275E  01D1               	clrf	WS2812b_SetStripConstantColor@red
 11836  275F  01D2               	clrf	WS2812b_SetStripConstantColor@green
 11837  2760  01D3               	clrf	WS2812b_SetStripConstantColor@blue
 11838  2761  31A5  25A9         	fcall	_WS2812b_SetStripConstantColor
 11839                           
 11840                           ;clockLEDs.c: 400:     }
 11841  2763  0008               	return
 11842  2764                     l5366:
 11843                           
 11844                           ;clockLEDs.c: 402:     {;clockLEDs.c: 403:         idx++;
 11845  2764  3001               	movlw	1
 11846  2765  07C5               	addwf	Clock_IterateSinglePixelByIndex@idx^(0+128),f
 11847  2766  3000               	movlw	0
 11848  2767  3DC6               	addwfc	(Clock_IterateSinglePixelByIndex@idx+1)^(0+128),f
 11849  2768  0008               	return
 11850  2769                     __end_of_Clock_IterateSinglePixelByIndex:
 11851                           
 11852                           	psect	text16
 11853  045D                     __ptext16:	
 11854 ;; *************** function _Clock_Popcorn_Pattern_Hold *****************
 11855 ;; Defined at:
 11856 ;;		line 647 in file "clockLEDs.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11872 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11873 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11874 ;;Total ram usage:        5 bytes
 11875 ;; Hardware stack levels used: 1
 11876 ;; Hardware stack levels required when called: 8
 11877 ;; This function calls:
 11878 ;;		_WS2812B_Render
 11879 ;;		_WS2812b_SetSinglePixelColor
 11880 ;;		_WS2812b_SetStripConstantColor
 11881 ;;		___awmod
 11882 ;;		___lwmod
 11883 ;;		_rand
 11884 ;; This function is called by:
 11885 ;;		_State_SetFunctionLookupTable
 11886 ;;		_STATE_PatternMode
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890  045D                     _Clock_Popcorn_Pattern_Hold:	
 11891                           ;psect for function _Clock_Popcorn_Pattern_Hold
 11892                           
 11893                           
 11894                           ;clockLEDs.c: 650:     static size_t numRenders = 0;;clockLEDs.c: 652:     WS2812b_SetSi
      +                          nglePixelColor( &ledArray,
 11895                           
 11896                           ;incstack = 0
 11897                           ; Regs used in _Clock_Popcorn_Pattern_Hold: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11898  045D  3062               	movlw	low _ledArray
 11899  045E  0020               	movlb	0	; select bank0
 11900  045F  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11901  0460  3000               	movlw	high _ledArray
 11902  0461  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11903  0462  300A               	movlw	10
 11904  0463  00BB               	movwf	___lwmod@divisor
 11905  0464  3000               	movlw	0
 11906  0465  00BC               	movwf	___lwmod@divisor+1
 11907  0466  31A7  2769  3184   	fcall	_rand
 11908  0469  0020               	movlb	0	; select bank0
 11909  046A  0835               	movf	?_rand,w
 11910  046B  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 11911  046C  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 11912  046D  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 11913  046E  00BD               	movwf	___lwmod@dividend
 11914  046F  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 11915  0470  00BE               	movwf	___lwmod@dividend+1
 11916  0471  31A5  25D5  3184   	fcall	___lwmod
 11917  0474  0020               	movlb	0	; select bank0
 11918  0475  083C               	movf	?___lwmod+1,w
 11919  0476  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11920  0477  083B               	movf	?___lwmod,w
 11921  0478  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11922  0479  30FF               	movlw	255
 11923  047A  00BB               	movwf	___awmod@divisor
 11924  047B  3000               	movlw	0
 11925  047C  00BC               	movwf	___awmod@divisor+1
 11926  047D  31A7  2769  3184   	fcall	_rand
 11927  0480  0020               	movlb	0	; select bank0
 11928  0481  0836               	movf	?_rand+1,w
 11929  0482  00BE               	movwf	___awmod@dividend+1
 11930  0483  0835               	movf	?_rand,w
 11931  0484  00BD               	movwf	___awmod@dividend
 11932  0485  31A6  26DB  3184   	fcall	___awmod
 11933  0488  0020               	movlb	0	; select bank0
 11934  0489  083B               	movf	?___awmod,w
 11935  048A  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 11936  048B  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 11937  048C  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 11938  048D  30FF               	movlw	255
 11939  048E  00BB               	movwf	___awmod@divisor
 11940  048F  3000               	movlw	0
 11941  0490  00BC               	movwf	___awmod@divisor+1
 11942  0491  31A7  2769  3184   	fcall	_rand
 11943  0494  0020               	movlb	0	; select bank0
 11944  0495  0836               	movf	?_rand+1,w
 11945  0496  00BE               	movwf	___awmod@dividend+1
 11946  0497  0835               	movf	?_rand,w
 11947  0498  00BD               	movwf	___awmod@dividend
 11948  0499  31A6  26DB  3184   	fcall	___awmod
 11949  049C  0020               	movlb	0	; select bank0
 11950  049D  083B               	movf	?___awmod,w
 11951  049E  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 11952  049F  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 11953  04A0  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 11954  04A1  30FF               	movlw	255
 11955  04A2  00BB               	movwf	___awmod@divisor
 11956  04A3  3000               	movlw	0
 11957  04A4  00BC               	movwf	___awmod@divisor+1
 11958  04A5  31A7  2769  3184   	fcall	_rand
 11959  04A8  0020               	movlb	0	; select bank0
 11960  04A9  0836               	movf	?_rand+1,w
 11961  04AA  00BE               	movwf	___awmod@dividend+1
 11962  04AB  0835               	movf	?_rand,w
 11963  04AC  00BD               	movwf	___awmod@dividend
 11964  04AD  31A6  26DB  3184   	fcall	___awmod
 11965  04B0  0020               	movlb	0	; select bank0
 11966  04B1  083B               	movf	?___awmod,w
 11967  04B2  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 11968  04B3  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 11969  04B4  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 11970  04B5  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 11971                           
 11972                           ;clockLEDs.c: 657:     WS2812b_SetSinglePixelColor( &ledArray,
 11973  04B8  3062               	movlw	low _ledArray
 11974  04B9  0020               	movlb	0	; select bank0
 11975  04BA  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 11976  04BB  3000               	movlw	high _ledArray
 11977  04BC  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 11978  04BD  300A               	movlw	10
 11979  04BE  00BB               	movwf	___lwmod@divisor
 11980  04BF  3000               	movlw	0
 11981  04C0  00BC               	movwf	___lwmod@divisor+1
 11982  04C1  31A7  2769  3184   	fcall	_rand
 11983  04C4  0020               	movlb	0	; select bank0
 11984  04C5  0835               	movf	?_rand,w
 11985  04C6  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 11986  04C7  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 11987  04C8  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 11988  04C9  00BD               	movwf	___lwmod@dividend
 11989  04CA  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 11990  04CB  00BE               	movwf	___lwmod@dividend+1
 11991  04CC  31A5  25D5  3184   	fcall	___lwmod
 11992  04CF  0020               	movlb	0	; select bank0
 11993  04D0  083C               	movf	?___lwmod+1,w
 11994  04D1  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 11995  04D2  083B               	movf	?___lwmod,w
 11996  04D3  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 11997  04D4  30FF               	movlw	255
 11998  04D5  00BB               	movwf	___awmod@divisor
 11999  04D6  3000               	movlw	0
 12000  04D7  00BC               	movwf	___awmod@divisor+1
 12001  04D8  31A7  2769  3184   	fcall	_rand
 12002  04DB  0020               	movlb	0	; select bank0
 12003  04DC  0836               	movf	?_rand+1,w
 12004  04DD  00BE               	movwf	___awmod@dividend+1
 12005  04DE  0835               	movf	?_rand,w
 12006  04DF  00BD               	movwf	___awmod@dividend
 12007  04E0  31A6  26DB  3184   	fcall	___awmod
 12008  04E3  0020               	movlb	0	; select bank0
 12009  04E4  083B               	movf	?___awmod,w
 12010  04E5  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12011  04E6  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12012  04E7  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12013  04E8  30FF               	movlw	255
 12014  04E9  00BB               	movwf	___awmod@divisor
 12015  04EA  3000               	movlw	0
 12016  04EB  00BC               	movwf	___awmod@divisor+1
 12017  04EC  31A7  2769  3184   	fcall	_rand
 12018  04EF  0020               	movlb	0	; select bank0
 12019  04F0  0836               	movf	?_rand+1,w
 12020  04F1  00BE               	movwf	___awmod@dividend+1
 12021  04F2  0835               	movf	?_rand,w
 12022  04F3  00BD               	movwf	___awmod@dividend
 12023  04F4  31A6  26DB  3184   	fcall	___awmod
 12024  04F7  0020               	movlb	0	; select bank0
 12025  04F8  083B               	movf	?___awmod,w
 12026  04F9  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12027  04FA  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12028  04FB  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12029  04FC  30FF               	movlw	255
 12030  04FD  00BB               	movwf	___awmod@divisor
 12031  04FE  3000               	movlw	0
 12032  04FF  00BC               	movwf	___awmod@divisor+1
 12033  0500  31A7  2769  3184   	fcall	_rand
 12034  0503  0020               	movlb	0	; select bank0
 12035  0504  0836               	movf	?_rand+1,w
 12036  0505  00BE               	movwf	___awmod@dividend+1
 12037  0506  0835               	movf	?_rand,w
 12038  0507  00BD               	movwf	___awmod@dividend
 12039  0508  31A6  26DB  3184   	fcall	___awmod
 12040  050B  0020               	movlb	0	; select bank0
 12041  050C  083B               	movf	?___awmod,w
 12042  050D  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12043  050E  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12044  050F  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12045  0510  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12046                           
 12047                           ;clockLEDs.c: 662:     WS2812b_SetSinglePixelColor( &ledArray,
 12048  0513  3062               	movlw	low _ledArray
 12049  0514  0020               	movlb	0	; select bank0
 12050  0515  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12051  0516  3000               	movlw	high _ledArray
 12052  0517  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12053  0518  300A               	movlw	10
 12054  0519  00BB               	movwf	___lwmod@divisor
 12055  051A  3000               	movlw	0
 12056  051B  00BC               	movwf	___lwmod@divisor+1
 12057  051C  31A7  2769  3184   	fcall	_rand
 12058  051F  0020               	movlb	0	; select bank0
 12059  0520  0835               	movf	?_rand,w
 12060  0521  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12061  0522  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12062  0523  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12063  0524  00BD               	movwf	___lwmod@dividend
 12064  0525  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12065  0526  00BE               	movwf	___lwmod@dividend+1
 12066  0527  31A5  25D5  3184   	fcall	___lwmod
 12067  052A  0020               	movlb	0	; select bank0
 12068  052B  083C               	movf	?___lwmod+1,w
 12069  052C  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12070  052D  083B               	movf	?___lwmod,w
 12071  052E  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12072  052F  30FF               	movlw	255
 12073  0530  00BB               	movwf	___awmod@divisor
 12074  0531  3000               	movlw	0
 12075  0532  00BC               	movwf	___awmod@divisor+1
 12076  0533  31A7  2769  3184   	fcall	_rand
 12077  0536  0020               	movlb	0	; select bank0
 12078  0537  0836               	movf	?_rand+1,w
 12079  0538  00BE               	movwf	___awmod@dividend+1
 12080  0539  0835               	movf	?_rand,w
 12081  053A  00BD               	movwf	___awmod@dividend
 12082  053B  31A6  26DB  3184   	fcall	___awmod
 12083  053E  0020               	movlb	0	; select bank0
 12084  053F  083B               	movf	?___awmod,w
 12085  0540  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12086  0541  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12087  0542  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12088  0543  30FF               	movlw	255
 12089  0544  00BB               	movwf	___awmod@divisor
 12090  0545  3000               	movlw	0
 12091  0546  00BC               	movwf	___awmod@divisor+1
 12092  0547  31A7  2769  3184   	fcall	_rand
 12093  054A  0020               	movlb	0	; select bank0
 12094  054B  0836               	movf	?_rand+1,w
 12095  054C  00BE               	movwf	___awmod@dividend+1
 12096  054D  0835               	movf	?_rand,w
 12097  054E  00BD               	movwf	___awmod@dividend
 12098  054F  31A6  26DB  3184   	fcall	___awmod
 12099  0552  0020               	movlb	0	; select bank0
 12100  0553  083B               	movf	?___awmod,w
 12101  0554  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12102  0555  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12103  0556  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12104  0557  30FF               	movlw	255
 12105  0558  00BB               	movwf	___awmod@divisor
 12106  0559  3000               	movlw	0
 12107  055A  00BC               	movwf	___awmod@divisor+1
 12108  055B  31A7  2769  3184   	fcall	_rand
 12109  055E  0020               	movlb	0	; select bank0
 12110  055F  0836               	movf	?_rand+1,w
 12111  0560  00BE               	movwf	___awmod@dividend+1
 12112  0561  0835               	movf	?_rand,w
 12113  0562  00BD               	movwf	___awmod@dividend
 12114  0563  31A6  26DB  3184   	fcall	___awmod
 12115  0566  0020               	movlb	0	; select bank0
 12116  0567  083B               	movf	?___awmod,w
 12117  0568  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12118  0569  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12119  056A  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12120  056B  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12121                           
 12122                           ;clockLEDs.c: 667:     WS2812b_SetSinglePixelColor( &ledArray,
 12123  056E  3062               	movlw	low _ledArray
 12124  056F  0020               	movlb	0	; select bank0
 12125  0570  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12126  0571  3000               	movlw	high _ledArray
 12127  0572  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12128  0573  300A               	movlw	10
 12129  0574  00BB               	movwf	___lwmod@divisor
 12130  0575  3000               	movlw	0
 12131  0576  00BC               	movwf	___lwmod@divisor+1
 12132  0577  31A7  2769  3184   	fcall	_rand
 12133  057A  0020               	movlb	0	; select bank0
 12134  057B  0835               	movf	?_rand,w
 12135  057C  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12136  057D  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12137  057E  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12138  057F  00BD               	movwf	___lwmod@dividend
 12139  0580  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12140  0581  00BE               	movwf	___lwmod@dividend+1
 12141  0582  31A5  25D5  3184   	fcall	___lwmod
 12142  0585  0020               	movlb	0	; select bank0
 12143  0586  083C               	movf	?___lwmod+1,w
 12144  0587  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12145  0588  083B               	movf	?___lwmod,w
 12146  0589  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12147  058A  30FF               	movlw	255
 12148  058B  00BB               	movwf	___awmod@divisor
 12149  058C  3000               	movlw	0
 12150  058D  00BC               	movwf	___awmod@divisor+1
 12151  058E  31A7  2769  3184   	fcall	_rand
 12152  0591  0020               	movlb	0	; select bank0
 12153  0592  0836               	movf	?_rand+1,w
 12154  0593  00BE               	movwf	___awmod@dividend+1
 12155  0594  0835               	movf	?_rand,w
 12156  0595  00BD               	movwf	___awmod@dividend
 12157  0596  31A6  26DB  3184   	fcall	___awmod
 12158  0599  0020               	movlb	0	; select bank0
 12159  059A  083B               	movf	?___awmod,w
 12160  059B  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12161  059C  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12162  059D  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12163  059E  30FF               	movlw	255
 12164  059F  00BB               	movwf	___awmod@divisor
 12165  05A0  3000               	movlw	0
 12166  05A1  00BC               	movwf	___awmod@divisor+1
 12167  05A2  31A7  2769  3184   	fcall	_rand
 12168  05A5  0020               	movlb	0	; select bank0
 12169  05A6  0836               	movf	?_rand+1,w
 12170  05A7  00BE               	movwf	___awmod@dividend+1
 12171  05A8  0835               	movf	?_rand,w
 12172  05A9  00BD               	movwf	___awmod@dividend
 12173  05AA  31A6  26DB  3184   	fcall	___awmod
 12174  05AD  0020               	movlb	0	; select bank0
 12175  05AE  083B               	movf	?___awmod,w
 12176  05AF  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12177  05B0  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12178  05B1  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12179  05B2  30FF               	movlw	255
 12180  05B3  00BB               	movwf	___awmod@divisor
 12181  05B4  3000               	movlw	0
 12182  05B5  00BC               	movwf	___awmod@divisor+1
 12183  05B6  31A7  2769  3184   	fcall	_rand
 12184  05B9  0020               	movlb	0	; select bank0
 12185  05BA  0836               	movf	?_rand+1,w
 12186  05BB  00BE               	movwf	___awmod@dividend+1
 12187  05BC  0835               	movf	?_rand,w
 12188  05BD  00BD               	movwf	___awmod@dividend
 12189  05BE  31A6  26DB  3184   	fcall	___awmod
 12190  05C1  0020               	movlb	0	; select bank0
 12191  05C2  083B               	movf	?___awmod,w
 12192  05C3  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12193  05C4  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12194  05C5  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12195  05C6  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12196                           
 12197                           ;clockLEDs.c: 672:     WS2812b_SetSinglePixelColor( &ledArray,
 12198  05C9  3062               	movlw	low _ledArray
 12199  05CA  0020               	movlb	0	; select bank0
 12200  05CB  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12201  05CC  3000               	movlw	high _ledArray
 12202  05CD  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12203  05CE  300A               	movlw	10
 12204  05CF  00BB               	movwf	___lwmod@divisor
 12205  05D0  3000               	movlw	0
 12206  05D1  00BC               	movwf	___lwmod@divisor+1
 12207  05D2  31A7  2769  3184   	fcall	_rand
 12208  05D5  0020               	movlb	0	; select bank0
 12209  05D6  0835               	movf	?_rand,w
 12210  05D7  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12211  05D8  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12212  05D9  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12213  05DA  00BD               	movwf	___lwmod@dividend
 12214  05DB  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12215  05DC  00BE               	movwf	___lwmod@dividend+1
 12216  05DD  31A5  25D5  3184   	fcall	___lwmod
 12217  05E0  0020               	movlb	0	; select bank0
 12218  05E1  083C               	movf	?___lwmod+1,w
 12219  05E2  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12220  05E3  083B               	movf	?___lwmod,w
 12221  05E4  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12222  05E5  30FF               	movlw	255
 12223  05E6  00BB               	movwf	___awmod@divisor
 12224  05E7  3000               	movlw	0
 12225  05E8  00BC               	movwf	___awmod@divisor+1
 12226  05E9  31A7  2769  3184   	fcall	_rand
 12227  05EC  0020               	movlb	0	; select bank0
 12228  05ED  0836               	movf	?_rand+1,w
 12229  05EE  00BE               	movwf	___awmod@dividend+1
 12230  05EF  0835               	movf	?_rand,w
 12231  05F0  00BD               	movwf	___awmod@dividend
 12232  05F1  31A6  26DB  3184   	fcall	___awmod
 12233  05F4  0020               	movlb	0	; select bank0
 12234  05F5  083B               	movf	?___awmod,w
 12235  05F6  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12236  05F7  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12237  05F8  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12238  05F9  30FF               	movlw	255
 12239  05FA  00BB               	movwf	___awmod@divisor
 12240  05FB  3000               	movlw	0
 12241  05FC  00BC               	movwf	___awmod@divisor+1
 12242  05FD  31A7  2769  3184   	fcall	_rand
 12243  0600  0020               	movlb	0	; select bank0
 12244  0601  0836               	movf	?_rand+1,w
 12245  0602  00BE               	movwf	___awmod@dividend+1
 12246  0603  0835               	movf	?_rand,w
 12247  0604  00BD               	movwf	___awmod@dividend
 12248  0605  31A6  26DB  3184   	fcall	___awmod
 12249  0608  0020               	movlb	0	; select bank0
 12250  0609  083B               	movf	?___awmod,w
 12251  060A  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12252  060B  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12253  060C  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12254  060D  30FF               	movlw	255
 12255  060E  00BB               	movwf	___awmod@divisor
 12256  060F  3000               	movlw	0
 12257  0610  00BC               	movwf	___awmod@divisor+1
 12258  0611  31A7  2769  3184   	fcall	_rand
 12259  0614  0020               	movlb	0	; select bank0
 12260  0615  0836               	movf	?_rand+1,w
 12261  0616  00BE               	movwf	___awmod@dividend+1
 12262  0617  0835               	movf	?_rand,w
 12263  0618  00BD               	movwf	___awmod@dividend
 12264  0619  31A6  26DB  3184   	fcall	___awmod
 12265  061C  0020               	movlb	0	; select bank0
 12266  061D  083B               	movf	?___awmod,w
 12267  061E  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12268  061F  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12269  0620  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12270  0621  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12271                           
 12272                           ;clockLEDs.c: 677:     WS2812b_SetSinglePixelColor( &ledArray,
 12273  0624  3062               	movlw	low _ledArray
 12274  0625  0020               	movlb	0	; select bank0
 12275  0626  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12276  0627  3000               	movlw	high _ledArray
 12277  0628  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12278  0629  300A               	movlw	10
 12279  062A  00BB               	movwf	___lwmod@divisor
 12280  062B  3000               	movlw	0
 12281  062C  00BC               	movwf	___lwmod@divisor+1
 12282  062D  31A7  2769  3184   	fcall	_rand
 12283  0630  0020               	movlb	0	; select bank0
 12284  0631  0835               	movf	?_rand,w
 12285  0632  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12286  0633  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12287  0634  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12288  0635  00BD               	movwf	___lwmod@dividend
 12289  0636  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12290  0637  00BE               	movwf	___lwmod@dividend+1
 12291  0638  31A5  25D5  3184   	fcall	___lwmod
 12292  063B  0020               	movlb	0	; select bank0
 12293  063C  083C               	movf	?___lwmod+1,w
 12294  063D  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12295  063E  083B               	movf	?___lwmod,w
 12296  063F  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12297  0640  30FF               	movlw	255
 12298  0641  00BB               	movwf	___awmod@divisor
 12299  0642  3000               	movlw	0
 12300  0643  00BC               	movwf	___awmod@divisor+1
 12301  0644  31A7  2769  3184   	fcall	_rand
 12302  0647  0020               	movlb	0	; select bank0
 12303  0648  0836               	movf	?_rand+1,w
 12304  0649  00BE               	movwf	___awmod@dividend+1
 12305  064A  0835               	movf	?_rand,w
 12306  064B  00BD               	movwf	___awmod@dividend
 12307  064C  31A6  26DB  3184   	fcall	___awmod
 12308  064F  0020               	movlb	0	; select bank0
 12309  0650  083B               	movf	?___awmod,w
 12310  0651  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12311  0652  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12312  0653  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12313  0654  30FF               	movlw	255
 12314  0655  00BB               	movwf	___awmod@divisor
 12315  0656  3000               	movlw	0
 12316  0657  00BC               	movwf	___awmod@divisor+1
 12317  0658  31A7  2769  3184   	fcall	_rand
 12318  065B  0020               	movlb	0	; select bank0
 12319  065C  0836               	movf	?_rand+1,w
 12320  065D  00BE               	movwf	___awmod@dividend+1
 12321  065E  0835               	movf	?_rand,w
 12322  065F  00BD               	movwf	___awmod@dividend
 12323  0660  31A6  26DB  3184   	fcall	___awmod
 12324  0663  0020               	movlb	0	; select bank0
 12325  0664  083B               	movf	?___awmod,w
 12326  0665  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12327  0666  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12328  0667  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12329  0668  30FF               	movlw	255
 12330  0669  00BB               	movwf	___awmod@divisor
 12331  066A  3000               	movlw	0
 12332  066B  00BC               	movwf	___awmod@divisor+1
 12333  066C  31A7  2769  3184   	fcall	_rand
 12334  066F  0020               	movlb	0	; select bank0
 12335  0670  0836               	movf	?_rand+1,w
 12336  0671  00BE               	movwf	___awmod@dividend+1
 12337  0672  0835               	movf	?_rand,w
 12338  0673  00BD               	movwf	___awmod@dividend
 12339  0674  31A6  26DB  3184   	fcall	___awmod
 12340  0677  0020               	movlb	0	; select bank0
 12341  0678  083B               	movf	?___awmod,w
 12342  0679  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12343  067A  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12344  067B  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12345  067C  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12346                           
 12347                           ;clockLEDs.c: 682:     WS2812b_SetSinglePixelColor( &ledArray,
 12348  067F  3062               	movlw	low _ledArray
 12349  0680  0020               	movlb	0	; select bank0
 12350  0681  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12351  0682  3000               	movlw	high _ledArray
 12352  0683  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12353  0684  300A               	movlw	10
 12354  0685  00BB               	movwf	___lwmod@divisor
 12355  0686  3000               	movlw	0
 12356  0687  00BC               	movwf	___lwmod@divisor+1
 12357  0688  31A7  2769  3184   	fcall	_rand
 12358  068B  0020               	movlb	0	; select bank0
 12359  068C  0835               	movf	?_rand,w
 12360  068D  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12361  068E  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12362  068F  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12363  0690  00BD               	movwf	___lwmod@dividend
 12364  0691  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12365  0692  00BE               	movwf	___lwmod@dividend+1
 12366  0693  31A5  25D5  3184   	fcall	___lwmod
 12367  0696  0020               	movlb	0	; select bank0
 12368  0697  083C               	movf	?___lwmod+1,w
 12369  0698  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12370  0699  083B               	movf	?___lwmod,w
 12371  069A  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12372  069B  30FF               	movlw	255
 12373  069C  00BB               	movwf	___awmod@divisor
 12374  069D  3000               	movlw	0
 12375  069E  00BC               	movwf	___awmod@divisor+1
 12376  069F  31A7  2769  3184   	fcall	_rand
 12377  06A2  0020               	movlb	0	; select bank0
 12378  06A3  0836               	movf	?_rand+1,w
 12379  06A4  00BE               	movwf	___awmod@dividend+1
 12380  06A5  0835               	movf	?_rand,w
 12381  06A6  00BD               	movwf	___awmod@dividend
 12382  06A7  31A6  26DB  3184   	fcall	___awmod
 12383  06AA  0020               	movlb	0	; select bank0
 12384  06AB  083B               	movf	?___awmod,w
 12385  06AC  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12386  06AD  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12387  06AE  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12388  06AF  30FF               	movlw	255
 12389  06B0  00BB               	movwf	___awmod@divisor
 12390  06B1  3000               	movlw	0
 12391  06B2  00BC               	movwf	___awmod@divisor+1
 12392  06B3  31A7  2769  3184   	fcall	_rand
 12393  06B6  0020               	movlb	0	; select bank0
 12394  06B7  0836               	movf	?_rand+1,w
 12395  06B8  00BE               	movwf	___awmod@dividend+1
 12396  06B9  0835               	movf	?_rand,w
 12397  06BA  00BD               	movwf	___awmod@dividend
 12398  06BB  31A6  26DB  3184   	fcall	___awmod
 12399  06BE  0020               	movlb	0	; select bank0
 12400  06BF  083B               	movf	?___awmod,w
 12401  06C0  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12402  06C1  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12403  06C2  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12404  06C3  30FF               	movlw	255
 12405  06C4  00BB               	movwf	___awmod@divisor
 12406  06C5  3000               	movlw	0
 12407  06C6  00BC               	movwf	___awmod@divisor+1
 12408  06C7  31A7  2769  3184   	fcall	_rand
 12409  06CA  0020               	movlb	0	; select bank0
 12410  06CB  0836               	movf	?_rand+1,w
 12411  06CC  00BE               	movwf	___awmod@dividend+1
 12412  06CD  0835               	movf	?_rand,w
 12413  06CE  00BD               	movwf	___awmod@dividend
 12414  06CF  31A6  26DB  3184   	fcall	___awmod
 12415  06D2  0020               	movlb	0	; select bank0
 12416  06D3  083B               	movf	?___awmod,w
 12417  06D4  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12418  06D5  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12419  06D6  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12420  06D7  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12421                           
 12422                           ;clockLEDs.c: 687:     WS2812b_SetSinglePixelColor( &ledArray,
 12423  06DA  3062               	movlw	low _ledArray
 12424  06DB  0020               	movlb	0	; select bank0
 12425  06DC  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 12426  06DD  3000               	movlw	high _ledArray
 12427  06DE  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 12428  06DF  300A               	movlw	10
 12429  06E0  00BB               	movwf	___lwmod@divisor
 12430  06E1  3000               	movlw	0
 12431  06E2  00BC               	movwf	___lwmod@divisor+1
 12432  06E3  31A7  2769  3184   	fcall	_rand
 12433  06E6  0020               	movlb	0	; select bank0
 12434  06E7  0835               	movf	?_rand,w
 12435  06E8  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12436  06E9  01D8               	clrf	??_Clock_Popcorn_Pattern_Hold+1
 12437  06EA  0857               	movf	??_Clock_Popcorn_Pattern_Hold,w
 12438  06EB  00BD               	movwf	___lwmod@dividend
 12439  06EC  0858               	movf	??_Clock_Popcorn_Pattern_Hold+1,w
 12440  06ED  00BE               	movwf	___lwmod@dividend+1
 12441  06EE  31A5  25D5  3184   	fcall	___lwmod
 12442  06F1  0020               	movlb	0	; select bank0
 12443  06F2  083C               	movf	?___lwmod+1,w
 12444  06F3  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 12445  06F4  083B               	movf	?___lwmod,w
 12446  06F5  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 12447  06F6  30FF               	movlw	255
 12448  06F7  00BB               	movwf	___awmod@divisor
 12449  06F8  3000               	movlw	0
 12450  06F9  00BC               	movwf	___awmod@divisor+1
 12451  06FA  31A7  2769  3184   	fcall	_rand
 12452  06FD  0020               	movlb	0	; select bank0
 12453  06FE  0836               	movf	?_rand+1,w
 12454  06FF  00BE               	movwf	___awmod@dividend+1
 12455  0700  0835               	movf	?_rand,w
 12456  0701  00BD               	movwf	___awmod@dividend
 12457  0702  31A6  26DB  3184   	fcall	___awmod
 12458  0705  0020               	movlb	0	; select bank0
 12459  0706  083B               	movf	?___awmod,w
 12460  0707  00D9               	movwf	??_Clock_Popcorn_Pattern_Hold+2
 12461  0708  0859               	movf	??_Clock_Popcorn_Pattern_Hold+2,w
 12462  0709  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 12463  070A  30FF               	movlw	255
 12464  070B  00BB               	movwf	___awmod@divisor
 12465  070C  3000               	movlw	0
 12466  070D  00BC               	movwf	___awmod@divisor+1
 12467  070E  31A7  2769  3184   	fcall	_rand
 12468  0711  0020               	movlb	0	; select bank0
 12469  0712  0836               	movf	?_rand+1,w
 12470  0713  00BE               	movwf	___awmod@dividend+1
 12471  0714  0835               	movf	?_rand,w
 12472  0715  00BD               	movwf	___awmod@dividend
 12473  0716  31A6  26DB  3184   	fcall	___awmod
 12474  0719  0020               	movlb	0	; select bank0
 12475  071A  083B               	movf	?___awmod,w
 12476  071B  00DA               	movwf	??_Clock_Popcorn_Pattern_Hold+3
 12477  071C  085A               	movf	??_Clock_Popcorn_Pattern_Hold+3,w
 12478  071D  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 12479  071E  30FF               	movlw	255
 12480  071F  00BB               	movwf	___awmod@divisor
 12481  0720  3000               	movlw	0
 12482  0721  00BC               	movwf	___awmod@divisor+1
 12483  0722  31A7  2769  3184   	fcall	_rand
 12484  0725  0020               	movlb	0	; select bank0
 12485  0726  0836               	movf	?_rand+1,w
 12486  0727  00BE               	movwf	___awmod@dividend+1
 12487  0728  0835               	movf	?_rand,w
 12488  0729  00BD               	movwf	___awmod@dividend
 12489  072A  31A6  26DB  3184   	fcall	___awmod
 12490  072D  0020               	movlb	0	; select bank0
 12491  072E  083B               	movf	?___awmod,w
 12492  072F  00DB               	movwf	??_Clock_Popcorn_Pattern_Hold+4
 12493  0730  085B               	movf	??_Clock_Popcorn_Pattern_Hold+4,w
 12494  0731  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 12495  0732  319B  2386  3184   	fcall	_WS2812b_SetSinglePixelColor
 12496                           
 12497                           ;clockLEDs.c: 692:     WS2812B_Render( &ledArray );
 12498  0735  3062               	movlw	low _ledArray
 12499  0736  0020               	movlb	0	; select bank0
 12500  0737  00A9               	movwf	WS2812B_Render@strip
 12501  0738  3000               	movlw	high _ledArray
 12502  0739  00AA               	movwf	WS2812B_Render@strip+1
 12503  073A  3190  2031  3184   	fcall	_WS2812B_Render
 12504                           
 12505                           ;clockLEDs.c: 693:     _delay((unsigned long)((150)*(32000000u/4000.0)));
 12506  073D  3007               	movlw	7
 12507  073E  0020               	movlb	0	; select bank0
 12508  073F  00D8               	movwf	??_Clock_Popcorn_Pattern_Hold+1
 12509  0740  3017               	movlw	23
 12510  0741  00D7               	movwf	??_Clock_Popcorn_Pattern_Hold
 12511  0742  306A               	movlw	106
 12512  0743                     u4957:
 12513  0743  0B89               	decfsz	9,f
 12514  0744  2F43               	goto	u4957
 12515  0745  0BD7               	decfsz	??_Clock_Popcorn_Pattern_Hold,f
 12516  0746  2F43               	goto	u4957
 12517  0747  0BD8               	decfsz	??_Clock_Popcorn_Pattern_Hold+1,f
 12518  0748  2F43               	goto	u4957
 12519  0749  0000               	nop
 12520                           
 12521                           ;clockLEDs.c: 694:     numRenders++;
 12522  074A  3001               	movlw	1
 12523  074B  0022               	movlb	2	; select bank2
 12524  074C  07C5               	addwf	Clock_Popcorn_Pattern_Hold@numRenders^(0+256),f
 12525  074D  3000               	movlw	0
 12526  074E  3DC6               	addwfc	(Clock_Popcorn_Pattern_Hold@numRenders+1)^(0+256),f
 12527                           
 12528                           ;clockLEDs.c: 695:     if( 8 == numRenders )
 12529  074F  3008               	movlw	8
 12530  0750  0645               	xorwf	Clock_Popcorn_Pattern_Hold@numRenders^(0+256),w
 12531  0751  0446               	iorwf	(Clock_Popcorn_Pattern_Hold@numRenders+1)^(0+256),w
 12532  0752  1D03               	btfss	3,2
 12533  0753  0008               	return
 12534                           
 12535                           ;clockLEDs.c: 696:     {;clockLEDs.c: 697:         WS2812b_SetStripConstantColor( &ledAr
      +                          ray,
 12536  0754  3062               	movlw	low _ledArray
 12537  0755  0020               	movlb	0	; select bank0
 12538  0756  00CF               	movwf	WS2812b_SetStripConstantColor@strip
 12539  0757  3000               	movlw	high _ledArray
 12540  0758  00D0               	movwf	WS2812b_SetStripConstantColor@strip+1
 12541  0759  01D1               	clrf	WS2812b_SetStripConstantColor@red
 12542  075A  01D2               	clrf	WS2812b_SetStripConstantColor@green
 12543  075B  01D3               	clrf	WS2812b_SetStripConstantColor@blue
 12544  075C  31A5  25A9         	fcall	_WS2812b_SetStripConstantColor
 12545                           
 12546                           ;clockLEDs.c: 701:         numRenders = 0;
 12547  075E  0022               	movlb	2	; select bank2
 12548  075F  01C5               	clrf	Clock_Popcorn_Pattern_Hold@numRenders^(0+256)
 12549  0760  01C6               	clrf	(Clock_Popcorn_Pattern_Hold@numRenders+1)^(0+256)
 12550  0761  0008               	return
 12551  0762                     __end_of_Clock_Popcorn_Pattern_Hold:
 12552                           
 12553                           	psect	text17
 12554  2769                     __ptext17:	
 12555 ;; *************** function _rand *****************
 12556 ;; Defined at:
 12557 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\rand.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;		None
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;		None
 12562 ;; Return value:  Size  Location     Type
 12563 ;;                  2   20[BANK0 ] int 
 12564 ;; Registers used:
 12565 ;;		wreg, status,2, status,0, pclath, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12571 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12573 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12574 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12575 ;;Total ram usage:        6 bytes
 12576 ;; Hardware stack levels used: 1
 12577 ;; Hardware stack levels required when called: 6
 12578 ;; This function calls:
 12579 ;;		___lmul
 12580 ;; This function is called by:
 12581 ;;		_Clock_Popcorn_Pattern
 12582 ;;		_Clock_Popcorn_Pattern_Hold
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586  2769                     _rand:	
 12587                           ;psect for function _rand
 12588                           
 12589                           
 12590                           ;incstack = 0
 12591                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 12592  2769  0022               	movlb	2	; select bank2
 12593  276A  084A               	movf	(_seed+3)^(0+256),w
 12594  276B  0020               	movlb	0	; select bank0
 12595  276C  00AC               	movwf	___lmul@multiplier+3
 12596  276D  0022               	movlb	2	; select bank2
 12597  276E  0849               	movf	(_seed+2)^(0+256),w
 12598  276F  0020               	movlb	0	; select bank0
 12599  2770  00AB               	movwf	___lmul@multiplier+2
 12600  2771  0022               	movlb	2	; select bank2
 12601  2772  0848               	movf	(_seed+1)^(0+256),w
 12602  2773  0020               	movlb	0	; select bank0
 12603  2774  00AA               	movwf	___lmul@multiplier+1
 12604  2775  0022               	movlb	2	; select bank2
 12605  2776  0847               	movf	_seed^(0+256),w
 12606  2777  0020               	movlb	0	; select bank0
 12607  2778  00A9               	movwf	___lmul@multiplier
 12608  2779  304C               	movlw	76
 12609  277A  00B0               	movwf	___lmul@multiplicand+3
 12610  277B  3095               	movlw	149
 12611  277C  00AF               	movwf	___lmul@multiplicand+2
 12612  277D  307F               	movlw	127
 12613  277E  00AE               	movwf	___lmul@multiplicand+1
 12614  277F  302D               	movlw	45
 12615  2780  00AD               	movwf	___lmul@multiplicand
 12616  2781  3190  2001  31A7   	fcall	___lmul
 12617  2784  3001               	movlw	1
 12618  2785  0020               	movlb	0	; select bank0
 12619  2786  0729               	addwf	?___lmul,w
 12620  2787  0022               	movlb	2	; select bank2
 12621  2788  00C7               	movwf	_seed^(0+256)
 12622  2789  3000               	movlw	0
 12623  278A  0020               	movlb	0	; select bank0
 12624  278B  3D2A               	addwfc	?___lmul+1,w
 12625  278C  0022               	movlb	2	; select bank2
 12626  278D  00C8               	movwf	(_seed+1)^(0+256)
 12627  278E  3000               	movlw	0
 12628  278F  0020               	movlb	0	; select bank0
 12629  2790  3D2B               	addwfc	?___lmul+2,w
 12630  2791  0022               	movlb	2	; select bank2
 12631  2792  00C9               	movwf	(_seed+2)^(0+256)
 12632  2793  3000               	movlw	0
 12633  2794  0020               	movlb	0	; select bank0
 12634  2795  3D2C               	addwfc	?___lmul+3,w
 12635  2796  0022               	movlb	2	; select bank2
 12636  2797  00CA               	movwf	(_seed+3)^(0+256)
 12637  2798  0847               	movf	_seed^(0+256),w
 12638  2799  0020               	movlb	0	; select bank0
 12639  279A  00B7               	movwf	??_rand
 12640  279B  0022               	movlb	2	; select bank2
 12641  279C  0848               	movf	(_seed+1)^(0+256),w
 12642  279D  0020               	movlb	0	; select bank0
 12643  279E  00B8               	movwf	??_rand+1
 12644  279F  0022               	movlb	2	; select bank2
 12645  27A0  0849               	movf	(_seed+2)^(0+256),w
 12646  27A1  0020               	movlb	0	; select bank0
 12647  27A2  00B9               	movwf	??_rand+2
 12648  27A3  0022               	movlb	2	; select bank2
 12649  27A4  084A               	movf	(_seed+3)^(0+256),w
 12650  27A5  0020               	movlb	0	; select bank0
 12651  27A6  00BA               	movwf	??_rand+3
 12652  27A7  3011               	movlw	17
 12653  27A8                     u3925:
 12654  27A8  36BA               	lsrf	??_rand+3,f
 12655  27A9  0CB9               	rrf	??_rand+2,f
 12656  27AA  0CB8               	rrf	??_rand+1,f
 12657  27AB  0CB7               	rrf	??_rand,f
 12658  27AC  0B89               	decfsz	9,f
 12659  27AD  2FA8               	goto	u3925
 12660  27AE  0838               	movf	??_rand+1,w
 12661  27AF  00B6               	movwf	?_rand+1
 12662  27B0  0837               	movf	??_rand,w
 12663  27B1  00B5               	movwf	?_rand
 12664  27B2  0008               	return
 12665  27B3                     __end_of_rand:
 12666                           
 12667                           	psect	text18
 12668  1001                     __ptext18:	
 12669 ;; *************** function ___lmul *****************
 12670 ;; Defined at:
 12671 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;  multiplier      4    8[BANK0 ] unsigned long 
 12674 ;;  multiplicand    4   12[BANK0 ] unsigned long 
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;  product         4   16[BANK0 ] unsigned long 
 12677 ;; Return value:  Size  Location     Type
 12678 ;;                  4    8[BANK0 ] unsigned long 
 12679 ;; Registers used:
 12680 ;;		wreg, status,2, status,0
 12681 ;; Tracked objects:
 12682 ;;		On entry : 0/0
 12683 ;;		On exit  : 0/0
 12684 ;;		Unchanged: 0/0
 12685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12686 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12687 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12689 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12690 ;;Total ram usage:       12 bytes
 12691 ;; Hardware stack levels used: 1
 12692 ;; Hardware stack levels required when called: 5
 12693 ;; This function calls:
 12694 ;;		Nothing
 12695 ;; This function is called by:
 12696 ;;		_Time_RenderIfMinutesHaveChanged
 12697 ;;		_rand
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701  1001                     ___lmul:	
 12702                           ;psect for function ___lmul
 12703                           
 12704                           
 12705                           ;incstack = 0
 12706                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12707  1001  3000               	movlw	0
 12708  1002  0020               	movlb	0	; select bank0
 12709  1003  00B4               	movwf	___lmul@product+3
 12710  1004  3000               	movlw	0
 12711  1005  00B3               	movwf	___lmul@product+2
 12712  1006  3000               	movlw	0
 12713  1007  00B2               	movwf	___lmul@product+1
 12714  1008  3000               	movlw	0
 12715  1009  00B1               	movwf	___lmul@product
 12716  100A                     l4984:
 12717  100A  1C29               	btfss	___lmul@multiplier,0
 12718  100B  2814               	goto	l4988
 12719  100C  082D               	movf	___lmul@multiplicand,w
 12720  100D  07B1               	addwf	___lmul@product,f
 12721  100E  082E               	movf	___lmul@multiplicand+1,w
 12722  100F  3DB2               	addwfc	___lmul@product+1,f
 12723  1010  082F               	movf	___lmul@multiplicand+2,w
 12724  1011  3DB3               	addwfc	___lmul@product+2,f
 12725  1012  0830               	movf	___lmul@multiplicand+3,w
 12726  1013  3DB4               	addwfc	___lmul@product+3,f
 12727  1014                     l4988:
 12728  1014  3001               	movlw	1
 12729  1015                     u3795:
 12730  1015  35AD               	lslf	___lmul@multiplicand,f
 12731  1016  0DAE               	rlf	___lmul@multiplicand+1,f
 12732  1017  0DAF               	rlf	___lmul@multiplicand+2,f
 12733  1018  0DB0               	rlf	___lmul@multiplicand+3,f
 12734  1019  0B89               	decfsz	9,f
 12735  101A  2815               	goto	u3795
 12736  101B  3001               	movlw	1
 12737  101C                     u3805:
 12738  101C  36AC               	lsrf	___lmul@multiplier+3,f
 12739  101D  0CAB               	rrf	___lmul@multiplier+2,f
 12740  101E  0CAA               	rrf	___lmul@multiplier+1,f
 12741  101F  0CA9               	rrf	___lmul@multiplier,f
 12742  1020  0B89               	decfsz	9,f
 12743  1021  281C               	goto	u3805
 12744  1022  082C               	movf	___lmul@multiplier+3,w
 12745  1023  042B               	iorwf	___lmul@multiplier+2,w
 12746  1024  042A               	iorwf	___lmul@multiplier+1,w
 12747  1025  0429               	iorwf	___lmul@multiplier,w
 12748  1026  1D03               	skipz
 12749  1027  280A               	goto	l4984
 12750  1028  0834               	movf	___lmul@product+3,w
 12751  1029  00AC               	movwf	?___lmul+3
 12752  102A  0833               	movf	___lmul@product+2,w
 12753  102B  00AB               	movwf	?___lmul+2
 12754  102C  0832               	movf	___lmul@product+1,w
 12755  102D  00AA               	movwf	?___lmul+1
 12756  102E  0831               	movf	___lmul@product,w
 12757  102F  00A9               	movwf	?___lmul
 12758  1030  0008               	return
 12759  1031                     __end_of___lmul:
 12760                           
 12761                           	psect	text19
 12762  0884                     __ptext19:	
 12763 ;; *************** function _STATE_ChangeColorMode *****************
 12764 ;; Defined at:
 12765 ;;		line 62 in file "changeColorMode.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;		None
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;  eepromReadba    8    4[BANK3 ] unsigned char [8]
 12770 ;;  rotCounts       4   30[BANK3 ] long 
 12771 ;;  currentTime     4    0[BANK3 ] unsigned long 
 12772 ;;  backgroundSe    3   25[BANK3 ] unsigned char [3]
 12773 ;;  digitSelecti    3   22[BANK3 ] unsigned char [3]
 12774 ;;  crc             2   28[BANK3 ] unsigned short 
 12775 ;;  maxRetries      2   20[BANK3 ] unsigned int 
 12776 ;;  arrayRowIdx     1   34[BANK3 ] char 
 12777 ;;  wasReadbackV    1    0        _Bool 
 12778 ;; Return value:  Size  Location     Type
 12779 ;;                  1    wreg      _Bool 
 12780 ;; Registers used:
 12781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12782 ;; Tracked objects:
 12783 ;;		On entry : 0/0
 12784 ;;		On exit  : 0/0
 12785 ;;		Unchanged: 0/0
 12786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12788 ;;      Locals:         0       0       0       0      35       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12789 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12790 ;;      Totals:         0       0       8       0      35       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12791 ;;Total ram usage:       43 bytes
 12792 ;; Hardware stack levels used: 1
 12793 ;; Hardware stack levels required when called: 10
 12794 ;; This function calls:
 12795 ;;		_CRC16_Calculate16bitCRC
 12796 ;;		_Clock_ForceRender
 12797 ;;		_Clock_PrerenderPixelAndBackgroundValues
 12798 ;;		_Clock_SetBackgroundRGBArray
 12799 ;;		_Clock_SetDigitRGBArray
 12800 ;;		_DATAEE_ReadByte
 12801 ;;		_DATAEE_WriteByte
 12802 ;;		_RotaryEncoder_GetShaftCounts
 12803 ;;		_RotaryEncoder_HasButtonPressOccurred
 12804 ;;		_Time_GetCurrentTimeInSeconds
 12805 ;;		_Time_RenderInputTime
 12806 ;;		___wmul
 12807 ;; This function is called by:
 12808 ;;		_APP_TASKS
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812  0884                     _STATE_ChangeColorMode:	
 12813                           ;psect for function _STATE_ChangeColorMode
 12814                           
 12815                           
 12816                           ;changeColorMode.c: 65:     Clock_SetBackgroundRGBArray( 0u, 0u, 0u );
 12817                           
 12818                           ;incstack = 0
 12819                           ; Regs used in _STATE_ChangeColorMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12820  0884  0020               	movlb	0	; select bank0
 12821  0885  01AF               	clrf	Clock_SetBackgroundRGBArray@green
 12822  0886  01B0               	clrf	Clock_SetBackgroundRGBArray@blue
 12823  0887  3000               	movlw	0
 12824  0888  31A3  23F7  3188   	fcall	_Clock_SetBackgroundRGBArray
 12825                           
 12826                           ;changeColorMode.c: 66:     const TimeInDigits dColorTime = {;changeColorMode.c: 72:    
      +                           Clock_PrerenderPixelAndBackgroundValues( );
 12827  088B  31A6  2602  3188   	fcall	_Clock_PrerenderPixelAndBackgroundValues
 12828                           
 12829                           ;changeColorMode.c: 73:     Clock_ForceRender( &dColorTime );
 12830  088E  30AA               	movlw	low (STATE_ChangeColorMode@dColorTime| (0+32768))
 12831  088F  0020               	movlb	0	; select bank0
 12832  0890  00D3               	movwf	Clock_ForceRender@t
 12833  0891  30A8               	movlw	high (STATE_ChangeColorMode@dColorTime| (0+32768))
 12834  0892  00D4               	movwf	Clock_ForceRender@t+1
 12835  0893  3191  2121  3188   	fcall	_Clock_ForceRender
 12836                           
 12837                           ;changeColorMode.c: 75:     RotaryEncoder_HasButtonPressOccurred( );
 12838  0896  31A3  23D1  3188   	fcall	_RotaryEncoder_HasButtonPressOccurred
 12839                           
 12840                           ;changeColorMode.c: 77:     int32_t rotCounts;;changeColorMode.c: 78:     int8_t arrayRo
      +                          wIdx = 0;
 12841  0899  0023               	movlb	3	; select bank3
 12842  089A  01C2               	clrf	STATE_ChangeColorMode@arrayRowIdx^(0+384)
 12843  089B                     l5956:
 12844                           
 12845                           ;changeColorMode.c: 82:     {;changeColorMode.c: 83:         rotCounts = RotaryEncoder_G
      +                          etShaftCounts( );
 12846  089B  31A5  2535  3188   	fcall	_RotaryEncoder_GetShaftCounts
 12847  089E  0020               	movlb	0	; select bank0
 12848  089F  082C               	movf	?_RotaryEncoder_GetShaftCounts+3,w
 12849  08A0  0023               	movlb	3	; select bank3
 12850  08A1  00C1               	movwf	(STATE_ChangeColorMode@rotCounts+3)^(0+384)
 12851  08A2  0020               	movlb	0	; select bank0
 12852  08A3  082B               	movf	?_RotaryEncoder_GetShaftCounts+2,w
 12853  08A4  0023               	movlb	3	; select bank3
 12854  08A5  00C0               	movwf	(STATE_ChangeColorMode@rotCounts+2)^(0+384)
 12855  08A6  0020               	movlb	0	; select bank0
 12856  08A7  082A               	movf	?_RotaryEncoder_GetShaftCounts+1,w
 12857  08A8  0023               	movlb	3	; select bank3
 12858  08A9  00BF               	movwf	(STATE_ChangeColorMode@rotCounts+1)^(0+384)
 12859  08AA  0020               	movlb	0	; select bank0
 12860  08AB  0829               	movf	?_RotaryEncoder_GetShaftCounts,w
 12861  08AC  0023               	movlb	3	; select bank3
 12862  08AD  00BE               	movwf	STATE_ChangeColorMode@rotCounts^(0+384)
 12863                           
 12864                           ;changeColorMode.c: 85:         if( 0 != rotCounts )
 12865  08AE  0841               	movf	(STATE_ChangeColorMode@rotCounts+3)^(0+384),w
 12866  08AF  0440               	iorwf	(STATE_ChangeColorMode@rotCounts+2)^(0+384),w
 12867  08B0  043F               	iorwf	(STATE_ChangeColorMode@rotCounts+1)^(0+384),w
 12868  08B1  043E               	iorwf	STATE_ChangeColorMode@rotCounts^(0+384),w
 12869  08B2  1903               	skipnz
 12870  08B3  2946               	goto	l5980
 12871                           
 12872                           ;changeColorMode.c: 86:         {;changeColorMode.c: 87:             arrayRowIdx += rotC
      +                          ounts;
 12873  08B4  083E               	movf	STATE_ChangeColorMode@rotCounts^(0+384),w
 12874  08B5  0021               	movlb	1	; select bank1
 12875  08B6  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 12876  08B7  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 12877  08B8  0023               	movlb	3	; select bank3
 12878  08B9  07C2               	addwf	STATE_ChangeColorMode@arrayRowIdx^(0+384),f
 12879                           
 12880                           ;changeColorMode.c: 88:             arrayRowIdx = ( (arrayRowIdx < 0) ? (int8_t) 16u : (
      +                          arrayRowIdx > (int8_t) 16u) ? 0 : arrayRowIdx);
 12881  08BA  1BC2               	btfsc	STATE_ChangeColorMode@arrayRowIdx^(0+384),7
 12882  08BB  28CE               	goto	l5972
 12883  08BC  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 12884  08BD  3A80               	xorlw	128
 12885  08BE  3E6F               	addlw	-145
 12886  08BF  1803               	skipnc
 12887  08C0  28C7               	goto	l5968
 12888  08C1  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 12889  08C2  00AE               	movwf	_STATE_ChangeColorMode$990^(0+384)
 12890  08C3  01AF               	clrf	(_STATE_ChangeColorMode$990+1)^(0+384)
 12891  08C4  1BAE               	btfsc	_STATE_ChangeColorMode$990^(0+384),7
 12892  08C5  03AF               	decf	(_STATE_ChangeColorMode$990+1)^(0+384),f
 12893  08C6  28C9               	goto	l5970
 12894  08C7                     l5968:
 12895  08C7  01AE               	clrf	_STATE_ChangeColorMode$990^(0+384)
 12896  08C8  01AF               	clrf	(_STATE_ChangeColorMode$990+1)^(0+384)
 12897  08C9                     l5970:
 12898  08C9  082F               	movf	(_STATE_ChangeColorMode$990+1)^(0+384),w
 12899  08CA  00AD               	movwf	(_STATE_ChangeColorMode$989+1)^(0+384)
 12900  08CB  082E               	movf	_STATE_ChangeColorMode$990^(0+384),w
 12901  08CC  00AC               	movwf	_STATE_ChangeColorMode$989^(0+384)
 12902  08CD  28D2               	goto	l471
 12903  08CE                     l5972:
 12904  08CE  3010               	movlw	16
 12905  08CF  00AC               	movwf	_STATE_ChangeColorMode$989^(0+384)
 12906  08D0  3000               	movlw	0
 12907  08D1  00AD               	movwf	(_STATE_ChangeColorMode$989^(0+384)+1)
 12908  08D2                     l471:
 12909  08D2  082C               	movf	_STATE_ChangeColorMode$989^(0+384),w
 12910  08D3  0021               	movlb	1	; select bank1
 12911  08D4  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 12912  08D5  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 12913  08D6  0023               	movlb	3	; select bank3
 12914  08D7  00C2               	movwf	STATE_ChangeColorMode@arrayRowIdx^(0+384)
 12915                           
 12916                           ;changeColorMode.c: 89:             Clock_SetDigitRGBArray( colorRGBArrays[arrayRowIdx][
      +                          0],
 12917  08D8  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 12918  08D9  0021               	movlb	1	; select bank1
 12919  08DA  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 12920  08DB  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 12921  08DC  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 12922  08DD  0020               	movlb	0	; select bank0
 12923  08DE  00A9               	movwf	___wmul@multiplier
 12924  08DF  0021               	movlb	1	; select bank1
 12925  08E0  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 12926  08E1  0020               	movlb	0	; select bank0
 12927  08E2  00AA               	movwf	___wmul@multiplier+1
 12928  08E3  3003               	movlw	3
 12929  08E4  00AB               	movwf	___wmul@multiplicand
 12930  08E5  3000               	movlw	0
 12931  08E6  00AC               	movwf	___wmul@multiplicand+1
 12932  08E7  31A4  247E  3188   	fcall	___wmul
 12933  08EA  0020               	movlb	0	; select bank0
 12934  08EB  082A               	movf	?___wmul+1,w
 12935  08EC  0085               	movwf	5
 12936  08ED  0829               	movf	?___wmul,w
 12937  08EE  0084               	movwf	4
 12938  08EF  3001               	movlw	low ((_colorRGBArrays+1)| (0+32768))
 12939  08F0  0784               	addwf	4,f
 12940  08F1  30A8               	movlw	high ((_colorRGBArrays+1)| (0+32768))
 12941  08F2  3D85               	addwfc	5,f
 12942  08F3  0800               	movf	0,w	;code access
 12943  08F4  0021               	movlb	1	; select bank1
 12944  08F5  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 12945  08F6  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 12946  08F7  0020               	movlb	0	; select bank0
 12947  08F8  00AF               	movwf	Clock_SetDigitRGBArray@green
 12948  08F9  0023               	movlb	3	; select bank3
 12949  08FA  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 12950  08FB  0021               	movlb	1	; select bank1
 12951  08FC  00B3               	movwf	(??_STATE_ChangeColorMode+3)^(0+128)
 12952  08FD  01B4               	clrf	((??_STATE_ChangeColorMode+3)^(0+128)+1)
 12953  08FE  0833               	movf	(??_STATE_ChangeColorMode+3)^(0+128),w
 12954  08FF  0020               	movlb	0	; select bank0
 12955  0900  00A9               	movwf	___wmul@multiplier
 12956  0901  0021               	movlb	1	; select bank1
 12957  0902  0834               	movf	(??_STATE_ChangeColorMode+4)^(0+128),w
 12958  0903  0020               	movlb	0	; select bank0
 12959  0904  00AA               	movwf	___wmul@multiplier+1
 12960  0905  3003               	movlw	3
 12961  0906  00AB               	movwf	___wmul@multiplicand
 12962  0907  3000               	movlw	0
 12963  0908  00AC               	movwf	___wmul@multiplicand+1
 12964  0909  31A4  247E  3188   	fcall	___wmul
 12965  090C  0020               	movlb	0	; select bank0
 12966  090D  082A               	movf	?___wmul+1,w
 12967  090E  0085               	movwf	5
 12968  090F  0829               	movf	?___wmul,w
 12969  0910  0084               	movwf	4
 12970  0911  3002               	movlw	low ((_colorRGBArrays+2)| (0+32768))
 12971  0912  0784               	addwf	4,f
 12972  0913  30A8               	movlw	high ((_colorRGBArrays+2)| (0+32768))
 12973  0914  3D85               	addwfc	5,f
 12974  0915  0800               	movf	0,w	;code access
 12975  0916  0021               	movlb	1	; select bank1
 12976  0917  00B5               	movwf	(??_STATE_ChangeColorMode+5)^(0+128)
 12977  0918  0835               	movf	(??_STATE_ChangeColorMode+5)^(0+128),w
 12978  0919  0020               	movlb	0	; select bank0
 12979  091A  00B0               	movwf	Clock_SetDigitRGBArray@blue
 12980  091B  0023               	movlb	3	; select bank3
 12981  091C  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 12982  091D  0021               	movlb	1	; select bank1
 12983  091E  00B6               	movwf	(??_STATE_ChangeColorMode+6)^(0+128)
 12984  091F  01B7               	clrf	((??_STATE_ChangeColorMode+6)^(0+128)+1)
 12985  0920  0836               	movf	(??_STATE_ChangeColorMode+6)^(0+128),w
 12986  0921  0020               	movlb	0	; select bank0
 12987  0922  00A9               	movwf	___wmul@multiplier
 12988  0923  0021               	movlb	1	; select bank1
 12989  0924  0837               	movf	(??_STATE_ChangeColorMode+7)^(0+128),w
 12990  0925  0020               	movlb	0	; select bank0
 12991  0926  00AA               	movwf	___wmul@multiplier+1
 12992  0927  3003               	movlw	3
 12993  0928  00AB               	movwf	___wmul@multiplicand
 12994  0929  3000               	movlw	0
 12995  092A  00AC               	movwf	___wmul@multiplicand+1
 12996  092B  31A4  247E  3188   	fcall	___wmul
 12997  092E  0020               	movlb	0	; select bank0
 12998  092F  082A               	movf	?___wmul+1,w
 12999  0930  0085               	movwf	5
 13000  0931  0829               	movf	?___wmul,w
 13001  0932  0084               	movwf	4
 13002  0933  3000               	movlw	low (_colorRGBArrays| (0+32768))
 13003  0934  0784               	addwf	4,f
 13004  0935  30A8               	movlw	high (_colorRGBArrays| (0+32768))
 13005  0936  3D85               	addwfc	5,f
 13006  0937  0800               	movf	0,w	;code access
 13007  0938  31A4  240B  3188   	fcall	_Clock_SetDigitRGBArray
 13008                           
 13009                           ;changeColorMode.c: 92:             Clock_PrerenderPixelAndBackgroundValues( );
 13010  093B  31A6  2602  3188   	fcall	_Clock_PrerenderPixelAndBackgroundValues
 13011                           
 13012                           ;changeColorMode.c: 93:             Clock_ForceRender( &dColorTime );
 13013  093E  30AA               	movlw	low (STATE_ChangeColorMode@dColorTime| (0+32768))
 13014  093F  0020               	movlb	0	; select bank0
 13015  0940  00D3               	movwf	Clock_ForceRender@t
 13016  0941  30A8               	movlw	high (STATE_ChangeColorMode@dColorTime| (0+32768))
 13017  0942  00D4               	movwf	Clock_ForceRender@t+1
 13018  0943  3191  2121  3188   	fcall	_Clock_ForceRender
 13019  0946                     l5980:
 13020                           
 13021                           ;changeColorMode.c: 95:     }
 13022  0946  31A3  23D1  3188   	fcall	_RotaryEncoder_HasButtonPressOccurred
 13023  0949  3A00               	xorlw	0
 13024  094A  1903               	skipnz
 13025  094B  289B               	goto	l5956
 13026                           
 13027                           ;changeColorMode.c: 100:     uint8_t digitSelection[3u] = {
 13028  094C  3000               	movlw	0
 13029  094D  0023               	movlb	3	; select bank3
 13030  094E  00B6               	movwf	STATE_ChangeColorMode@digitSelection^(0+384)
 13031  094F  3000               	movlw	0
 13032  0950  00B7               	movwf	(STATE_ChangeColorMode@digitSelection+1)^(0+384)
 13033  0951  3000               	movlw	0
 13034  0952  00B8               	movwf	(STATE_ChangeColorMode@digitSelection+2)^(0+384)
 13035  0953  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13036  0954  0021               	movlb	1	; select bank1
 13037  0955  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13038  0956  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13039  0957  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13040  0958  0020               	movlb	0	; select bank0
 13041  0959  00A9               	movwf	___wmul@multiplier
 13042  095A  0021               	movlb	1	; select bank1
 13043  095B  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13044  095C  0020               	movlb	0	; select bank0
 13045  095D  00AA               	movwf	___wmul@multiplier+1
 13046  095E  3003               	movlw	3
 13047  095F  00AB               	movwf	___wmul@multiplicand
 13048  0960  3000               	movlw	0
 13049  0961  00AC               	movwf	___wmul@multiplicand+1
 13050  0962  31A4  247E  3188   	fcall	___wmul
 13051  0965  0020               	movlb	0	; select bank0
 13052  0966  082A               	movf	?___wmul+1,w
 13053  0967  0085               	movwf	5
 13054  0968  0829               	movf	?___wmul,w
 13055  0969  0084               	movwf	4
 13056  096A  3000               	movlw	low (_colorRGBArrays| (0+32768))
 13057  096B  0784               	addwf	4,f
 13058  096C  30A8               	movlw	high (_colorRGBArrays| (0+32768))
 13059  096D  3D85               	addwfc	5,f
 13060  096E  0800               	movf	0,w	;code access
 13061  096F  0021               	movlb	1	; select bank1
 13062  0970  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13063  0971  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13064  0972  0023               	movlb	3	; select bank3
 13065  0973  00B6               	movwf	STATE_ChangeColorMode@digitSelection^(0+384)
 13066  0974  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13067  0975  0021               	movlb	1	; select bank1
 13068  0976  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13069  0977  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13070  0978  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13071  0979  0020               	movlb	0	; select bank0
 13072  097A  00A9               	movwf	___wmul@multiplier
 13073  097B  0021               	movlb	1	; select bank1
 13074  097C  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13075  097D  0020               	movlb	0	; select bank0
 13076  097E  00AA               	movwf	___wmul@multiplier+1
 13077  097F  3003               	movlw	3
 13078  0980  00AB               	movwf	___wmul@multiplicand
 13079  0981  3000               	movlw	0
 13080  0982  00AC               	movwf	___wmul@multiplicand+1
 13081  0983  31A4  247E  3188   	fcall	___wmul
 13082  0986  0020               	movlb	0	; select bank0
 13083  0987  082A               	movf	?___wmul+1,w
 13084  0988  0085               	movwf	5
 13085  0989  0829               	movf	?___wmul,w
 13086  098A  0084               	movwf	4
 13087  098B  3001               	movlw	low ((_colorRGBArrays+1)| (0+32768))
 13088  098C  0784               	addwf	4,f
 13089  098D  30A8               	movlw	high ((_colorRGBArrays+1)| (0+32768))
 13090  098E  3D85               	addwfc	5,f
 13091  098F  0800               	movf	0,w	;code access
 13092  0990  0021               	movlb	1	; select bank1
 13093  0991  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13094  0992  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13095  0993  0023               	movlb	3	; select bank3
 13096  0994  00B7               	movwf	(STATE_ChangeColorMode@digitSelection^(0+384)+1)
 13097  0995  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13098  0996  0021               	movlb	1	; select bank1
 13099  0997  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13100  0998  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13101  0999  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13102  099A  0020               	movlb	0	; select bank0
 13103  099B  00A9               	movwf	___wmul@multiplier
 13104  099C  0021               	movlb	1	; select bank1
 13105  099D  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13106  099E  0020               	movlb	0	; select bank0
 13107  099F  00AA               	movwf	___wmul@multiplier+1
 13108  09A0  3003               	movlw	3
 13109  09A1  00AB               	movwf	___wmul@multiplicand
 13110  09A2  3000               	movlw	0
 13111  09A3  00AC               	movwf	___wmul@multiplicand+1
 13112  09A4  31A4  247E  3188   	fcall	___wmul
 13113  09A7  0020               	movlb	0	; select bank0
 13114  09A8  082A               	movf	?___wmul+1,w
 13115  09A9  0085               	movwf	5
 13116  09AA  0829               	movf	?___wmul,w
 13117  09AB  0084               	movwf	4
 13118  09AC  3002               	movlw	low ((_colorRGBArrays+2)| (0+32768))
 13119  09AD  0784               	addwf	4,f
 13120  09AE  30A8               	movlw	high ((_colorRGBArrays+2)| (0+32768))
 13121  09AF  3D85               	addwfc	5,f
 13122  09B0  0800               	movf	0,w	;code access
 13123  09B1  0021               	movlb	1	; select bank1
 13124  09B2  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13125  09B3  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13126  09B4  0023               	movlb	3	; select bank3
 13127  09B5  00B8               	movwf	(STATE_ChangeColorMode@digitSelection^(0+384)+2)
 13128                           
 13129                           ;changeColorMode.c: 106:     RotaryEncoder_HasButtonPressOccurred( );
 13130  09B6  31A3  23D1  3188   	fcall	_RotaryEncoder_HasButtonPressOccurred
 13131  09B9                     l5992:
 13132                           
 13133                           ;changeColorMode.c: 109:     {;changeColorMode.c: 110:         rotCounts = RotaryEncoder
      +                          _GetShaftCounts( );
 13134  09B9  31A5  2535  3188   	fcall	_RotaryEncoder_GetShaftCounts
 13135  09BC  0020               	movlb	0	; select bank0
 13136  09BD  082C               	movf	?_RotaryEncoder_GetShaftCounts+3,w
 13137  09BE  0023               	movlb	3	; select bank3
 13138  09BF  00C1               	movwf	(STATE_ChangeColorMode@rotCounts+3)^(0+384)
 13139  09C0  0020               	movlb	0	; select bank0
 13140  09C1  082B               	movf	?_RotaryEncoder_GetShaftCounts+2,w
 13141  09C2  0023               	movlb	3	; select bank3
 13142  09C3  00C0               	movwf	(STATE_ChangeColorMode@rotCounts+2)^(0+384)
 13143  09C4  0020               	movlb	0	; select bank0
 13144  09C5  082A               	movf	?_RotaryEncoder_GetShaftCounts+1,w
 13145  09C6  0023               	movlb	3	; select bank3
 13146  09C7  00BF               	movwf	(STATE_ChangeColorMode@rotCounts+1)^(0+384)
 13147  09C8  0020               	movlb	0	; select bank0
 13148  09C9  0829               	movf	?_RotaryEncoder_GetShaftCounts,w
 13149  09CA  0023               	movlb	3	; select bank3
 13150  09CB  00BE               	movwf	STATE_ChangeColorMode@rotCounts^(0+384)
 13151                           
 13152                           ;changeColorMode.c: 112:         if( 0 != rotCounts )
 13153  09CC  0841               	movf	(STATE_ChangeColorMode@rotCounts+3)^(0+384),w
 13154  09CD  0440               	iorwf	(STATE_ChangeColorMode@rotCounts+2)^(0+384),w
 13155  09CE  043F               	iorwf	(STATE_ChangeColorMode@rotCounts+1)^(0+384),w
 13156  09CF  043E               	iorwf	STATE_ChangeColorMode@rotCounts^(0+384),w
 13157  09D0  1903               	skipnz
 13158  09D1  2A64               	goto	l6016
 13159                           
 13160                           ;changeColorMode.c: 113:         {;changeColorMode.c: 114:             arrayRowIdx += ro
      +                          tCounts;
 13161  09D2  083E               	movf	STATE_ChangeColorMode@rotCounts^(0+384),w
 13162  09D3  0021               	movlb	1	; select bank1
 13163  09D4  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13164  09D5  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13165  09D6  0023               	movlb	3	; select bank3
 13166  09D7  07C2               	addwf	STATE_ChangeColorMode@arrayRowIdx^(0+384),f
 13167                           
 13168                           ;changeColorMode.c: 115:             arrayRowIdx = ( (arrayRowIdx < 0) ? (int8_t) 16u : 
      +                          (arrayRowIdx > (int8_t) 16u) ? 0 : arrayRowIdx);
 13169  09D8  1BC2               	btfsc	STATE_ChangeColorMode@arrayRowIdx^(0+384),7
 13170  09D9  29EC               	goto	l6008
 13171  09DA  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13172  09DB  3A80               	xorlw	128
 13173  09DC  3E6F               	addlw	-145
 13174  09DD  1803               	skipnc
 13175  09DE  29E5               	goto	l6004
 13176  09DF  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13177  09E0  00B2               	movwf	_STATE_ChangeColorMode$994^(0+384)
 13178  09E1  01B3               	clrf	(_STATE_ChangeColorMode$994+1)^(0+384)
 13179  09E2  1BB2               	btfsc	_STATE_ChangeColorMode$994^(0+384),7
 13180  09E3  03B3               	decf	(_STATE_ChangeColorMode$994+1)^(0+384),f
 13181  09E4  29E7               	goto	l6006
 13182  09E5                     l6004:
 13183  09E5  01B2               	clrf	_STATE_ChangeColorMode$994^(0+384)
 13184  09E6  01B3               	clrf	(_STATE_ChangeColorMode$994+1)^(0+384)
 13185  09E7                     l6006:
 13186  09E7  0833               	movf	(_STATE_ChangeColorMode$994+1)^(0+384),w
 13187  09E8  00B1               	movwf	(_STATE_ChangeColorMode$993+1)^(0+384)
 13188  09E9  0832               	movf	_STATE_ChangeColorMode$994^(0+384),w
 13189  09EA  00B0               	movwf	_STATE_ChangeColorMode$993^(0+384)
 13190  09EB  29F0               	goto	l484
 13191  09EC                     l6008:
 13192  09EC  3010               	movlw	16
 13193  09ED  00B0               	movwf	_STATE_ChangeColorMode$993^(0+384)
 13194  09EE  3000               	movlw	0
 13195  09EF  00B1               	movwf	(_STATE_ChangeColorMode$993^(0+384)+1)
 13196  09F0                     l484:
 13197  09F0  0830               	movf	_STATE_ChangeColorMode$993^(0+384),w
 13198  09F1  0021               	movlb	1	; select bank1
 13199  09F2  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13200  09F3  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13201  09F4  0023               	movlb	3	; select bank3
 13202  09F5  00C2               	movwf	STATE_ChangeColorMode@arrayRowIdx^(0+384)
 13203                           
 13204                           ;changeColorMode.c: 116:             Clock_SetBackgroundRGBArray( colorRGBArrays[arrayRo
      +                          wIdx][0],
 13205  09F6  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13206  09F7  0021               	movlb	1	; select bank1
 13207  09F8  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13208  09F9  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13209  09FA  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13210  09FB  0020               	movlb	0	; select bank0
 13211  09FC  00A9               	movwf	___wmul@multiplier
 13212  09FD  0021               	movlb	1	; select bank1
 13213  09FE  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13214  09FF  0020               	movlb	0	; select bank0
 13215  0A00  00AA               	movwf	___wmul@multiplier+1
 13216  0A01  3003               	movlw	3
 13217  0A02  00AB               	movwf	___wmul@multiplicand
 13218  0A03  3000               	movlw	0
 13219  0A04  00AC               	movwf	___wmul@multiplicand+1
 13220  0A05  31A4  247E  3188   	fcall	___wmul
 13221  0A08  0020               	movlb	0	; select bank0
 13222  0A09  082A               	movf	?___wmul+1,w
 13223  0A0A  0085               	movwf	5
 13224  0A0B  0829               	movf	?___wmul,w
 13225  0A0C  0084               	movwf	4
 13226  0A0D  3001               	movlw	low ((_colorRGBArrays+1)| (0+32768))
 13227  0A0E  0784               	addwf	4,f
 13228  0A0F  30A8               	movlw	high ((_colorRGBArrays+1)| (0+32768))
 13229  0A10  3D85               	addwfc	5,f
 13230  0A11  0800               	movf	0,w	;code access
 13231  0A12  0021               	movlb	1	; select bank1
 13232  0A13  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13233  0A14  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13234  0A15  0020               	movlb	0	; select bank0
 13235  0A16  00AF               	movwf	Clock_SetBackgroundRGBArray@green
 13236  0A17  0023               	movlb	3	; select bank3
 13237  0A18  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13238  0A19  0021               	movlb	1	; select bank1
 13239  0A1A  00B3               	movwf	(??_STATE_ChangeColorMode+3)^(0+128)
 13240  0A1B  01B4               	clrf	((??_STATE_ChangeColorMode+3)^(0+128)+1)
 13241  0A1C  0833               	movf	(??_STATE_ChangeColorMode+3)^(0+128),w
 13242  0A1D  0020               	movlb	0	; select bank0
 13243  0A1E  00A9               	movwf	___wmul@multiplier
 13244  0A1F  0021               	movlb	1	; select bank1
 13245  0A20  0834               	movf	(??_STATE_ChangeColorMode+4)^(0+128),w
 13246  0A21  0020               	movlb	0	; select bank0
 13247  0A22  00AA               	movwf	___wmul@multiplier+1
 13248  0A23  3003               	movlw	3
 13249  0A24  00AB               	movwf	___wmul@multiplicand
 13250  0A25  3000               	movlw	0
 13251  0A26  00AC               	movwf	___wmul@multiplicand+1
 13252  0A27  31A4  247E  3188   	fcall	___wmul
 13253  0A2A  0020               	movlb	0	; select bank0
 13254  0A2B  082A               	movf	?___wmul+1,w
 13255  0A2C  0085               	movwf	5
 13256  0A2D  0829               	movf	?___wmul,w
 13257  0A2E  0084               	movwf	4
 13258  0A2F  3002               	movlw	low ((_colorRGBArrays+2)| (0+32768))
 13259  0A30  0784               	addwf	4,f
 13260  0A31  30A8               	movlw	high ((_colorRGBArrays+2)| (0+32768))
 13261  0A32  3D85               	addwfc	5,f
 13262  0A33  0800               	movf	0,w	;code access
 13263  0A34  0021               	movlb	1	; select bank1
 13264  0A35  00B5               	movwf	(??_STATE_ChangeColorMode+5)^(0+128)
 13265  0A36  0835               	movf	(??_STATE_ChangeColorMode+5)^(0+128),w
 13266  0A37  0020               	movlb	0	; select bank0
 13267  0A38  00B0               	movwf	Clock_SetBackgroundRGBArray@blue
 13268  0A39  0023               	movlb	3	; select bank3
 13269  0A3A  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13270  0A3B  0021               	movlb	1	; select bank1
 13271  0A3C  00B6               	movwf	(??_STATE_ChangeColorMode+6)^(0+128)
 13272  0A3D  01B7               	clrf	((??_STATE_ChangeColorMode+6)^(0+128)+1)
 13273  0A3E  0836               	movf	(??_STATE_ChangeColorMode+6)^(0+128),w
 13274  0A3F  0020               	movlb	0	; select bank0
 13275  0A40  00A9               	movwf	___wmul@multiplier
 13276  0A41  0021               	movlb	1	; select bank1
 13277  0A42  0837               	movf	(??_STATE_ChangeColorMode+7)^(0+128),w
 13278  0A43  0020               	movlb	0	; select bank0
 13279  0A44  00AA               	movwf	___wmul@multiplier+1
 13280  0A45  3003               	movlw	3
 13281  0A46  00AB               	movwf	___wmul@multiplicand
 13282  0A47  3000               	movlw	0
 13283  0A48  00AC               	movwf	___wmul@multiplicand+1
 13284  0A49  31A4  247E  3188   	fcall	___wmul
 13285  0A4C  0020               	movlb	0	; select bank0
 13286  0A4D  082A               	movf	?___wmul+1,w
 13287  0A4E  0085               	movwf	5
 13288  0A4F  0829               	movf	?___wmul,w
 13289  0A50  0084               	movwf	4
 13290  0A51  3000               	movlw	low (_colorRGBArrays| (0+32768))
 13291  0A52  0784               	addwf	4,f
 13292  0A53  30A8               	movlw	high (_colorRGBArrays| (0+32768))
 13293  0A54  3D85               	addwfc	5,f
 13294  0A55  0800               	movf	0,w	;code access
 13295  0A56  31A3  23F7  3188   	fcall	_Clock_SetBackgroundRGBArray
 13296                           
 13297                           ;changeColorMode.c: 119:             Clock_PrerenderPixelAndBackgroundValues( );
 13298  0A59  31A6  2602  3188   	fcall	_Clock_PrerenderPixelAndBackgroundValues
 13299                           
 13300                           ;changeColorMode.c: 120:             Clock_ForceRender( &dColorTime );
 13301  0A5C  30AA               	movlw	low (STATE_ChangeColorMode@dColorTime| (0+32768))
 13302  0A5D  0020               	movlb	0	; select bank0
 13303  0A5E  00D3               	movwf	Clock_ForceRender@t
 13304  0A5F  30A8               	movlw	high (STATE_ChangeColorMode@dColorTime| (0+32768))
 13305  0A60  00D4               	movwf	Clock_ForceRender@t+1
 13306  0A61  3191  2121  3188   	fcall	_Clock_ForceRender
 13307  0A64                     l6016:
 13308                           
 13309                           ;changeColorMode.c: 122:     }
 13310  0A64  31A3  23D1  3188   	fcall	_RotaryEncoder_HasButtonPressOccurred
 13311  0A67  3A00               	xorlw	0
 13312  0A68  1903               	skipnz
 13313  0A69  29B9               	goto	l5992
 13314                           
 13315                           ;changeColorMode.c: 125:     uint8_t backgroundSelection[3u] = {
 13316  0A6A  3000               	movlw	0
 13317  0A6B  0023               	movlb	3	; select bank3
 13318  0A6C  00B9               	movwf	STATE_ChangeColorMode@backgroundSelection^(0+384)
 13319  0A6D  3000               	movlw	0
 13320  0A6E  00BA               	movwf	(STATE_ChangeColorMode@backgroundSelection+1)^(0+384)
 13321  0A6F  3000               	movlw	0
 13322  0A70  00BB               	movwf	(STATE_ChangeColorMode@backgroundSelection+2)^(0+384)
 13323  0A71  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13324  0A72  0021               	movlb	1	; select bank1
 13325  0A73  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13326  0A74  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13327  0A75  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13328  0A76  0020               	movlb	0	; select bank0
 13329  0A77  00A9               	movwf	___wmul@multiplier
 13330  0A78  0021               	movlb	1	; select bank1
 13331  0A79  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13332  0A7A  0020               	movlb	0	; select bank0
 13333  0A7B  00AA               	movwf	___wmul@multiplier+1
 13334  0A7C  3003               	movlw	3
 13335  0A7D  00AB               	movwf	___wmul@multiplicand
 13336  0A7E  3000               	movlw	0
 13337  0A7F  00AC               	movwf	___wmul@multiplicand+1
 13338  0A80  31A4  247E  3188   	fcall	___wmul
 13339  0A83  0020               	movlb	0	; select bank0
 13340  0A84  082A               	movf	?___wmul+1,w
 13341  0A85  0085               	movwf	5
 13342  0A86  0829               	movf	?___wmul,w
 13343  0A87  0084               	movwf	4
 13344  0A88  3000               	movlw	low (_colorRGBArrays| (0+32768))
 13345  0A89  0784               	addwf	4,f
 13346  0A8A  30A8               	movlw	high (_colorRGBArrays| (0+32768))
 13347  0A8B  3D85               	addwfc	5,f
 13348  0A8C  0800               	movf	0,w	;code access
 13349  0A8D  0021               	movlb	1	; select bank1
 13350  0A8E  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13351  0A8F  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13352  0A90  0023               	movlb	3	; select bank3
 13353  0A91  00B9               	movwf	STATE_ChangeColorMode@backgroundSelection^(0+384)
 13354  0A92  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13355  0A93  0021               	movlb	1	; select bank1
 13356  0A94  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13357  0A95  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13358  0A96  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13359  0A97  0020               	movlb	0	; select bank0
 13360  0A98  00A9               	movwf	___wmul@multiplier
 13361  0A99  0021               	movlb	1	; select bank1
 13362  0A9A  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13363  0A9B  0020               	movlb	0	; select bank0
 13364  0A9C  00AA               	movwf	___wmul@multiplier+1
 13365  0A9D  3003               	movlw	3
 13366  0A9E  00AB               	movwf	___wmul@multiplicand
 13367  0A9F  3000               	movlw	0
 13368  0AA0  00AC               	movwf	___wmul@multiplicand+1
 13369  0AA1  31A4  247E  3188   	fcall	___wmul
 13370  0AA4  0020               	movlb	0	; select bank0
 13371  0AA5  082A               	movf	?___wmul+1,w
 13372  0AA6  0085               	movwf	5
 13373  0AA7  0829               	movf	?___wmul,w
 13374  0AA8  0084               	movwf	4
 13375  0AA9  3001               	movlw	low ((_colorRGBArrays+1)| (0+32768))
 13376  0AAA  0784               	addwf	4,f
 13377  0AAB  30A8               	movlw	high ((_colorRGBArrays+1)| (0+32768))
 13378  0AAC  3D85               	addwfc	5,f
 13379  0AAD  0800               	movf	0,w	;code access
 13380  0AAE  0021               	movlb	1	; select bank1
 13381  0AAF  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13382  0AB0  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13383  0AB1  0023               	movlb	3	; select bank3
 13384  0AB2  00BA               	movwf	(STATE_ChangeColorMode@backgroundSelection^(0+384)+1)
 13385  0AB3  0842               	movf	STATE_ChangeColorMode@arrayRowIdx^(0+384),w
 13386  0AB4  0021               	movlb	1	; select bank1
 13387  0AB5  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13388  0AB6  01B1               	clrf	(??_STATE_ChangeColorMode^(0+128)+1)
 13389  0AB7  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13390  0AB8  0020               	movlb	0	; select bank0
 13391  0AB9  00A9               	movwf	___wmul@multiplier
 13392  0ABA  0021               	movlb	1	; select bank1
 13393  0ABB  0831               	movf	(??_STATE_ChangeColorMode+1)^(0+128),w
 13394  0ABC  0020               	movlb	0	; select bank0
 13395  0ABD  00AA               	movwf	___wmul@multiplier+1
 13396  0ABE  3003               	movlw	3
 13397  0ABF  00AB               	movwf	___wmul@multiplicand
 13398  0AC0  3000               	movlw	0
 13399  0AC1  00AC               	movwf	___wmul@multiplicand+1
 13400  0AC2  31A4  247E  3188   	fcall	___wmul
 13401  0AC5  0020               	movlb	0	; select bank0
 13402  0AC6  082A               	movf	?___wmul+1,w
 13403  0AC7  0085               	movwf	5
 13404  0AC8  0829               	movf	?___wmul,w
 13405  0AC9  0084               	movwf	4
 13406  0ACA  3002               	movlw	low ((_colorRGBArrays+2)| (0+32768))
 13407  0ACB  0784               	addwf	4,f
 13408  0ACC  30A8               	movlw	high ((_colorRGBArrays+2)| (0+32768))
 13409  0ACD  3D85               	addwfc	5,f
 13410  0ACE  0800               	movf	0,w	;code access
 13411  0ACF  0021               	movlb	1	; select bank1
 13412  0AD0  00B2               	movwf	(??_STATE_ChangeColorMode+2)^(0+128)
 13413  0AD1  0832               	movf	(??_STATE_ChangeColorMode+2)^(0+128),w
 13414  0AD2  0023               	movlb	3	; select bank3
 13415  0AD3  00BB               	movwf	(STATE_ChangeColorMode@backgroundSelection^(0+384)+2)
 13416                           
 13417                           ;changeColorMode.c: 132:     uint16_t crc = CRC16_Calculate16bitCRC( digitSelection, 3u,
      +                           0xFFFF );
 13418  0AD4  30B6               	movlw	low STATE_ChangeColorMode@digitSelection
 13419  0AD5  0020               	movlb	0	; select bank0
 13420  0AD6  00A9               	movwf	CRC16_Calculate16bitCRC@data
 13421  0AD7  3001               	movlw	high STATE_ChangeColorMode@digitSelection
 13422  0AD8  00AA               	movwf	CRC16_Calculate16bitCRC@data+1
 13423  0AD9  3003               	movlw	3
 13424  0ADA  00AB               	movwf	CRC16_Calculate16bitCRC@size
 13425  0ADB  3000               	movlw	0
 13426  0ADC  00AC               	movwf	CRC16_Calculate16bitCRC@size+1
 13427  0ADD  30FF               	movlw	255
 13428  0ADE  00AD               	movwf	CRC16_Calculate16bitCRC@seed
 13429  0ADF  30FF               	movlw	255
 13430  0AE0  00AE               	movwf	CRC16_Calculate16bitCRC@seed+1
 13431  0AE1  31A7  27B3  3188   	fcall	_CRC16_Calculate16bitCRC
 13432  0AE4  0020               	movlb	0	; select bank0
 13433  0AE5  082A               	movf	?_CRC16_Calculate16bitCRC+1,w
 13434  0AE6  0023               	movlb	3	; select bank3
 13435  0AE7  00BD               	movwf	(STATE_ChangeColorMode@crc+1)^(0+384)
 13436  0AE8  0020               	movlb	0	; select bank0
 13437  0AE9  0829               	movf	?_CRC16_Calculate16bitCRC,w
 13438  0AEA  0023               	movlb	3	; select bank3
 13439  0AEB  00BC               	movwf	STATE_ChangeColorMode@crc^(0+384)
 13440                           
 13441                           ;changeColorMode.c: 133:     crc = CRC16_Calculate16bitCRC( backgroundSelection, 3u, crc
      +                           );
 13442  0AEC  30B9               	movlw	low STATE_ChangeColorMode@backgroundSelection
 13443  0AED  0020               	movlb	0	; select bank0
 13444  0AEE  00A9               	movwf	CRC16_Calculate16bitCRC@data
 13445  0AEF  3001               	movlw	high STATE_ChangeColorMode@backgroundSelection
 13446  0AF0  00AA               	movwf	CRC16_Calculate16bitCRC@data+1
 13447  0AF1  3003               	movlw	3
 13448  0AF2  00AB               	movwf	CRC16_Calculate16bitCRC@size
 13449  0AF3  3000               	movlw	0
 13450  0AF4  00AC               	movwf	CRC16_Calculate16bitCRC@size+1
 13451  0AF5  0023               	movlb	3	; select bank3
 13452  0AF6  083D               	movf	(STATE_ChangeColorMode@crc+1)^(0+384),w
 13453  0AF7  0020               	movlb	0	; select bank0
 13454  0AF8  00AE               	movwf	CRC16_Calculate16bitCRC@seed+1
 13455  0AF9  0023               	movlb	3	; select bank3
 13456  0AFA  083C               	movf	STATE_ChangeColorMode@crc^(0+384),w
 13457  0AFB  0020               	movlb	0	; select bank0
 13458  0AFC  00AD               	movwf	CRC16_Calculate16bitCRC@seed
 13459  0AFD  31A7  27B3  3188   	fcall	_CRC16_Calculate16bitCRC
 13460  0B00  0020               	movlb	0	; select bank0
 13461  0B01  082A               	movf	?_CRC16_Calculate16bitCRC+1,w
 13462  0B02  0023               	movlb	3	; select bank3
 13463  0B03  00BD               	movwf	(STATE_ChangeColorMode@crc+1)^(0+384)
 13464  0B04  0020               	movlb	0	; select bank0
 13465  0B05  0829               	movf	?_CRC16_Calculate16bitCRC,w
 13466  0B06  0023               	movlb	3	; select bank3
 13467  0B07  00BC               	movwf	STATE_ChangeColorMode@crc^(0+384)
 13468                           
 13469                           ;changeColorMode.c: 136:     size_t maxRetries = 3;
 13470  0B08  3003               	movlw	3
 13471  0B09  00B4               	movwf	STATE_ChangeColorMode@maxRetries^(0+384)
 13472  0B0A  3000               	movlw	0
 13473  0B0B  00B5               	movwf	(STATE_ChangeColorMode@maxRetries^(0+384)+1)
 13474  0B0C                     l6060:	
 13475                           ;changeColorMode.c: 139:     while( maxRetries )
 13476                           
 13477                           
 13478                           ;changeColorMode.c: 139:     while( maxRetries )
 13479  0B0C  0834               	movf	STATE_ChangeColorMode@maxRetries^(0+384),w
 13480  0B0D  0435               	iorwf	(STATE_ChangeColorMode@maxRetries+1)^(0+384),w
 13481  0B0E  1903               	btfsc	3,2
 13482  0B0F  2C18               	goto	l6066
 13483                           
 13484                           ;changeColorMode.c: 140:     {;changeColorMode.c: 142:         DATAEE_WriteByte( 0x7000u
      +                          , digitSelection[0] );
 13485  0B10  3000               	movlw	0
 13486  0B11  0020               	movlb	0	; select bank0
 13487  0B12  00A9               	movwf	DATAEE_WriteByte@bAdd
 13488  0B13  3070               	movlw	112
 13489  0B14  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13490  0B15  0023               	movlb	3	; select bank3
 13491  0B16  0836               	movf	STATE_ChangeColorMode@digitSelection^(0+384),w
 13492  0B17  0021               	movlb	1	; select bank1
 13493  0B18  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13494  0B19  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13495  0B1A  0020               	movlb	0	; select bank0
 13496  0B1B  00AB               	movwf	DATAEE_WriteByte@bData
 13497  0B1C  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13498                           
 13499                           ;changeColorMode.c: 143:         DATAEE_WriteByte( 0x7001u, digitSelection[1] );
 13500  0B1F  3001               	movlw	1
 13501  0B20  0020               	movlb	0	; select bank0
 13502  0B21  00A9               	movwf	DATAEE_WriteByte@bAdd
 13503  0B22  3070               	movlw	112
 13504  0B23  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13505  0B24  0023               	movlb	3	; select bank3
 13506  0B25  0837               	movf	(STATE_ChangeColorMode@digitSelection^(0+384)+1),w
 13507  0B26  0021               	movlb	1	; select bank1
 13508  0B27  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13509  0B28  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13510  0B29  0020               	movlb	0	; select bank0
 13511  0B2A  00AB               	movwf	DATAEE_WriteByte@bData
 13512  0B2B  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13513                           
 13514                           ;changeColorMode.c: 144:         DATAEE_WriteByte( 0x7002u, digitSelection[2] );
 13515  0B2E  3002               	movlw	2
 13516  0B2F  0020               	movlb	0	; select bank0
 13517  0B30  00A9               	movwf	DATAEE_WriteByte@bAdd
 13518  0B31  3070               	movlw	112
 13519  0B32  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13520  0B33  0023               	movlb	3	; select bank3
 13521  0B34  0838               	movf	(STATE_ChangeColorMode@digitSelection^(0+384)+2),w
 13522  0B35  0021               	movlb	1	; select bank1
 13523  0B36  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13524  0B37  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13525  0B38  0020               	movlb	0	; select bank0
 13526  0B39  00AB               	movwf	DATAEE_WriteByte@bData
 13527  0B3A  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13528                           
 13529                           ;changeColorMode.c: 145:         DATAEE_WriteByte( 0x7003u, backgroundSelection[0] );
 13530  0B3D  3003               	movlw	3
 13531  0B3E  0020               	movlb	0	; select bank0
 13532  0B3F  00A9               	movwf	DATAEE_WriteByte@bAdd
 13533  0B40  3070               	movlw	112
 13534  0B41  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13535  0B42  0023               	movlb	3	; select bank3
 13536  0B43  0839               	movf	STATE_ChangeColorMode@backgroundSelection^(0+384),w
 13537  0B44  0021               	movlb	1	; select bank1
 13538  0B45  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13539  0B46  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13540  0B47  0020               	movlb	0	; select bank0
 13541  0B48  00AB               	movwf	DATAEE_WriteByte@bData
 13542  0B49  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13543                           
 13544                           ;changeColorMode.c: 146:         DATAEE_WriteByte( 0x7004u, backgroundSelection[1] );
 13545  0B4C  3004               	movlw	4
 13546  0B4D  0020               	movlb	0	; select bank0
 13547  0B4E  00A9               	movwf	DATAEE_WriteByte@bAdd
 13548  0B4F  3070               	movlw	112
 13549  0B50  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13550  0B51  0023               	movlb	3	; select bank3
 13551  0B52  083A               	movf	(STATE_ChangeColorMode@backgroundSelection^(0+384)+1),w
 13552  0B53  0021               	movlb	1	; select bank1
 13553  0B54  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13554  0B55  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13555  0B56  0020               	movlb	0	; select bank0
 13556  0B57  00AB               	movwf	DATAEE_WriteByte@bData
 13557  0B58  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13558                           
 13559                           ;changeColorMode.c: 147:         DATAEE_WriteByte( 0x7005u, backgroundSelection[2] );
 13560  0B5B  3005               	movlw	5
 13561  0B5C  0020               	movlb	0	; select bank0
 13562  0B5D  00A9               	movwf	DATAEE_WriteByte@bAdd
 13563  0B5E  3070               	movlw	112
 13564  0B5F  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13565  0B60  0023               	movlb	3	; select bank3
 13566  0B61  083B               	movf	(STATE_ChangeColorMode@backgroundSelection^(0+384)+2),w
 13567  0B62  0021               	movlb	1	; select bank1
 13568  0B63  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13569  0B64  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13570  0B65  0020               	movlb	0	; select bank0
 13571  0B66  00AB               	movwf	DATAEE_WriteByte@bData
 13572  0B67  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13573                           
 13574                           ;changeColorMode.c: 148:         DATAEE_WriteByte( 0x7006u, (uint8_t) ( ( crc & 0xFF00u 
      +                          ) >> 8u ) );
 13575  0B6A  3006               	movlw	6
 13576  0B6B  0020               	movlb	0	; select bank0
 13577  0B6C  00A9               	movwf	DATAEE_WriteByte@bAdd
 13578  0B6D  3070               	movlw	112
 13579  0B6E  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13580  0B6F  0023               	movlb	3	; select bank3
 13581  0B70  083D               	movf	(STATE_ChangeColorMode@crc+1)^(0+384),w
 13582  0B71  0021               	movlb	1	; select bank1
 13583  0B72  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13584  0B73  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13585  0B74  0020               	movlb	0	; select bank0
 13586  0B75  00AB               	movwf	DATAEE_WriteByte@bData
 13587  0B76  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13588                           
 13589                           ;changeColorMode.c: 149:         DATAEE_WriteByte( 0x7007u, (uint8_t) ( crc & 0xFFu ) );
 13590  0B79  3007               	movlw	7
 13591  0B7A  0020               	movlb	0	; select bank0
 13592  0B7B  00A9               	movwf	DATAEE_WriteByte@bAdd
 13593  0B7C  3070               	movlw	112
 13594  0B7D  00AA               	movwf	DATAEE_WriteByte@bAdd+1
 13595  0B7E  0023               	movlb	3	; select bank3
 13596  0B7F  083C               	movf	STATE_ChangeColorMode@crc^(0+384),w
 13597  0B80  0021               	movlb	1	; select bank1
 13598  0B81  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13599  0B82  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13600  0B83  0020               	movlb	0	; select bank0
 13601  0B84  00AB               	movwf	DATAEE_WriteByte@bData
 13602  0B85  31A5  2513  3188   	fcall	_DATAEE_WriteByte
 13603                           
 13604                           ;changeColorMode.c: 151:         _delay((unsigned long)((200)*(32000000u/4000.0)));
 13605  0B88  3009               	movlw	9
 13606  0B89  0021               	movlb	1	; select bank1
 13607  0B8A  00B1               	movwf	(??_STATE_ChangeColorMode^(0+128)+1)
 13608  0B8B  301E               	movlw	30
 13609  0B8C  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13610  0B8D  30E4               	movlw	228
 13611  0B8E                     u4967:
 13612  0B8E  0B89               	decfsz	9,f
 13613  0B8F  2B8E               	goto	u4967
 13614  0B90  0BB0               	decfsz	??_STATE_ChangeColorMode^(0+128),f
 13615  0B91  2B8E               	goto	u4967
 13616  0B92  0BB1               	decfsz	(??_STATE_ChangeColorMode^(0+128)+1),f
 13617  0B93  2B8E               	goto	u4967
 13618  0B94  0000               	nop
 13619                           
 13620                           ;changeColorMode.c: 153:         eepromReadbackData[0] = DATAEE_ReadByte( 0x7000u );
 13621  0B95  3000               	movlw	0
 13622  0B96  0020               	movlb	0	; select bank0
 13623  0B97  00A9               	movwf	DATAEE_ReadByte@bAdd
 13624  0B98  3070               	movlw	112
 13625  0B99  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13626  0B9A  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13627  0B9D  0021               	movlb	1	; select bank1
 13628  0B9E  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13629  0B9F  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13630  0BA0  0023               	movlb	3	; select bank3
 13631  0BA1  00A4               	movwf	STATE_ChangeColorMode@eepromReadbackData^(0+384)
 13632                           
 13633                           ;changeColorMode.c: 154:         eepromReadbackData[1] = DATAEE_ReadByte( 0x7001u );
 13634  0BA2  3001               	movlw	1
 13635  0BA3  0020               	movlb	0	; select bank0
 13636  0BA4  00A9               	movwf	DATAEE_ReadByte@bAdd
 13637  0BA5  3070               	movlw	112
 13638  0BA6  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13639  0BA7  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13640  0BAA  0021               	movlb	1	; select bank1
 13641  0BAB  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13642  0BAC  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13643  0BAD  0023               	movlb	3	; select bank3
 13644  0BAE  00A5               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+1)
 13645                           
 13646                           ;changeColorMode.c: 155:         eepromReadbackData[2] = DATAEE_ReadByte( 0x7002u );
 13647  0BAF  3002               	movlw	2
 13648  0BB0  0020               	movlb	0	; select bank0
 13649  0BB1  00A9               	movwf	DATAEE_ReadByte@bAdd
 13650  0BB2  3070               	movlw	112
 13651  0BB3  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13652  0BB4  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13653  0BB7  0021               	movlb	1	; select bank1
 13654  0BB8  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13655  0BB9  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13656  0BBA  0023               	movlb	3	; select bank3
 13657  0BBB  00A6               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+2)
 13658                           
 13659                           ;changeColorMode.c: 156:         eepromReadbackData[3] = DATAEE_ReadByte( 0x7003u );
 13660  0BBC  3003               	movlw	3
 13661  0BBD  0020               	movlb	0	; select bank0
 13662  0BBE  00A9               	movwf	DATAEE_ReadByte@bAdd
 13663  0BBF  3070               	movlw	112
 13664  0BC0  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13665  0BC1  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13666  0BC4  0021               	movlb	1	; select bank1
 13667  0BC5  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13668  0BC6  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13669  0BC7  0023               	movlb	3	; select bank3
 13670  0BC8  00A7               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+3)
 13671                           
 13672                           ;changeColorMode.c: 157:         eepromReadbackData[4] = DATAEE_ReadByte( 0x7004u );
 13673  0BC9  3004               	movlw	4
 13674  0BCA  0020               	movlb	0	; select bank0
 13675  0BCB  00A9               	movwf	DATAEE_ReadByte@bAdd
 13676  0BCC  3070               	movlw	112
 13677  0BCD  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13678  0BCE  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13679  0BD1  0021               	movlb	1	; select bank1
 13680  0BD2  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13681  0BD3  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13682  0BD4  0023               	movlb	3	; select bank3
 13683  0BD5  00A8               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+4)
 13684                           
 13685                           ;changeColorMode.c: 158:         eepromReadbackData[5] = DATAEE_ReadByte( 0x7005u );
 13686  0BD6  3005               	movlw	5
 13687  0BD7  0020               	movlb	0	; select bank0
 13688  0BD8  00A9               	movwf	DATAEE_ReadByte@bAdd
 13689  0BD9  3070               	movlw	112
 13690  0BDA  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13691  0BDB  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13692  0BDE  0021               	movlb	1	; select bank1
 13693  0BDF  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13694  0BE0  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13695  0BE1  0023               	movlb	3	; select bank3
 13696  0BE2  00A9               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+5)
 13697                           
 13698                           ;changeColorMode.c: 159:         eepromReadbackData[6] = DATAEE_ReadByte( 0x7006u );
 13699  0BE3  3006               	movlw	6
 13700  0BE4  0020               	movlb	0	; select bank0
 13701  0BE5  00A9               	movwf	DATAEE_ReadByte@bAdd
 13702  0BE6  3070               	movlw	112
 13703  0BE7  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13704  0BE8  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13705  0BEB  0021               	movlb	1	; select bank1
 13706  0BEC  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13707  0BED  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13708  0BEE  0023               	movlb	3	; select bank3
 13709  0BEF  00AA               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+6)
 13710                           
 13711                           ;changeColorMode.c: 160:         eepromReadbackData[7] = DATAEE_ReadByte( 0x7007u );
 13712  0BF0  3007               	movlw	7
 13713  0BF1  0020               	movlb	0	; select bank0
 13714  0BF2  00A9               	movwf	DATAEE_ReadByte@bAdd
 13715  0BF3  3070               	movlw	112
 13716  0BF4  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 13717  0BF5  31A3  23A1  3188   	fcall	_DATAEE_ReadByte
 13718  0BF8  0021               	movlb	1	; select bank1
 13719  0BF9  00B0               	movwf	??_STATE_ChangeColorMode^(0+128)
 13720  0BFA  0830               	movf	??_STATE_ChangeColorMode^(0+128),w
 13721  0BFB  0023               	movlb	3	; select bank3
 13722  0BFC  00AB               	movwf	(STATE_ChangeColorMode@eepromReadbackData^(0+384)+7)
 13723                           
 13724                           ;changeColorMode.c: 162:         if( CRC16_Calculate16bitCRC( eepromReadbackData, 8u, 0x
      +                          FFFF ) == 0u )
 13725  0BFD  30A4               	movlw	low STATE_ChangeColorMode@eepromReadbackData
 13726  0BFE  0020               	movlb	0	; select bank0
 13727  0BFF  00A9               	movwf	CRC16_Calculate16bitCRC@data
 13728  0C00  3001               	movlw	high STATE_ChangeColorMode@eepromReadbackData
 13729  0C01  00AA               	movwf	CRC16_Calculate16bitCRC@data+1
 13730  0C02  3008               	movlw	8
 13731  0C03  00AB               	movwf	CRC16_Calculate16bitCRC@size
 13732  0C04  3000               	movlw	0
 13733  0C05  00AC               	movwf	CRC16_Calculate16bitCRC@size+1
 13734  0C06  30FF               	movlw	255
 13735  0C07  00AD               	movwf	CRC16_Calculate16bitCRC@seed
 13736  0C08  30FF               	movlw	255
 13737  0C09  00AE               	movwf	CRC16_Calculate16bitCRC@seed+1
 13738  0C0A  31A7  27B3  3188   	fcall	_CRC16_Calculate16bitCRC
 13739  0C0D  0020               	movlb	0	; select bank0
 13740  0C0E  0829               	movf	?_CRC16_Calculate16bitCRC,w
 13741  0C0F  042A               	iorwf	?_CRC16_Calculate16bitCRC+1,w
 13742  0C10  1903               	btfsc	3,2
 13743  0C11  2C18               	goto	l6066
 13744                           
 13745                           ;changeColorMode.c: 167:         maxRetries--;
 13746                           
 13747                           ;changeColorMode.c: 165:             break;
 13748  0C12  3001               	movlw	1
 13749  0C13  0023               	movlb	3	; select bank3
 13750  0C14  02B4               	subwf	STATE_ChangeColorMode@maxRetries^(0+384),f
 13751  0C15  3000               	movlw	0
 13752  0C16  3BB5               	subwfb	(STATE_ChangeColorMode@maxRetries+1)^(0+384),f
 13753  0C17  2B0C               	goto	l6060
 13754  0C18                     l6066:
 13755                           
 13756                           ;changeColorMode.c: 180:     uint32_t currentTime = Time_GetCurrentTimeInSeconds( );
 13757  0C18  31A3  23C0  3188   	fcall	_Time_GetCurrentTimeInSeconds
 13758  0C1B  0020               	movlb	0	; select bank0
 13759  0C1C  082C               	movf	?_Time_GetCurrentTimeInSeconds+3,w
 13760  0C1D  0023               	movlb	3	; select bank3
 13761  0C1E  00A3               	movwf	(STATE_ChangeColorMode@currentTime+3)^(0+384)
 13762  0C1F  0020               	movlb	0	; select bank0
 13763  0C20  082B               	movf	?_Time_GetCurrentTimeInSeconds+2,w
 13764  0C21  0023               	movlb	3	; select bank3
 13765  0C22  00A2               	movwf	(STATE_ChangeColorMode@currentTime+2)^(0+384)
 13766  0C23  0020               	movlb	0	; select bank0
 13767  0C24  082A               	movf	?_Time_GetCurrentTimeInSeconds+1,w
 13768  0C25  0023               	movlb	3	; select bank3
 13769  0C26  00A1               	movwf	(STATE_ChangeColorMode@currentTime+1)^(0+384)
 13770  0C27  0020               	movlb	0	; select bank0
 13771  0C28  0829               	movf	?_Time_GetCurrentTimeInSeconds,w
 13772  0C29  0023               	movlb	3	; select bank3
 13773  0C2A  00A0               	movwf	STATE_ChangeColorMode@currentTime^(0+384)
 13774                           
 13775                           ;changeColorMode.c: 181:     Time_RenderInputTime( currentTime, 0 );
 13776  0C2B  0823               	movf	(STATE_ChangeColorMode@currentTime+3)^(0+384),w
 13777  0C2C  0021               	movlb	1	; select bank1
 13778  0C2D  00A3               	movwf	(Time_RenderInputTime@timeInSeconds+3)^(0+128)
 13779  0C2E  0023               	movlb	3	; select bank3
 13780  0C2F  0822               	movf	(STATE_ChangeColorMode@currentTime+2)^(0+384),w
 13781  0C30  0021               	movlb	1	; select bank1
 13782  0C31  00A2               	movwf	(Time_RenderInputTime@timeInSeconds+2)^(0+128)
 13783  0C32  0023               	movlb	3	; select bank3
 13784  0C33  0821               	movf	(STATE_ChangeColorMode@currentTime+1)^(0+384),w
 13785  0C34  0021               	movlb	1	; select bank1
 13786  0C35  00A1               	movwf	(Time_RenderInputTime@timeInSeconds+1)^(0+128)
 13787  0C36  0023               	movlb	3	; select bank3
 13788  0C37  0820               	movf	STATE_ChangeColorMode@currentTime^(0+384),w
 13789  0C38  0021               	movlb	1	; select bank1
 13790  0C39  00A0               	movwf	Time_RenderInputTime@timeInSeconds^(0+128)
 13791  0C3A  01A4               	clrf	Time_RenderInputTime@setCurrentTime^(0+128)
 13792  0C3B  319F  2714         	fcall	_Time_RenderInputTime
 13793  0C3D  0008               	return
 13794  0C3E                     __end_of_STATE_ChangeColorMode:
 13795                           
 13796                           	psect	text20
 13797  1F14                     __ptext20:	
 13798 ;; *************** function _Time_RenderInputTime *****************
 13799 ;; Defined at:
 13800 ;;		line 108 in file "timeCalculation.c"
 13801 ;; Parameters:    Size  Location     Type
 13802 ;;  timeInSecond    4    0[BANK1 ] unsigned long 
 13803 ;;  setCurrentTi    1    4[BANK1 ] _Bool 
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;  t               4   12[BANK1 ] struct .
 13806 ;;  currentTimeI    2    8[BANK1 ] unsigned short 
 13807 ;;  minutes         1   11[BANK1 ] unsigned char 
 13808 ;;  hours           1   10[BANK1 ] unsigned char 
 13809 ;; Return value:  Size  Location     Type
 13810 ;;                  1    wreg      void 
 13811 ;; Registers used:
 13812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13818 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13819 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13820 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13821 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13822 ;;Total ram usage:       16 bytes
 13823 ;; Hardware stack levels used: 1
 13824 ;; Hardware stack levels required when called: 9
 13825 ;; This function calls:
 13826 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
 13827 ;;		___awdiv
 13828 ;;		___awmod
 13829 ;;		___lldiv
 13830 ;;		___lwdiv
 13831 ;;		___lwmod
 13832 ;; This function is called by:
 13833 ;;		_STATE_ChangeColorMode
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837  1F14                     _Time_RenderInputTime:	
 13838                           ;psect for function _Time_RenderInputTime
 13839                           
 13840                           
 13841                           ;timeCalculation.c: 108: void Time_RenderInputTime( uint32_t timeInSeconds,;timeCalculat
      +                          ion.c: 109:                            _Bool setCurrentTime );timeCalculation.c: 110: {;
      +                          timeCalculation.c: 111:     uint16_t currentTimeInMinutes = (uint16_t) ( timeInSeconds /
      +                           60u );
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _Time_RenderInputTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13845  1F14  3000               	movlw	0
 13846  1F15  0020               	movlb	0	; select bank0
 13847  1F16  00AC               	movwf	___lldiv@divisor+3
 13848  1F17  3000               	movlw	0
 13849  1F18  00AB               	movwf	___lldiv@divisor+2
 13850  1F19  3000               	movlw	0
 13851  1F1A  00AA               	movwf	___lldiv@divisor+1
 13852  1F1B  303C               	movlw	60
 13853  1F1C  00A9               	movwf	___lldiv@divisor
 13854  1F1D  0021               	movlb	1	; select bank1
 13855  1F1E  0823               	movf	(Time_RenderInputTime@timeInSeconds+3)^(0+128),w
 13856  1F1F  0020               	movlb	0	; select bank0
 13857  1F20  00B0               	movwf	___lldiv@dividend+3
 13858  1F21  0021               	movlb	1	; select bank1
 13859  1F22  0822               	movf	(Time_RenderInputTime@timeInSeconds+2)^(0+128),w
 13860  1F23  0020               	movlb	0	; select bank0
 13861  1F24  00AF               	movwf	___lldiv@dividend+2
 13862  1F25  0021               	movlb	1	; select bank1
 13863  1F26  0821               	movf	(Time_RenderInputTime@timeInSeconds+1)^(0+128),w
 13864  1F27  0020               	movlb	0	; select bank0
 13865  1F28  00AE               	movwf	___lldiv@dividend+1
 13866  1F29  0021               	movlb	1	; select bank1
 13867  1F2A  0820               	movf	Time_RenderInputTime@timeInSeconds^(0+128),w
 13868  1F2B  0020               	movlb	0	; select bank0
 13869  1F2C  00AD               	movwf	___lldiv@dividend
 13870  1F2D  319B  2333  319F   	fcall	___lldiv
 13871  1F30  0020               	movlb	0	; select bank0
 13872  1F31  082A               	movf	?___lldiv+1,w
 13873  1F32  0021               	movlb	1	; select bank1
 13874  1F33  00A9               	movwf	(Time_RenderInputTime@currentTimeInMinutes+1)^(0+128)
 13875  1F34  0020               	movlb	0	; select bank0
 13876  1F35  0829               	movf	?___lldiv,w
 13877  1F36  0021               	movlb	1	; select bank1
 13878  1F37  00A8               	movwf	Time_RenderInputTime@currentTimeInMinutes^(0+128)
 13879                           
 13880                           ;timeCalculation.c: 115:     uint8_t hours = (uint8_t) ( currentTimeInMinutes / 60u ) + 
      +                          1u;
 13881  1F38  303C               	movlw	60
 13882  1F39  0020               	movlb	0	; select bank0
 13883  1F3A  00A9               	movwf	___lwdiv@divisor
 13884  1F3B  3000               	movlw	0
 13885  1F3C  00AA               	movwf	___lwdiv@divisor+1
 13886  1F3D  0021               	movlb	1	; select bank1
 13887  1F3E  0829               	movf	(Time_RenderInputTime@currentTimeInMinutes+1)^(0+128),w
 13888  1F3F  0020               	movlb	0	; select bank0
 13889  1F40  00AC               	movwf	___lwdiv@dividend+1
 13890  1F41  0021               	movlb	1	; select bank1
 13891  1F42  0828               	movf	Time_RenderInputTime@currentTimeInMinutes^(0+128),w
 13892  1F43  0020               	movlb	0	; select bank0
 13893  1F44  00AB               	movwf	___lwdiv@dividend
 13894  1F45  31A6  2667  319F   	fcall	___lwdiv
 13895  1F48  0020               	movlb	0	; select bank0
 13896  1F49  0829               	movf	?___lwdiv,w
 13897  1F4A  3E01               	addlw	1
 13898  1F4B  0021               	movlb	1	; select bank1
 13899  1F4C  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 13900  1F4D  0825               	movf	??_Time_RenderInputTime^(0+128),w
 13901  1F4E  00AA               	movwf	Time_RenderInputTime@hours^(0+128)
 13902                           
 13903                           ;timeCalculation.c: 116:     uint8_t minutes = (uint8_t) ( currentTimeInMinutes % 60u );
 13904  1F4F  303C               	movlw	60
 13905  1F50  0020               	movlb	0	; select bank0
 13906  1F51  00BB               	movwf	___lwmod@divisor
 13907  1F52  3000               	movlw	0
 13908  1F53  00BC               	movwf	___lwmod@divisor+1
 13909  1F54  0021               	movlb	1	; select bank1
 13910  1F55  0829               	movf	(Time_RenderInputTime@currentTimeInMinutes+1)^(0+128),w
 13911  1F56  0020               	movlb	0	; select bank0
 13912  1F57  00BE               	movwf	___lwmod@dividend+1
 13913  1F58  0021               	movlb	1	; select bank1
 13914  1F59  0828               	movf	Time_RenderInputTime@currentTimeInMinutes^(0+128),w
 13915  1F5A  0020               	movlb	0	; select bank0
 13916  1F5B  00BD               	movwf	___lwmod@dividend
 13917  1F5C  31A5  25D5  319F   	fcall	___lwmod
 13918  1F5F  0020               	movlb	0	; select bank0
 13919  1F60  083B               	movf	?___lwmod,w
 13920  1F61  0021               	movlb	1	; select bank1
 13921  1F62  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 13922  1F63  0825               	movf	??_Time_RenderInputTime^(0+128),w
 13923  1F64  00AB               	movwf	Time_RenderInputTime@minutes^(0+128)
 13924                           
 13925                           ;timeCalculation.c: 118:     TimeInDigits t = {
 13926  1F65  0022               	movlb	2	; select bank2
 13927  1F66  0837               	movf	(Time_RenderInputTime@F6462+3)^(0+256),w
 13928  1F67  0021               	movlb	1	; select bank1
 13929  1F68  00AF               	movwf	(Time_RenderInputTime@t+3)^(0+128)
 13930  1F69  0022               	movlb	2	; select bank2
 13931  1F6A  0836               	movf	(Time_RenderInputTime@F6462+2)^(0+256),w
 13932  1F6B  0021               	movlb	1	; select bank1
 13933  1F6C  00AE               	movwf	(Time_RenderInputTime@t+2)^(0+128)
 13934  1F6D  0022               	movlb	2	; select bank2
 13935  1F6E  0835               	movf	(Time_RenderInputTime@F6462+1)^(0+256),w
 13936  1F6F  0021               	movlb	1	; select bank1
 13937  1F70  00AD               	movwf	(Time_RenderInputTime@t+1)^(0+128)
 13938  1F71  0022               	movlb	2	; select bank2
 13939  1F72  0834               	movf	Time_RenderInputTime@F6462^(0+256),w
 13940  1F73  0021               	movlb	1	; select bank1
 13941  1F74  00AC               	movwf	Time_RenderInputTime@t^(0+128)
 13942  1F75  300A               	movlw	10
 13943  1F76  0020               	movlb	0	; select bank0
 13944  1F77  00C2               	movwf	___awdiv@divisor
 13945  1F78  3000               	movlw	0
 13946  1F79  00C3               	movwf	___awdiv@divisor+1
 13947  1F7A  0021               	movlb	1	; select bank1
 13948  1F7B  082A               	movf	Time_RenderInputTime@hours^(0+128),w
 13949  1F7C  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 13950  1F7D  01A6               	clrf	(??_Time_RenderInputTime^(0+128)+1)
 13951  1F7E  0825               	movf	??_Time_RenderInputTime^(0+128),w
 13952  1F7F  0020               	movlb	0	; select bank0
 13953  1F80  00BD               	movwf	___awmod@dividend
 13954  1F81  0021               	movlb	1	; select bank1
 13955  1F82  0826               	movf	(??_Time_RenderInputTime+1)^(0+128),w
 13956  1F83  0020               	movlb	0	; select bank0
 13957  1F84  00BE               	movwf	___awmod@dividend+1
 13958  1F85  3064               	movlw	100
 13959  1F86  00BB               	movwf	___awmod@divisor
 13960  1F87  3000               	movlw	0
 13961  1F88  00BC               	movwf	___awmod@divisor+1
 13962  1F89  31A6  26DB  319F   	fcall	___awmod
 13963  1F8C  0020               	movlb	0	; select bank0
 13964  1F8D  083C               	movf	?___awmod+1,w
 13965  1F8E  00C5               	movwf	___awdiv@dividend+1
 13966  1F8F  083B               	movf	?___awmod,w
 13967  1F90  00C4               	movwf	___awdiv@dividend
 13968  1F91  319A  22E1  319F   	fcall	___awdiv
 13969  1F94  0020               	movlb	0	; select bank0
 13970  1F95  0842               	movf	?___awdiv,w
 13971  1F96  0021               	movlb	1	; select bank1
 13972  1F97  00A7               	movwf	(??_Time_RenderInputTime+2)^(0+128)
 13973  1F98  0827               	movf	(??_Time_RenderInputTime+2)^(0+128),w
 13974  1F99  00AC               	movwf	Time_RenderInputTime@t^(0+128)
 13975  1F9A  300A               	movlw	10
 13976  1F9B  0020               	movlb	0	; select bank0
 13977  1F9C  00BB               	movwf	___awmod@divisor
 13978  1F9D  3000               	movlw	0
 13979  1F9E  00BC               	movwf	___awmod@divisor+1
 13980  1F9F  0021               	movlb	1	; select bank1
 13981  1FA0  082A               	movf	Time_RenderInputTime@hours^(0+128),w
 13982  1FA1  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 13983  1FA2  01A6               	clrf	(??_Time_RenderInputTime^(0+128)+1)
 13984  1FA3  0825               	movf	??_Time_RenderInputTime^(0+128),w
 13985  1FA4  0020               	movlb	0	; select bank0
 13986  1FA5  00BD               	movwf	___awmod@dividend
 13987  1FA6  0021               	movlb	1	; select bank1
 13988  1FA7  0826               	movf	(??_Time_RenderInputTime+1)^(0+128),w
 13989  1FA8  0020               	movlb	0	; select bank0
 13990  1FA9  00BE               	movwf	___awmod@dividend+1
 13991  1FAA  31A6  26DB  319F   	fcall	___awmod
 13992  1FAD  0020               	movlb	0	; select bank0
 13993  1FAE  083B               	movf	?___awmod,w
 13994  1FAF  0021               	movlb	1	; select bank1
 13995  1FB0  00A7               	movwf	(??_Time_RenderInputTime+2)^(0+128)
 13996  1FB1  0827               	movf	(??_Time_RenderInputTime+2)^(0+128),w
 13997  1FB2  00AD               	movwf	(Time_RenderInputTime@t^(0+128)+1)
 13998  1FB3  300A               	movlw	10
 13999  1FB4  0020               	movlb	0	; select bank0
 14000  1FB5  00C2               	movwf	___awdiv@divisor
 14001  1FB6  3000               	movlw	0
 14002  1FB7  00C3               	movwf	___awdiv@divisor+1
 14003  1FB8  0021               	movlb	1	; select bank1
 14004  1FB9  082B               	movf	Time_RenderInputTime@minutes^(0+128),w
 14005  1FBA  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 14006  1FBB  01A6               	clrf	(??_Time_RenderInputTime^(0+128)+1)
 14007  1FBC  0825               	movf	??_Time_RenderInputTime^(0+128),w
 14008  1FBD  0020               	movlb	0	; select bank0
 14009  1FBE  00BD               	movwf	___awmod@dividend
 14010  1FBF  0021               	movlb	1	; select bank1
 14011  1FC0  0826               	movf	(??_Time_RenderInputTime+1)^(0+128),w
 14012  1FC1  0020               	movlb	0	; select bank0
 14013  1FC2  00BE               	movwf	___awmod@dividend+1
 14014  1FC3  3064               	movlw	100
 14015  1FC4  00BB               	movwf	___awmod@divisor
 14016  1FC5  3000               	movlw	0
 14017  1FC6  00BC               	movwf	___awmod@divisor+1
 14018  1FC7  31A6  26DB  319F   	fcall	___awmod
 14019  1FCA  0020               	movlb	0	; select bank0
 14020  1FCB  083C               	movf	?___awmod+1,w
 14021  1FCC  00C5               	movwf	___awdiv@dividend+1
 14022  1FCD  083B               	movf	?___awmod,w
 14023  1FCE  00C4               	movwf	___awdiv@dividend
 14024  1FCF  319A  22E1  319F   	fcall	___awdiv
 14025  1FD2  0020               	movlb	0	; select bank0
 14026  1FD3  0842               	movf	?___awdiv,w
 14027  1FD4  0021               	movlb	1	; select bank1
 14028  1FD5  00A7               	movwf	(??_Time_RenderInputTime+2)^(0+128)
 14029  1FD6  0827               	movf	(??_Time_RenderInputTime+2)^(0+128),w
 14030  1FD7  00AE               	movwf	(Time_RenderInputTime@t^(0+128)+2)
 14031  1FD8  300A               	movlw	10
 14032  1FD9  0020               	movlb	0	; select bank0
 14033  1FDA  00BB               	movwf	___awmod@divisor
 14034  1FDB  3000               	movlw	0
 14035  1FDC  00BC               	movwf	___awmod@divisor+1
 14036  1FDD  0021               	movlb	1	; select bank1
 14037  1FDE  082B               	movf	Time_RenderInputTime@minutes^(0+128),w
 14038  1FDF  00A5               	movwf	??_Time_RenderInputTime^(0+128)
 14039  1FE0  01A6               	clrf	(??_Time_RenderInputTime^(0+128)+1)
 14040  1FE1  0825               	movf	??_Time_RenderInputTime^(0+128),w
 14041  1FE2  0020               	movlb	0	; select bank0
 14042  1FE3  00BD               	movwf	___awmod@dividend
 14043  1FE4  0021               	movlb	1	; select bank1
 14044  1FE5  0826               	movf	(??_Time_RenderInputTime+1)^(0+128),w
 14045  1FE6  0020               	movlb	0	; select bank0
 14046  1FE7  00BE               	movwf	___awmod@dividend+1
 14047  1FE8  31A6  26DB  319F   	fcall	___awmod
 14048  1FEB  0020               	movlb	0	; select bank0
 14049  1FEC  083B               	movf	?___awmod,w
 14050  1FED  0021               	movlb	1	; select bank1
 14051  1FEE  00A7               	movwf	(??_Time_RenderInputTime+2)^(0+128)
 14052  1FEF  0827               	movf	(??_Time_RenderInputTime+2)^(0+128),w
 14053  1FF0  00AF               	movwf	(Time_RenderInputTime@t^(0+128)+3)
 14054                           
 14055                           ;timeCalculation.c: 125:     if( setCurrentTime )
 14056  1FF1  0824               	movf	Time_RenderInputTime@setCurrentTime^(0+128),w
 14057  1FF2  1903               	btfsc	3,2
 14058  1FF3  2FFC               	goto	l5352
 14059                           
 14060                           ;timeCalculation.c: 126:     {;timeCalculation.c: 127:         currentTimeInSeconds = ti
      +                          meInSeconds;
 14061  1FF4  0823               	movf	(Time_RenderInputTime@timeInSeconds+3)^(0+128),w
 14062  1FF5  00BE               	movwf	(_currentTimeInSeconds+3)^(0+128)	;volatile
 14063  1FF6  0822               	movf	(Time_RenderInputTime@timeInSeconds+2)^(0+128),w
 14064  1FF7  00BD               	movwf	(_currentTimeInSeconds+2)^(0+128)	;volatile
 14065  1FF8  0821               	movf	(Time_RenderInputTime@timeInSeconds+1)^(0+128),w
 14066  1FF9  00BC               	movwf	(_currentTimeInSeconds+1)^(0+128)	;volatile
 14067  1FFA  0820               	movf	Time_RenderInputTime@timeInSeconds^(0+128),w
 14068  1FFB  00BB               	movwf	_currentTimeInSeconds^(0+128)	;volatile
 14069  1FFC                     l5352:
 14070                           
 14071                           ;timeCalculation.c: 130:     Clock_WriteTimeDigitValuesAndRenderScreen( &t );
 14072  1FFC  30AC               	movlw	(low (Time_RenderInputTime@t| 0))& (0+255)
 14073  1FFD  3192  2242         	fcall	_Clock_WriteTimeDigitValuesAndRenderScreen
 14074  1FFF  0008               	return
 14075  2000                     __end_of_Time_RenderInputTime:
 14076                           
 14077                           	psect	text21
 14078  25D5                     __ptext21:	
 14079 ;; *************** function ___lwmod *****************
 14080 ;; Defined at:
 14081 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
 14082 ;; Parameters:    Size  Location     Type
 14083 ;;  divisor         2   26[BANK0 ] unsigned int 
 14084 ;;  dividend        2   28[BANK0 ] unsigned int 
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;  counter         1   31[BANK0 ] unsigned char 
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  2   26[BANK0 ] unsigned int 
 14089 ;; Registers used:
 14090 ;;		wreg, status,2, status,0
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14099 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14100 ;;Total ram usage:        6 bytes
 14101 ;; Hardware stack levels used: 1
 14102 ;; Hardware stack levels required when called: 5
 14103 ;; This function calls:
 14104 ;;		Nothing
 14105 ;; This function is called by:
 14106 ;;		_Time_RenderIfMinutesHaveChanged
 14107 ;;		_Time_RenderInputTime
 14108 ;;		_Clock_Popcorn_Pattern
 14109 ;;		_Clock_Popcorn_Pattern_Hold
 14110 ;; This function uses a non-reentrant model
 14111 ;;
 14112                           
 14113  25D5                     ___lwmod:	
 14114                           ;psect for function ___lwmod
 14115                           
 14116                           
 14117                           ;incstack = 0
 14118                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14119  25D5  0020               	movlb	0	; select bank0
 14120  25D6  083B               	movf	___lwmod@divisor,w
 14121  25D7  043C               	iorwf	___lwmod@divisor+1,w
 14122  25D8  1903               	btfsc	3,2
 14123  25D9  2DFD               	goto	l5224
 14124  25DA  01C0               	clrf	___lwmod@counter
 14125  25DB  0AC0               	incf	___lwmod@counter,f
 14126  25DC                     l5214:
 14127  25DC  1BBC               	btfsc	___lwmod@divisor+1,7
 14128  25DD  2DE8               	goto	l5216
 14129  25DE  3001               	movlw	1
 14130  25DF                     u4275:
 14131  25DF  35BB               	lslf	___lwmod@divisor,f
 14132  25E0  0DBC               	rlf	___lwmod@divisor+1,f
 14133  25E1  0B89               	decfsz	9,f
 14134  25E2  2DDF               	goto	u4275
 14135  25E3  3001               	movlw	1
 14136  25E4  00BF               	movwf	??___lwmod
 14137  25E5  083F               	movf	??___lwmod,w
 14138  25E6  07C0               	addwf	___lwmod@counter,f
 14139  25E7  2DDC               	goto	l5214
 14140  25E8                     l5216:
 14141  25E8  083C               	movf	___lwmod@divisor+1,w
 14142  25E9  023E               	subwf	___lwmod@dividend+1,w
 14143  25EA  1D03               	skipz
 14144  25EB  2DEE               	goto	u4295
 14145  25EC  083B               	movf	___lwmod@divisor,w
 14146  25ED  023D               	subwf	___lwmod@dividend,w
 14147  25EE                     u4295:
 14148  25EE  1C03               	skipc
 14149  25EF  2DF4               	goto	l5220
 14150  25F0  083B               	movf	___lwmod@divisor,w
 14151  25F1  02BD               	subwf	___lwmod@dividend,f
 14152  25F2  083C               	movf	___lwmod@divisor+1,w
 14153  25F3  3BBE               	subwfb	___lwmod@dividend+1,f
 14154  25F4                     l5220:
 14155  25F4  3001               	movlw	1
 14156  25F5                     u4305:
 14157  25F5  36BC               	lsrf	___lwmod@divisor+1,f
 14158  25F6  0CBB               	rrf	___lwmod@divisor,f
 14159  25F7  0B89               	decfsz	9,f
 14160  25F8  2DF5               	goto	u4305
 14161  25F9  3001               	movlw	1
 14162  25FA  02C0               	subwf	___lwmod@counter,f
 14163  25FB  1D03               	btfss	3,2
 14164  25FC  2DE8               	goto	l5216
 14165  25FD                     l5224:
 14166  25FD  083E               	movf	___lwmod@dividend+1,w
 14167  25FE  00BC               	movwf	?___lwmod+1
 14168  25FF  083D               	movf	___lwmod@dividend,w
 14169  2600  00BB               	movwf	?___lwmod
 14170  2601  0008               	return
 14171  2602                     __end_of___lwmod:
 14172                           
 14173                           	psect	text22
 14174  2667                     __ptext22:	
 14175 ;; *************** function ___lwdiv *****************
 14176 ;; Defined at:
 14177 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;  divisor         2    8[BANK0 ] unsigned int 
 14180 ;;  dividend        2   10[BANK0 ] unsigned int 
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;  quotient        2   14[BANK0 ] unsigned int 
 14183 ;;  counter         1   13[BANK0 ] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;                  2    8[BANK0 ] unsigned int 
 14186 ;; Registers used:
 14187 ;;		wreg, status,2, status,0
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14194 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14196 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14197 ;;Total ram usage:        8 bytes
 14198 ;; Hardware stack levels used: 1
 14199 ;; Hardware stack levels required when called: 5
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_Time_RenderIfMinutesHaveChanged
 14204 ;;		_Time_RenderInputTime
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208  2667                     ___lwdiv:	
 14209                           ;psect for function ___lwdiv
 14210                           
 14211                           
 14212                           ;incstack = 0
 14213                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 14214  2667  0020               	movlb	0	; select bank0
 14215  2668  01AF               	clrf	___lwdiv@quotient
 14216  2669  01B0               	clrf	___lwdiv@quotient+1
 14217  266A  0829               	movf	___lwdiv@divisor,w
 14218  266B  042A               	iorwf	___lwdiv@divisor+1,w
 14219  266C  1903               	btfsc	3,2
 14220  266D  2E97               	goto	l5202
 14221  266E  01AE               	clrf	___lwdiv@counter
 14222  266F  0AAE               	incf	___lwdiv@counter,f
 14223  2670                     l5190:
 14224  2670  1BAA               	btfsc	___lwdiv@divisor+1,7
 14225  2671  2E7C               	goto	l5192
 14226  2672  3001               	movlw	1
 14227  2673                     u4205:
 14228  2673  35A9               	lslf	___lwdiv@divisor,f
 14229  2674  0DAA               	rlf	___lwdiv@divisor+1,f
 14230  2675  0B89               	decfsz	9,f
 14231  2676  2E73               	goto	u4205
 14232  2677  3001               	movlw	1
 14233  2678  00AD               	movwf	??___lwdiv
 14234  2679  082D               	movf	??___lwdiv,w
 14235  267A  07AE               	addwf	___lwdiv@counter,f
 14236  267B  2E70               	goto	l5190
 14237  267C                     l5192:
 14238  267C  3001               	movlw	1
 14239  267D                     u4225:
 14240  267D  35AF               	lslf	___lwdiv@quotient,f
 14241  267E  0DB0               	rlf	___lwdiv@quotient+1,f
 14242  267F  0B89               	decfsz	9,f
 14243  2680  2E7D               	goto	u4225
 14244  2681  082A               	movf	___lwdiv@divisor+1,w
 14245  2682  022C               	subwf	___lwdiv@dividend+1,w
 14246  2683  1D03               	skipz
 14247  2684  2E87               	goto	u4235
 14248  2685  0829               	movf	___lwdiv@divisor,w
 14249  2686  022B               	subwf	___lwdiv@dividend,w
 14250  2687                     u4235:
 14251  2687  1C03               	skipc
 14252  2688  2E8E               	goto	l5198
 14253  2689  0829               	movf	___lwdiv@divisor,w
 14254  268A  02AB               	subwf	___lwdiv@dividend,f
 14255  268B  082A               	movf	___lwdiv@divisor+1,w
 14256  268C  3BAC               	subwfb	___lwdiv@dividend+1,f
 14257  268D  142F               	bsf	___lwdiv@quotient,0
 14258  268E                     l5198:
 14259  268E  3001               	movlw	1
 14260  268F                     u4245:
 14261  268F  36AA               	lsrf	___lwdiv@divisor+1,f
 14262  2690  0CA9               	rrf	___lwdiv@divisor,f
 14263  2691  0B89               	decfsz	9,f
 14264  2692  2E8F               	goto	u4245
 14265  2693  3001               	movlw	1
 14266  2694  02AE               	subwf	___lwdiv@counter,f
 14267  2695  1D03               	btfss	3,2
 14268  2696  2E7C               	goto	l5192
 14269  2697                     l5202:
 14270  2697  0830               	movf	___lwdiv@quotient+1,w
 14271  2698  00AA               	movwf	?___lwdiv+1
 14272  2699  082F               	movf	___lwdiv@quotient,w
 14273  269A  00A9               	movwf	?___lwdiv
 14274  269B  0008               	return
 14275  269C                     __end_of___lwdiv:
 14276                           
 14277                           	psect	text23
 14278  1B33                     __ptext23:	
 14279 ;; *************** function ___lldiv *****************
 14280 ;; Defined at:
 14281 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  divisor         4    8[BANK0 ] unsigned long 
 14284 ;;  dividend        4   12[BANK0 ] unsigned long 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  quotient        4   17[BANK0 ] unsigned long 
 14287 ;;  counter         1   21[BANK0 ] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  4    8[BANK0 ] unsigned long 
 14290 ;; Registers used:
 14291 ;;		wreg, status,2, status,0
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14297 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14298 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14300 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14301 ;;Total ram usage:       14 bytes
 14302 ;; Hardware stack levels used: 1
 14303 ;; Hardware stack levels required when called: 5
 14304 ;; This function calls:
 14305 ;;		Nothing
 14306 ;; This function is called by:
 14307 ;;		_Time_RenderIfMinutesHaveChanged
 14308 ;;		_Time_RenderInputTime
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312  1B33                     ___lldiv:	
 14313                           ;psect for function ___lldiv
 14314                           
 14315                           
 14316                           ;incstack = 0
 14317                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 14318  1B33  3000               	movlw	0
 14319  1B34  0020               	movlb	0	; select bank0
 14320  1B35  00B5               	movwf	___lldiv@quotient+3
 14321  1B36  3000               	movlw	0
 14322  1B37  00B4               	movwf	___lldiv@quotient+2
 14323  1B38  3000               	movlw	0
 14324  1B39  00B3               	movwf	___lldiv@quotient+1
 14325  1B3A  3000               	movlw	0
 14326  1B3B  00B2               	movwf	___lldiv@quotient
 14327  1B3C  082C               	movf	___lldiv@divisor+3,w
 14328  1B3D  042B               	iorwf	___lldiv@divisor+2,w
 14329  1B3E  042A               	iorwf	___lldiv@divisor+1,w
 14330  1B3F  0429               	iorwf	___lldiv@divisor,w
 14331  1B40  1903               	skipnz
 14332  1B41  2B7D               	goto	l5094
 14333  1B42  01B6               	clrf	___lldiv@counter
 14334  1B43  0AB6               	incf	___lldiv@counter,f
 14335  1B44                     l5080:
 14336  1B44  1BAC               	btfsc	___lldiv@divisor+3,7
 14337  1B45  2B52               	goto	l5082
 14338  1B46  3001               	movlw	1
 14339  1B47                     u3945:
 14340  1B47  35A9               	lslf	___lldiv@divisor,f
 14341  1B48  0DAA               	rlf	___lldiv@divisor+1,f
 14342  1B49  0DAB               	rlf	___lldiv@divisor+2,f
 14343  1B4A  0DAC               	rlf	___lldiv@divisor+3,f
 14344  1B4B  0B89               	decfsz	9,f
 14345  1B4C  2B47               	goto	u3945
 14346  1B4D  3001               	movlw	1
 14347  1B4E  00B1               	movwf	??___lldiv
 14348  1B4F  0831               	movf	??___lldiv,w
 14349  1B50  07B6               	addwf	___lldiv@counter,f
 14350  1B51  2B44               	goto	l5080
 14351  1B52                     l5082:
 14352  1B52  3001               	movlw	1
 14353  1B53                     u3965:
 14354  1B53  35B2               	lslf	___lldiv@quotient,f
 14355  1B54  0DB3               	rlf	___lldiv@quotient+1,f
 14356  1B55  0DB4               	rlf	___lldiv@quotient+2,f
 14357  1B56  0DB5               	rlf	___lldiv@quotient+3,f
 14358  1B57  0B89               	decfsz	9,f
 14359  1B58  2B53               	goto	u3965
 14360  1B59  082C               	movf	___lldiv@divisor+3,w
 14361  1B5A  0230               	subwf	___lldiv@dividend+3,w
 14362  1B5B  1D03               	skipz
 14363  1B5C  2B67               	goto	u3975
 14364  1B5D  082B               	movf	___lldiv@divisor+2,w
 14365  1B5E  022F               	subwf	___lldiv@dividend+2,w
 14366  1B5F  1D03               	skipz
 14367  1B60  2B67               	goto	u3975
 14368  1B61  082A               	movf	___lldiv@divisor+1,w
 14369  1B62  022E               	subwf	___lldiv@dividend+1,w
 14370  1B63  1D03               	skipz
 14371  1B64  2B67               	goto	u3975
 14372  1B65  0829               	movf	___lldiv@divisor,w
 14373  1B66  022D               	subwf	___lldiv@dividend,w
 14374  1B67                     u3975:
 14375  1B67  1C03               	skipc
 14376  1B68  2B72               	goto	l5090
 14377  1B69  0829               	movf	___lldiv@divisor,w
 14378  1B6A  02AD               	subwf	___lldiv@dividend,f
 14379  1B6B  082A               	movf	___lldiv@divisor+1,w
 14380  1B6C  3BAE               	subwfb	___lldiv@dividend+1,f
 14381  1B6D  082B               	movf	___lldiv@divisor+2,w
 14382  1B6E  3BAF               	subwfb	___lldiv@dividend+2,f
 14383  1B6F  082C               	movf	___lldiv@divisor+3,w
 14384  1B70  3BB0               	subwfb	___lldiv@dividend+3,f
 14385  1B71  1432               	bsf	___lldiv@quotient,0
 14386  1B72                     l5090:
 14387  1B72  3001               	movlw	1
 14388  1B73                     u3985:
 14389  1B73  36AC               	lsrf	___lldiv@divisor+3,f
 14390  1B74  0CAB               	rrf	___lldiv@divisor+2,f
 14391  1B75  0CAA               	rrf	___lldiv@divisor+1,f
 14392  1B76  0CA9               	rrf	___lldiv@divisor,f
 14393  1B77  0B89               	decfsz	9,f
 14394  1B78  2B73               	goto	u3985
 14395  1B79  3001               	movlw	1
 14396  1B7A  02B6               	subwf	___lldiv@counter,f
 14397  1B7B  1D03               	btfss	3,2
 14398  1B7C  2B52               	goto	l5082
 14399  1B7D                     l5094:
 14400  1B7D  0835               	movf	___lldiv@quotient+3,w
 14401  1B7E  00AC               	movwf	?___lldiv+3
 14402  1B7F  0834               	movf	___lldiv@quotient+2,w
 14403  1B80  00AB               	movwf	?___lldiv+2
 14404  1B81  0833               	movf	___lldiv@quotient+1,w
 14405  1B82  00AA               	movwf	?___lldiv+1
 14406  1B83  0832               	movf	___lldiv@quotient,w
 14407  1B84  00A9               	movwf	?___lldiv
 14408  1B85  0008               	return
 14409  1B86                     __end_of___lldiv:
 14410                           
 14411                           	psect	text24
 14412  26DB                     __ptext24:	
 14413 ;; *************** function ___awmod *****************
 14414 ;; Defined at:
 14415 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
 14416 ;; Parameters:    Size  Location     Type
 14417 ;;  divisor         2   26[BANK0 ] int 
 14418 ;;  dividend        2   28[BANK0 ] int 
 14419 ;; Auto vars:     Size  Location     Type
 14420 ;;  sign            1   32[BANK0 ] unsigned char 
 14421 ;;  counter         1   31[BANK0 ] unsigned char 
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  2   26[BANK0 ] int 
 14424 ;; Registers used:
 14425 ;;		wreg, status,2, status,0
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14434 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14435 ;;Total ram usage:        7 bytes
 14436 ;; Hardware stack levels used: 1
 14437 ;; Hardware stack levels required when called: 5
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_Time_RenderIfMinutesHaveChanged
 14442 ;;		_Time_RenderInputTime
 14443 ;;		_Clock_Popcorn_Pattern
 14444 ;;		_Clock_Popcorn_Pattern_Hold
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448  26DB                     ___awmod:	
 14449                           ;psect for function ___awmod
 14450                           
 14451                           
 14452                           ;incstack = 0
 14453                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14454  26DB  0020               	movlb	0	; select bank0
 14455  26DC  01C1               	clrf	___awmod@sign
 14456  26DD  1FBE               	btfss	___awmod@dividend+1,7
 14457  26DE  2EE6               	goto	l5150
 14458  26DF  09BD               	comf	___awmod@dividend,f
 14459  26E0  09BE               	comf	___awmod@dividend+1,f
 14460  26E1  0ABD               	incf	___awmod@dividend,f
 14461  26E2  1903               	skipnz
 14462  26E3  0ABE               	incf	___awmod@dividend+1,f
 14463  26E4  01C1               	clrf	___awmod@sign
 14464  26E5  0AC1               	incf	___awmod@sign,f
 14465  26E6                     l5150:
 14466  26E6  1FBC               	btfss	___awmod@divisor+1,7
 14467  26E7  2EED               	goto	l5154
 14468  26E8  09BB               	comf	___awmod@divisor,f
 14469  26E9  09BC               	comf	___awmod@divisor+1,f
 14470  26EA  0ABB               	incf	___awmod@divisor,f
 14471  26EB  1903               	skipnz
 14472  26EC  0ABC               	incf	___awmod@divisor+1,f
 14473  26ED                     l5154:
 14474  26ED  083B               	movf	___awmod@divisor,w
 14475  26EE  043C               	iorwf	___awmod@divisor+1,w
 14476  26EF  1903               	btfsc	3,2
 14477  26F0  2F14               	goto	l5172
 14478  26F1  01C0               	clrf	___awmod@counter
 14479  26F2  0AC0               	incf	___awmod@counter,f
 14480  26F3                     l5162:
 14481  26F3  1BBC               	btfsc	___awmod@divisor+1,7
 14482  26F4  2EFF               	goto	l5164
 14483  26F5  3001               	movlw	1
 14484  26F6                     u4135:
 14485  26F6  35BB               	lslf	___awmod@divisor,f
 14486  26F7  0DBC               	rlf	___awmod@divisor+1,f
 14487  26F8  0B89               	decfsz	9,f
 14488  26F9  2EF6               	goto	u4135
 14489  26FA  3001               	movlw	1
 14490  26FB  00BF               	movwf	??___awmod
 14491  26FC  083F               	movf	??___awmod,w
 14492  26FD  07C0               	addwf	___awmod@counter,f
 14493  26FE  2EF3               	goto	l5162
 14494  26FF                     l5164:
 14495  26FF  083C               	movf	___awmod@divisor+1,w
 14496  2700  023E               	subwf	___awmod@dividend+1,w
 14497  2701  1D03               	skipz
 14498  2702  2F05               	goto	u4155
 14499  2703  083B               	movf	___awmod@divisor,w
 14500  2704  023D               	subwf	___awmod@dividend,w
 14501  2705                     u4155:
 14502  2705  1C03               	skipc
 14503  2706  2F0B               	goto	l5168
 14504  2707  083B               	movf	___awmod@divisor,w
 14505  2708  02BD               	subwf	___awmod@dividend,f
 14506  2709  083C               	movf	___awmod@divisor+1,w
 14507  270A  3BBE               	subwfb	___awmod@dividend+1,f
 14508  270B                     l5168:
 14509  270B  3001               	movlw	1
 14510  270C                     u4165:
 14511  270C  36BC               	lsrf	___awmod@divisor+1,f
 14512  270D  0CBB               	rrf	___awmod@divisor,f
 14513  270E  0B89               	decfsz	9,f
 14514  270F  2F0C               	goto	u4165
 14515  2710  3001               	movlw	1
 14516  2711  02C0               	subwf	___awmod@counter,f
 14517  2712  1D03               	btfss	3,2
 14518  2713  2EFF               	goto	l5164
 14519  2714                     l5172:
 14520  2714  0841               	movf	___awmod@sign,w
 14521  2715  1903               	btfsc	3,2
 14522  2716  2F1C               	goto	l5176
 14523  2717  09BD               	comf	___awmod@dividend,f
 14524  2718  09BE               	comf	___awmod@dividend+1,f
 14525  2719  0ABD               	incf	___awmod@dividend,f
 14526  271A  1903               	skipnz
 14527  271B  0ABE               	incf	___awmod@dividend+1,f
 14528  271C                     l5176:
 14529  271C  083E               	movf	___awmod@dividend+1,w
 14530  271D  00BC               	movwf	?___awmod+1
 14531  271E  083D               	movf	___awmod@dividend,w
 14532  271F  00BB               	movwf	?___awmod
 14533  2720  0008               	return
 14534  2721                     __end_of___awmod:
 14535                           
 14536                           	psect	text25
 14537  1AE1                     __ptext25:	
 14538 ;; *************** function ___awdiv *****************
 14539 ;; Defined at:
 14540 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
 14541 ;; Parameters:    Size  Location     Type
 14542 ;;  divisor         2   33[BANK0 ] int 
 14543 ;;  dividend        2   35[BANK0 ] int 
 14544 ;; Auto vars:     Size  Location     Type
 14545 ;;  quotient        2   40[BANK0 ] int 
 14546 ;;  sign            1   39[BANK0 ] unsigned char 
 14547 ;;  counter         1   38[BANK0 ] unsigned char 
 14548 ;; Return value:  Size  Location     Type
 14549 ;;                  2   33[BANK0 ] int 
 14550 ;; Registers used:
 14551 ;;		wreg, status,2, status,0
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14557 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14558 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14560 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14561 ;;Total ram usage:        9 bytes
 14562 ;; Hardware stack levels used: 1
 14563 ;; Hardware stack levels required when called: 5
 14564 ;; This function calls:
 14565 ;;		Nothing
 14566 ;; This function is called by:
 14567 ;;		_Time_RenderIfMinutesHaveChanged
 14568 ;;		_Time_RenderInputTime
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572  1AE1                     ___awdiv:	
 14573                           ;psect for function ___awdiv
 14574                           
 14575                           
 14576                           ;incstack = 0
 14577                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14578  1AE1  0020               	movlb	0	; select bank0
 14579  1AE2  01C8               	clrf	___awdiv@sign
 14580  1AE3  1FC3               	btfss	___awdiv@divisor+1,7
 14581  1AE4  2AEC               	goto	l5106
 14582  1AE5  09C2               	comf	___awdiv@divisor,f
 14583  1AE6  09C3               	comf	___awdiv@divisor+1,f
 14584  1AE7  0AC2               	incf	___awdiv@divisor,f
 14585  1AE8  1903               	skipnz
 14586  1AE9  0AC3               	incf	___awdiv@divisor+1,f
 14587  1AEA  01C8               	clrf	___awdiv@sign
 14588  1AEB  0AC8               	incf	___awdiv@sign,f
 14589  1AEC                     l5106:
 14590  1AEC  1FC5               	btfss	___awdiv@dividend+1,7
 14591  1AED  2AF7               	goto	l5112
 14592  1AEE  09C4               	comf	___awdiv@dividend,f
 14593  1AEF  09C5               	comf	___awdiv@dividend+1,f
 14594  1AF0  0AC4               	incf	___awdiv@dividend,f
 14595  1AF1  1903               	skipnz
 14596  1AF2  0AC5               	incf	___awdiv@dividend+1,f
 14597  1AF3  3001               	movlw	1
 14598  1AF4  00C6               	movwf	??___awdiv
 14599  1AF5  0846               	movf	??___awdiv,w
 14600  1AF6  06C8               	xorwf	___awdiv@sign,f
 14601  1AF7                     l5112:
 14602  1AF7  01C9               	clrf	___awdiv@quotient
 14603  1AF8  01CA               	clrf	___awdiv@quotient+1
 14604  1AF9  0842               	movf	___awdiv@divisor,w
 14605  1AFA  0443               	iorwf	___awdiv@divisor+1,w
 14606  1AFB  1903               	btfsc	3,2
 14607  1AFC  2B26               	goto	l5134
 14608  1AFD  01C7               	clrf	___awdiv@counter
 14609  1AFE  0AC7               	incf	___awdiv@counter,f
 14610  1AFF                     l5122:
 14611  1AFF  1BC3               	btfsc	___awdiv@divisor+1,7
 14612  1B00  2B0B               	goto	l5124
 14613  1B01  3001               	movlw	1
 14614  1B02                     u4035:
 14615  1B02  35C2               	lslf	___awdiv@divisor,f
 14616  1B03  0DC3               	rlf	___awdiv@divisor+1,f
 14617  1B04  0B89               	decfsz	9,f
 14618  1B05  2B02               	goto	u4035
 14619  1B06  3001               	movlw	1
 14620  1B07  00C6               	movwf	??___awdiv
 14621  1B08  0846               	movf	??___awdiv,w
 14622  1B09  07C7               	addwf	___awdiv@counter,f
 14623  1B0A  2AFF               	goto	l5122
 14624  1B0B                     l5124:
 14625  1B0B  3001               	movlw	1
 14626  1B0C                     u4055:
 14627  1B0C  35C9               	lslf	___awdiv@quotient,f
 14628  1B0D  0DCA               	rlf	___awdiv@quotient+1,f
 14629  1B0E  0B89               	decfsz	9,f
 14630  1B0F  2B0C               	goto	u4055
 14631  1B10  0843               	movf	___awdiv@divisor+1,w
 14632  1B11  0245               	subwf	___awdiv@dividend+1,w
 14633  1B12  1D03               	skipz
 14634  1B13  2B16               	goto	u4065
 14635  1B14  0842               	movf	___awdiv@divisor,w
 14636  1B15  0244               	subwf	___awdiv@dividend,w
 14637  1B16                     u4065:
 14638  1B16  1C03               	skipc
 14639  1B17  2B1D               	goto	l5130
 14640  1B18  0842               	movf	___awdiv@divisor,w
 14641  1B19  02C4               	subwf	___awdiv@dividend,f
 14642  1B1A  0843               	movf	___awdiv@divisor+1,w
 14643  1B1B  3BC5               	subwfb	___awdiv@dividend+1,f
 14644  1B1C  1449               	bsf	___awdiv@quotient,0
 14645  1B1D                     l5130:
 14646  1B1D  3001               	movlw	1
 14647  1B1E                     u4075:
 14648  1B1E  36C3               	lsrf	___awdiv@divisor+1,f
 14649  1B1F  0CC2               	rrf	___awdiv@divisor,f
 14650  1B20  0B89               	decfsz	9,f
 14651  1B21  2B1E               	goto	u4075
 14652  1B22  3001               	movlw	1
 14653  1B23  02C7               	subwf	___awdiv@counter,f
 14654  1B24  1D03               	btfss	3,2
 14655  1B25  2B0B               	goto	l5124
 14656  1B26                     l5134:
 14657  1B26  0848               	movf	___awdiv@sign,w
 14658  1B27  1903               	btfsc	3,2
 14659  1B28  2B2E               	goto	l5138
 14660  1B29  09C9               	comf	___awdiv@quotient,f
 14661  1B2A  09CA               	comf	___awdiv@quotient+1,f
 14662  1B2B  0AC9               	incf	___awdiv@quotient,f
 14663  1B2C  1903               	skipnz
 14664  1B2D  0ACA               	incf	___awdiv@quotient+1,f
 14665  1B2E                     l5138:
 14666  1B2E  084A               	movf	___awdiv@quotient+1,w
 14667  1B2F  00C3               	movwf	?___awdiv+1
 14668  1B30  0849               	movf	___awdiv@quotient,w
 14669  1B31  00C2               	movwf	?___awdiv
 14670  1B32  0008               	return
 14671  1B33                     __end_of___awdiv:
 14672                           
 14673                           	psect	text26
 14674  1242                     __ptext26:	
 14675 ;; *************** function _Clock_WriteTimeDigitValuesAndRenderScreen *****************
 14676 ;; Defined at:
 14677 ;;		line 169 in file "clockLEDs.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  digits          1    wreg     const PTR const struct .
 14680 ;;		 -> Time_RenderInputTime@t(4), Time_RenderIfMinutesHaveChanged@t(4), 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  digits          1   58[BANK0 ] const PTR const struct .
 14683 ;;		 -> Time_RenderInputTime@t(4), Time_RenderIfMinutesHaveChanged@t(4), 
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  1    wreg      void 
 14686 ;; Registers used:
 14687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14688 ;; Tracked objects:
 14689 ;;		On entry : 0/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14695 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14696 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14697 ;;Total ram usage:        9 bytes
 14698 ;; Hardware stack levels used: 1
 14699 ;; Hardware stack levels required when called: 8
 14700 ;; This function calls:
 14701 ;;		_Clock_FixDigit4LastThreePixels
 14702 ;;		_WS2812B_Render
 14703 ;;		_WS2812b_CopyPixelBufferArrayFromSource
 14704 ;;		___wmul
 14705 ;; This function is called by:
 14706 ;;		_Time_RenderIfMinutesHaveChanged
 14707 ;;		_Time_RenderInputTime
 14708 ;; This function uses a non-reentrant model
 14709 ;;
 14710                           
 14711  1242                     _Clock_WriteTimeDigitValuesAndRenderScreen:	
 14712                           ;psect for function _Clock_WriteTimeDigitValuesAndRenderScreen
 14713                           
 14714                           
 14715                           ;incstack = 0
 14716                           ; Regs used in _Clock_WriteTimeDigitValuesAndRenderScreen: [wreg+fsr1l+fsr1h+status,2+st
      +                          atus,0+pclath+cstack]
 14717                           ;Clock_WriteTimeDigitValuesAndRenderScreen@digits stored from wreg
 14718  1242  0020               	movlb	0	; select bank0
 14719  1243  00DB               	movwf	Clock_WriteTimeDigitValuesAndRenderScreen@digits
 14720                           
 14721                           ;clockLEDs.c: 169: void Clock_WriteTimeDigitValuesAndRenderScreen( const TimeInDigits * 
      +                          const digits );clockLEDs.c: 170: {;clockLEDs.c: 171:     static uint8_t lastDigit1 = 0xF
      +                          F;;clockLEDs.c: 172:     static uint8_t lastDigit2 = 0xFF;;clockLEDs.c: 173:     static 
      +                          uint8_t lastDigit3 = 0xFF;;clockLEDs.c: 174:     static uint8_t lastDigit4 = 0xFF;;clock
      +                          LEDs.c: 177:     if( digits->digit1 != lastDigit1 )
 14722  1244  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14723  1245  0086               	movwf	6
 14724  1246  0187               	clrf	7
 14725  1247  0801               	movf	1,w
 14726  1248  0666               	xorwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit1,w
 14727  1249  1903               	skipnz
 14728  124A  2A85               	goto	l894
 14729                           
 14730                           ;clockLEDs.c: 178:     {;clockLEDs.c: 179:         lastDigit1 = digits->digit1;
 14731  124B  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14732  124C  0086               	movwf	6
 14733  124D  0187               	clrf	7
 14734  124E  0801               	movf	1,w
 14735  124F  00D3               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen
 14736  1250  0853               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen,w
 14737  1251  00E6               	movwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit1
 14738                           
 14739                           ;clockLEDs.c: 180:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14740  1252  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14741  1253  0086               	movwf	6
 14742  1254  0187               	clrf	7
 14743  1255  0801               	movf	1,w
 14744  1256  00D3               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen
 14745  1257  01D4               	clrf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1
 14746  1258  0853               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen,w
 14747  1259  00A9               	movwf	___wmul@multiplier
 14748  125A  0854               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1,w
 14749  125B  00AA               	movwf	___wmul@multiplier+1
 14750  125C  302A               	movlw	42
 14751  125D  00AB               	movwf	___wmul@multiplicand
 14752  125E  3000               	movlw	0
 14753  125F  00AC               	movwf	___wmul@multiplicand+1
 14754  1260  31A4  247E  3192   	fcall	___wmul
 14755  1263  308C               	movlw	140
 14756  1264  0020               	movlb	0	; select bank0
 14757  1265  00D5               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2
 14758  1266  3025               	movlw	37
 14759  1267  00D6               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+3
 14760  1268  0829               	movf	?___wmul,w
 14761  1269  0755               	addwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2,w
 14762  126A  00D7               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4
 14763  126B  082A               	movf	?___wmul+1,w
 14764  126C  3D56               	addwfc	??_Clock_WriteTimeDigitValuesAndRenderScreen+3,w
 14765  126D  00D8               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5
 14766  126E  0857               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4,w
 14767  126F  00D9               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391
 14768  1270  0858               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5,w
 14769  1271  00DA               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1
 14770                           
 14771                           ;clockLEDs.c: 180:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14772  1272  3062               	movlw	low _ledArray
 14773  1273  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 14774  1274  3000               	movlw	high _ledArray
 14775  1275  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 14776  1276  085A               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1,w
 14777  1277  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 14778  1278  0859               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391,w
 14779  1279  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 14780  127A  3001               	movlw	1
 14781  127B  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 14782  127C  3000               	movlw	0
 14783  127D  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 14784  127E  300E               	movlw	14
 14785  127F  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 14786  1280  3000               	movlw	0
 14787  1281  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 14788  1282  319B  23E1  3192   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 14789  1285                     l894:	
 14790                           ;clockLEDs.c: 184:     }
 14791                           
 14792                           
 14793                           ;clockLEDs.c: 185:     if( digits->digit2 != lastDigit2 )
 14794  1285  0020               	movlb	0	; select bank0
 14795  1286  0A5B               	incf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14796  1287  0086               	movwf	6
 14797  1288  0187               	clrf	7
 14798  1289  0801               	movf	1,w
 14799  128A  0021               	movlb	1	; select bank1
 14800  128B  0652               	xorwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit2^(0+128),w
 14801  128C  1903               	skipnz
 14802  128D  2AC9               	goto	l5010
 14803                           
 14804                           ;clockLEDs.c: 186:     {;clockLEDs.c: 187:         lastDigit2 = digits->digit2;
 14805  128E  0020               	movlb	0	; select bank0
 14806  128F  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14807  1290  0086               	movwf	6
 14808  1291  0187               	clrf	7
 14809  1292  3F41               	moviw [1]fsr1
 14810  1293  0021               	movlb	1	; select bank1
 14811  1294  00D2               	movwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit2^(0+128)
 14812                           
 14813                           ;clockLEDs.c: 188:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14814  1295  0020               	movlb	0	; select bank0
 14815  1296  0A5B               	incf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14816  1297  0086               	movwf	6
 14817  1298  0187               	clrf	7
 14818  1299  0801               	movf	1,w
 14819  129A  00D3               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen
 14820  129B  01D4               	clrf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1
 14821  129C  0853               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen,w
 14822  129D  00A9               	movwf	___wmul@multiplier
 14823  129E  0854               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1,w
 14824  129F  00AA               	movwf	___wmul@multiplier+1
 14825  12A0  302A               	movlw	42
 14826  12A1  00AB               	movwf	___wmul@multiplicand
 14827  12A2  3000               	movlw	0
 14828  12A3  00AC               	movwf	___wmul@multiplicand+1
 14829  12A4  31A4  247E  3192   	fcall	___wmul
 14830  12A7  30E8               	movlw	232
 14831  12A8  0020               	movlb	0	; select bank0
 14832  12A9  00D5               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2
 14833  12AA  3023               	movlw	35
 14834  12AB  00D6               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+3
 14835  12AC  0829               	movf	?___wmul,w
 14836  12AD  0755               	addwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2,w
 14837  12AE  00D7               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4
 14838  12AF  082A               	movf	?___wmul+1,w
 14839  12B0  3D56               	addwfc	??_Clock_WriteTimeDigitValuesAndRenderScreen+3,w
 14840  12B1  00D8               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5
 14841  12B2  0857               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4,w
 14842  12B3  00D9               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391
 14843  12B4  0858               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5,w
 14844  12B5  00DA               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1
 14845                           
 14846                           ;clockLEDs.c: 188:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14847  12B6  3062               	movlw	low _ledArray
 14848  12B7  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 14849  12B8  3000               	movlw	high _ledArray
 14850  12B9  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 14851  12BA  085A               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1,w
 14852  12BB  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 14853  12BC  0859               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391,w
 14854  12BD  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 14855  12BE  3010               	movlw	16
 14856  12BF  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 14857  12C0  3000               	movlw	0
 14858  12C1  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 14859  12C2  300E               	movlw	14
 14860  12C3  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 14861  12C4  3000               	movlw	0
 14862  12C5  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 14863  12C6  319B  23E1  3192   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 14864  12C9                     l5010:
 14865                           
 14866                           ;clockLEDs.c: 193:     if( digits->digit3 != lastDigit3 )
 14867  12C9  0020               	movlb	0	; select bank0
 14868  12CA  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14869  12CB  3E02               	addlw	2
 14870  12CC  0086               	movwf	6
 14871  12CD  0187               	clrf	7
 14872  12CE  0801               	movf	1,w
 14873  12CF  0021               	movlb	1	; select bank1
 14874  12D0  0651               	xorwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit3^(0+128),w
 14875  12D1  1903               	skipnz
 14876  12D2  2B0F               	goto	l5018
 14877                           
 14878                           ;clockLEDs.c: 194:     {;clockLEDs.c: 195:         lastDigit3 = digits->digit3;
 14879  12D3  0020               	movlb	0	; select bank0
 14880  12D4  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14881  12D5  0086               	movwf	6
 14882  12D6  0187               	clrf	7
 14883  12D7  3F42               	moviw [2]fsr1
 14884  12D8  0021               	movlb	1	; select bank1
 14885  12D9  00D1               	movwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit3^(0+128)
 14886                           
 14887                           ;clockLEDs.c: 196:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14888  12DA  0020               	movlb	0	; select bank0
 14889  12DB  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14890  12DC  3E02               	addlw	2
 14891  12DD  0086               	movwf	6
 14892  12DE  0187               	clrf	7
 14893  12DF  0801               	movf	1,w
 14894  12E0  00D3               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen
 14895  12E1  01D4               	clrf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1
 14896  12E2  0853               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen,w
 14897  12E3  00A9               	movwf	___wmul@multiplier
 14898  12E4  0854               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1,w
 14899  12E5  00AA               	movwf	___wmul@multiplier+1
 14900  12E6  302A               	movlw	42
 14901  12E7  00AB               	movwf	___wmul@multiplicand
 14902  12E8  3000               	movlw	0
 14903  12E9  00AC               	movwf	___wmul@multiplicand+1
 14904  12EA  31A4  247E  3192   	fcall	___wmul
 14905  12ED  30E8               	movlw	232
 14906  12EE  0020               	movlb	0	; select bank0
 14907  12EF  00D5               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2
 14908  12F0  3023               	movlw	35
 14909  12F1  00D6               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+3
 14910  12F2  0829               	movf	?___wmul,w
 14911  12F3  0755               	addwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2,w
 14912  12F4  00D7               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4
 14913  12F5  082A               	movf	?___wmul+1,w
 14914  12F6  3D56               	addwfc	??_Clock_WriteTimeDigitValuesAndRenderScreen+3,w
 14915  12F7  00D8               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5
 14916  12F8  0857               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4,w
 14917  12F9  00D9               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391
 14918  12FA  0858               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5,w
 14919  12FB  00DA               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1
 14920                           
 14921                           ;clockLEDs.c: 196:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14922  12FC  3062               	movlw	low _ledArray
 14923  12FD  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 14924  12FE  3000               	movlw	high _ledArray
 14925  12FF  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 14926  1300  085A               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1,w
 14927  1301  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 14928  1302  0859               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391,w
 14929  1303  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 14930  1304  3024               	movlw	36
 14931  1305  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 14932  1306  3000               	movlw	0
 14933  1307  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 14934  1308  300E               	movlw	14
 14935  1309  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 14936  130A  3000               	movlw	0
 14937  130B  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 14938  130C  319B  23E1  3192   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 14939  130F                     l5018:
 14940                           
 14941                           ;clockLEDs.c: 201:     if( digits->digit4 != lastDigit4 )
 14942  130F  0020               	movlb	0	; select bank0
 14943  1310  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14944  1311  3E03               	addlw	3
 14945  1312  0086               	movwf	6
 14946  1313  0187               	clrf	7
 14947  1314  0801               	movf	1,w
 14948  1315  0021               	movlb	1	; select bank1
 14949  1316  0650               	xorwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit4^(0+128),w
 14950  1317  1903               	skipnz
 14951  1318  2B5E               	goto	l5028
 14952                           
 14953                           ;clockLEDs.c: 202:     {;clockLEDs.c: 203:         lastDigit4 = digits->digit4;
 14954  1319  0020               	movlb	0	; select bank0
 14955  131A  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14956  131B  0086               	movwf	6
 14957  131C  0187               	clrf	7
 14958  131D  3F43               	moviw [3]fsr1
 14959  131E  0021               	movlb	1	; select bank1
 14960  131F  00D0               	movwf	Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit4^(0+128)
 14961                           
 14962                           ;clockLEDs.c: 207:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14963  1320  0020               	movlb	0	; select bank0
 14964  1321  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 14965  1322  3E03               	addlw	3
 14966  1323  0086               	movwf	6
 14967  1324  0187               	clrf	7
 14968  1325  0801               	movf	1,w
 14969  1326  00D3               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen
 14970  1327  01D4               	clrf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1
 14971  1328  0853               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen,w
 14972  1329  00A9               	movwf	___wmul@multiplier
 14973  132A  0854               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+1,w
 14974  132B  00AA               	movwf	___wmul@multiplier+1
 14975  132C  302A               	movlw	42
 14976  132D  00AB               	movwf	___wmul@multiplicand
 14977  132E  3000               	movlw	0
 14978  132F  00AC               	movwf	___wmul@multiplicand+1
 14979  1330  31A4  247E  3192   	fcall	___wmul
 14980  1333  308C               	movlw	140
 14981  1334  0020               	movlb	0	; select bank0
 14982  1335  00D5               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2
 14983  1336  3025               	movlw	37
 14984  1337  00D6               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+3
 14985  1338  0829               	movf	?___wmul,w
 14986  1339  0755               	addwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+2,w
 14987  133A  00D7               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4
 14988  133B  082A               	movf	?___wmul+1,w
 14989  133C  3D56               	addwfc	??_Clock_WriteTimeDigitValuesAndRenderScreen+3,w
 14990  133D  00D8               	movwf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5
 14991  133E  0857               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+4,w
 14992  133F  00D9               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391
 14993  1340  0858               	movf	??_Clock_WriteTimeDigitValuesAndRenderScreen+5,w
 14994  1341  00DA               	movwf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1
 14995                           
 14996                           ;clockLEDs.c: 207:         WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 14997  1342  3062               	movlw	low _ledArray
 14998  1343  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 14999  1344  3000               	movlw	high _ledArray
 15000  1345  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 15001  1346  085A               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391+1,w
 15002  1347  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 15003  1348  0859               	movf	_Clock_WriteTimeDigitValuesAndRenderScreen$2391,w
 15004  1349  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 15005  134A  3033               	movlw	51
 15006  134B  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 15007  134C  3000               	movlw	0
 15008  134D  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 15009  134E  300A               	movlw	10
 15010  134F  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 15011  1350  3000               	movlw	0
 15012  1351  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 15013  1352  319B  23E1  3192   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 15014                           
 15015                           ;clockLEDs.c: 213:         Clock_FixDigit4LastThreePixels( digits->digit4 );
 15016  1355  0020               	movlb	0	; select bank0
 15017  1356  085B               	movf	Clock_WriteTimeDigitValuesAndRenderScreen@digits,w
 15018  1357  3E03               	addlw	3
 15019  1358  0086               	movwf	6
 15020  1359  0187               	clrf	7
 15021  135A  0801               	movf	1,w
 15022  135B  319D  2587  3192   	fcall	_Clock_FixDigit4LastThreePixels
 15023  135E                     l5028:
 15024                           
 15025                           ;clockLEDs.c: 215:     WS2812B_Render( &ledArray );
 15026  135E  3062               	movlw	low _ledArray
 15027  135F  0020               	movlb	0	; select bank0
 15028  1360  00A9               	movwf	WS2812B_Render@strip
 15029  1361  3000               	movlw	high _ledArray
 15030  1362  00AA               	movwf	WS2812B_Render@strip+1
 15031  1363  3190  2031         	fcall	_WS2812B_Render
 15032  1365  0008               	return
 15033  1366                     __end_of_Clock_WriteTimeDigitValuesAndRenderScreen:
 15034                           
 15035                           	psect	text27
 15036  23C0                     __ptext27:	
 15037 ;; *************** function _Time_GetCurrentTimeInSeconds *****************
 15038 ;; Defined at:
 15039 ;;		line 103 in file "timeCalculation.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;		None
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  4    8[BANK0 ] unsigned long 
 15046 ;; Registers used:
 15047 ;;		wreg
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15056 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15057 ;;Total ram usage:        4 bytes
 15058 ;; Hardware stack levels used: 1
 15059 ;; Hardware stack levels required when called: 5
 15060 ;; This function calls:
 15061 ;;		Nothing
 15062 ;; This function is called by:
 15063 ;;		_STATE_ChangeColorMode
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067  23C0                     _Time_GetCurrentTimeInSeconds:	
 15068                           ;psect for function _Time_GetCurrentTimeInSeconds
 15069                           
 15070                           
 15071                           ;timeCalculation.c: 105:     return currentTimeInSeconds;
 15072                           
 15073                           ;incstack = 0
 15074                           ; Regs used in _Time_GetCurrentTimeInSeconds: [wreg]
 15075  23C0  0021               	movlb	1	; select bank1
 15076  23C1  083E               	movf	(_currentTimeInSeconds+3)^(0+128),w	;volatile
 15077  23C2  0020               	movlb	0	; select bank0
 15078  23C3  00AC               	movwf	?_Time_GetCurrentTimeInSeconds+3
 15079  23C4  0021               	movlb	1	; select bank1
 15080  23C5  083D               	movf	(_currentTimeInSeconds+2)^(0+128),w	;volatile
 15081  23C6  0020               	movlb	0	; select bank0
 15082  23C7  00AB               	movwf	?_Time_GetCurrentTimeInSeconds+2
 15083  23C8  0021               	movlb	1	; select bank1
 15084  23C9  083C               	movf	(_currentTimeInSeconds+1)^(0+128),w	;volatile
 15085  23CA  0020               	movlb	0	; select bank0
 15086  23CB  00AA               	movwf	?_Time_GetCurrentTimeInSeconds+1
 15087  23CC  0021               	movlb	1	; select bank1
 15088  23CD  083B               	movf	_currentTimeInSeconds^(0+128),w	;volatile
 15089  23CE  0020               	movlb	0	; select bank0
 15090  23CF  00A9               	movwf	?_Time_GetCurrentTimeInSeconds
 15091  23D0  0008               	return
 15092  23D1                     __end_of_Time_GetCurrentTimeInSeconds:
 15093                           
 15094                           	psect	text28
 15095  23D1                     __ptext28:	
 15096 ;; *************** function _RotaryEncoder_HasButtonPressOccurred *****************
 15097 ;; Defined at:
 15098 ;;		line 91 in file "rotaryEncoder.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;		None
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;		None
 15103 ;; Return value:  Size  Location     Type
 15104 ;;                  1    wreg      _Bool 
 15105 ;; Registers used:
 15106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15116 ;;Total ram usage:        0 bytes
 15117 ;; Hardware stack levels used: 1
 15118 ;; Hardware stack levels required when called: 5
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_STATE_ChangeColorMode
 15123 ;;		_APP_TASKS
 15124 ;; This function uses a non-reentrant model
 15125 ;;
 15126                           
 15127  23D1                     _RotaryEncoder_HasButtonPressOccurred:	
 15128                           ;psect for function _RotaryEncoder_HasButtonPressOccurred
 15129                           
 15130                           
 15131                           ;rotaryEncoder.c: 93:     if( rot->rotBtn.hasSwitchBeenPressed )
 15132                           
 15133                           ;incstack = 0
 15134                           ; Regs used in _RotaryEncoder_HasButtonPressOccurred: [wreg+fsr1l+fsr1h+status,2+status,
      +                          0]
 15135  23D1  0020               	movlb	0	; select bank0
 15136  23D2  0861               	movf	_rot,w
 15137  23D3  3E05               	addlw	5
 15138  23D4  0086               	movwf	6
 15139  23D5  3001               	movlw	1	; select bank2/3
 15140  23D6  0087               	movwf	7
 15141  23D7  0801               	movf	1,w
 15142  23D8  1903               	btfsc	3,2
 15143  23D9  2BE2               	goto	l5308
 15144                           
 15145                           ;rotaryEncoder.c: 94:     {;rotaryEncoder.c: 95:         rot->rotBtn.hasSwitchBeenPresse
      +                          d = 0;
 15146  23DA  0861               	movf	_rot,w
 15147  23DB  3E05               	addlw	5
 15148  23DC  0086               	movwf	6
 15149  23DD  3001               	movlw	1	; select bank2/3
 15150  23DE  0087               	movwf	7
 15151  23DF  0181               	clrf	1
 15152                           
 15153                           ;rotaryEncoder.c: 96:         return 1;
 15154  23E0  3001               	movlw	1
 15155  23E1  0008               	return
 15156  23E2                     l5308:
 15157                           
 15158                           ;rotaryEncoder.c: 99:     {;rotaryEncoder.c: 100:         return 0;
 15159  23E2  3000               	movlw	0
 15160  23E3  0008               	return
 15161  23E4                     __end_of_RotaryEncoder_HasButtonPressOccurred:
 15162                           
 15163                           	psect	text29
 15164  2535                     __ptext29:	
 15165 ;; *************** function _RotaryEncoder_GetShaftCounts *****************
 15166 ;; Defined at:
 15167 ;;		line 76 in file "rotaryEncoder.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  thisCountVal    4   12[BANK0 ] volatile long 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  4    8[BANK0 ] long 
 15174 ;; Registers used:
 15175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15182 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15184 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15185 ;;Total ram usage:        8 bytes
 15186 ;; Hardware stack levels used: 1
 15187 ;; Hardware stack levels required when called: 5
 15188 ;; This function calls:
 15189 ;;		Nothing
 15190 ;; This function is called by:
 15191 ;;		_STATE_PatternMode
 15192 ;;		_STATE_ChangeColorMode
 15193 ;;		_Time_RenderIfMinutesHaveChanged
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197  2535                     _RotaryEncoder_GetShaftCounts:	
 15198                           ;psect for function _RotaryEncoder_GetShaftCounts
 15199                           
 15200                           
 15201                           ;rotaryEncoder.c: 78:     volatile int32_t thisCountValue = rot->shaft.counts;
 15202                           
 15203                           ;incstack = 0
 15204                           ; Regs used in _RotaryEncoder_GetShaftCounts: [wreg+fsr1l+fsr1h+status,2+status,0]
 15205  2535  0020               	movlb	0	; select bank0
 15206  2536  0861               	movf	_rot,w
 15207  2537  3E0F               	addlw	15
 15208  2538  0086               	movwf	6
 15209  2539  3001               	movlw	1	; select bank2/3
 15210  253A  0087               	movwf	7
 15211  253B  3F40               	moviw [0]fsr1
 15212  253C  00AD               	movwf	RotaryEncoder_GetShaftCounts@thisCountValue	;volatile
 15213  253D  3F41               	moviw [1]fsr1
 15214  253E  00AE               	movwf	RotaryEncoder_GetShaftCounts@thisCountValue+1	;volatile
 15215  253F  3F42               	moviw [2]fsr1
 15216  2540  00AF               	movwf	RotaryEncoder_GetShaftCounts@thisCountValue+2	;volatile
 15217  2541  3F43               	moviw [3]fsr1
 15218  2542  00B0               	movwf	RotaryEncoder_GetShaftCounts@thisCountValue+3	;volatile
 15219                           
 15220                           ;rotaryEncoder.c: 79:     rot->shaft.counts = 0;
 15221  2543  0861               	movf	_rot,w
 15222  2544  3E0F               	addlw	15
 15223  2545  0086               	movwf	6
 15224  2546  3001               	movlw	1	; select bank2/3
 15225  2547  0087               	movwf	7
 15226  2548  3000               	movlw	0
 15227  2549  3FC0               	movwi [0]fsr1
 15228  254A  3000               	movlw	0
 15229  254B  3FC1               	movwi [1]fsr1
 15230  254C  3FC2               	movwi [2]fsr1
 15231  254D  3FC3               	movwi [3]fsr1
 15232                           
 15233                           ;rotaryEncoder.c: 80:     return thisCountValue;
 15234  254E  0830               	movf	RotaryEncoder_GetShaftCounts@thisCountValue+3,w	;volatile
 15235  254F  00AC               	movwf	?_RotaryEncoder_GetShaftCounts+3
 15236  2550  082F               	movf	RotaryEncoder_GetShaftCounts@thisCountValue+2,w	;volatile
 15237  2551  00AB               	movwf	?_RotaryEncoder_GetShaftCounts+2
 15238  2552  082E               	movf	RotaryEncoder_GetShaftCounts@thisCountValue+1,w	;volatile
 15239  2553  00AA               	movwf	?_RotaryEncoder_GetShaftCounts+1
 15240  2554  082D               	movf	RotaryEncoder_GetShaftCounts@thisCountValue,w	;volatile
 15241  2555  00A9               	movwf	?_RotaryEncoder_GetShaftCounts
 15242  2556  0008               	return
 15243  2557                     __end_of_RotaryEncoder_GetShaftCounts:
 15244                           
 15245                           	psect	text30
 15246  2513                     __ptext30:	
 15247 ;; *************** function _DATAEE_WriteByte *****************
 15248 ;; Defined at:
 15249 ;;		line 180 in file "mcc_generated_files/memory.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;  bAdd            2    8[BANK0 ] unsigned short 
 15252 ;;  bData           1   10[BANK0 ] unsigned char 
 15253 ;; Auto vars:     Size  Location     Type
 15254 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  1    wreg      void 
 15257 ;; Registers used:
 15258 ;;		wreg, status,2, status,0
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15264 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15267 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15268 ;;Total ram usage:        4 bytes
 15269 ;; Hardware stack levels used: 1
 15270 ;; Hardware stack levels required when called: 5
 15271 ;; This function calls:
 15272 ;;		Nothing
 15273 ;; This function is called by:
 15274 ;;		_STATE_ChangeColorMode
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278  2513                     _DATAEE_WriteByte:	
 15279                           ;psect for function _DATAEE_WriteByte
 15280                           
 15281                           
 15282                           ;mcc_generated_files/memory.c: 180: void DATAEE_WriteByte(uint16_t bAdd, uint8_t bData);
      +                          mcc_generated_files/memory.c: 181: {;mcc_generated_files/memory.c: 182:     uint8_t GIEB
      +                          itValue = INTCONbits.GIE;
 15283                           
 15284                           ;incstack = 0
 15285                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15286  2513  3000               	movlw	0
 15287  2514  1B8B               	btfsc	11,7	;volatile
 15288  2515  3001               	movlw	1
 15289  2516  0020               	movlb	0	; select bank0
 15290  2517  00AC               	movwf	DATAEE_WriteByte@GIEBitValue
 15291                           
 15292                           ;mcc_generated_files/memory.c: 184:     NVMADRH = ((bAdd >> 8) & 0xFF);
 15293  2518  082A               	movf	DATAEE_WriteByte@bAdd+1,w
 15294  2519  0031               	movlb	17	; select bank17
 15295  251A  0092               	movwf	18	;volatile
 15296                           
 15297                           ;mcc_generated_files/memory.c: 185:     NVMADRL = (bAdd & 0xFF);
 15298  251B  0020               	movlb	0	; select bank0
 15299  251C  0829               	movf	DATAEE_WriteByte@bAdd,w
 15300  251D  0031               	movlb	17	; select bank17
 15301  251E  0091               	movwf	17	;volatile
 15302                           
 15303                           ;mcc_generated_files/memory.c: 186:     NVMDATL = bData;
 15304  251F  0020               	movlb	0	; select bank0
 15305  2520  082B               	movf	DATAEE_WriteByte@bData,w
 15306  2521  0031               	movlb	17	; select bank17
 15307  2522  0093               	movwf	19	;volatile
 15308                           
 15309                           ;mcc_generated_files/memory.c: 187:     NVMCON1bits.NVMREGS = 1;
 15310  2523  1715               	bsf	21,6	;volsfr
 15311                           
 15312                           ;mcc_generated_files/memory.c: 188:     NVMCON1bits.WREN = 1;
 15313  2524  1515               	bsf	21,2	;volsfr
 15314                           
 15315                           ;mcc_generated_files/memory.c: 189:     INTCONbits.GIE = 0;
 15316  2525  138B               	bcf	11,7	;volatile
 15317                           
 15318                           ;mcc_generated_files/memory.c: 190:     NVMCON2 = 0x55;
 15319  2526  3055               	movlw	85
 15320  2527  0096               	movwf	22	;volsfr
 15321                           
 15322                           ;mcc_generated_files/memory.c: 191:     NVMCON2 = 0xAA;
 15323  2528  30AA               	movlw	170
 15324  2529  0096               	movwf	22	;volsfr
 15325                           
 15326                           ;mcc_generated_files/memory.c: 192:     NVMCON1bits.WR = 1;
 15327  252A  1495               	bsf	21,1	;volsfr
 15328  252B                     l398:	
 15329                           ;mcc_generated_files/memory.c: 195:     {;mcc_generated_files/memory.c: 196:     }
 15330                           
 15331                           
 15332                           ;mcc_generated_files/memory.c: 194:     while (NVMCON1bits.WR)
 15333  252B  1895               	btfsc	21,1	;volsfr
 15334  252C  2D2B               	goto	l398
 15335                           
 15336                           ;mcc_generated_files/memory.c: 198:     NVMCON1bits.WREN = 0;
 15337  252D  1115               	bcf	21,2	;volsfr
 15338                           
 15339                           ;mcc_generated_files/memory.c: 199:     INTCONbits.GIE = GIEBitValue;
 15340  252E  0020               	movlb	0	; select bank0
 15341  252F  0C2C               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15342  2530  1C03               	skipc
 15343  2531  138B               	bcf	11,7	;volatile
 15344  2532  1803               	skipnc
 15345  2533  178B               	bsf	11,7	;volatile
 15346  2534  0008               	return
 15347  2535                     __end_of_DATAEE_WriteByte:
 15348                           
 15349                           	psect	text31
 15350  1121                     __ptext31:	
 15351 ;; *************** function _Clock_ForceRender *****************
 15352 ;; Defined at:
 15353 ;;		line 347 in file "clockLEDs.c"
 15354 ;; Parameters:    Size  Location     Type
 15355 ;;  t               2   50[BANK0 ] const PTR const struct .
 15356 ;;		 -> STATE_ChangeColorMode@dColorTime(4), 
 15357 ;; Auto vars:     Size  Location     Type
 15358 ;;		None
 15359 ;; Return value:  Size  Location     Type
 15360 ;;                  1    wreg      void 
 15361 ;; Registers used:
 15362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15363 ;; Tracked objects:
 15364 ;;		On entry : 0/0
 15365 ;;		On exit  : 0/0
 15366 ;;		Unchanged: 0/0
 15367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15368 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15369 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15370 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15371 ;;      Totals:         0      10       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15372 ;;Total ram usage:       12 bytes
 15373 ;; Hardware stack levels used: 1
 15374 ;; Hardware stack levels required when called: 8
 15375 ;; This function calls:
 15376 ;;		_Clock_FixDigit4LastThreePixels
 15377 ;;		_WS2812B_Render
 15378 ;;		_WS2812b_CopyPixelBufferArrayFromSource
 15379 ;;		___wmul
 15380 ;; This function is called by:
 15381 ;;		_STATE_ChangeColorMode
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385  1121                     _Clock_ForceRender:	
 15386                           ;psect for function _Clock_ForceRender
 15387                           
 15388                           
 15389                           ;clockLEDs.c: 347: void Clock_ForceRender( const TimeInDigits * const t );clockLEDs.c: 3
      +                          48: {;clockLEDs.c: 349:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15390                           
 15391                           ;incstack = 0
 15392                           ; Regs used in _Clock_ForceRender: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15393  1121  0020               	movlb	0	; select bank0
 15394  1122  0853               	movf	Clock_ForceRender@t,w
 15395  1123  0084               	movwf	4
 15396  1124  0854               	movf	Clock_ForceRender@t+1,w
 15397  1125  0085               	movwf	5
 15398  1126  0800               	movf	0,w	;code access
 15399  1127  00D5               	movwf	??_Clock_ForceRender
 15400  1128  01D6               	clrf	??_Clock_ForceRender+1
 15401  1129  0855               	movf	??_Clock_ForceRender,w
 15402  112A  00A9               	movwf	___wmul@multiplier
 15403  112B  0856               	movf	??_Clock_ForceRender+1,w
 15404  112C  00AA               	movwf	___wmul@multiplier+1
 15405  112D  302A               	movlw	42
 15406  112E  00AB               	movwf	___wmul@multiplicand
 15407  112F  3000               	movlw	0
 15408  1130  00AC               	movwf	___wmul@multiplicand+1
 15409  1131  31A4  247E  3191   	fcall	___wmul
 15410  1134  308C               	movlw	140
 15411  1135  0020               	movlb	0	; select bank0
 15412  1136  00D7               	movwf	??_Clock_ForceRender+2
 15413  1137  3025               	movlw	37
 15414  1138  00D8               	movwf	??_Clock_ForceRender+3
 15415  1139  0829               	movf	?___wmul,w
 15416  113A  0757               	addwf	??_Clock_ForceRender+2,w
 15417  113B  00D9               	movwf	??_Clock_ForceRender+4
 15418  113C  082A               	movf	?___wmul+1,w
 15419  113D  3D58               	addwfc	??_Clock_ForceRender+3,w
 15420  113E  00DA               	movwf	??_Clock_ForceRender+5
 15421  113F  0859               	movf	??_Clock_ForceRender+4,w
 15422  1140  0021               	movlb	1	; select bank1
 15423  1141  00A0               	movwf	_Clock_ForceRender$2392^(0+128)
 15424  1142  0020               	movlb	0	; select bank0
 15425  1143  085A               	movf	??_Clock_ForceRender+5,w
 15426  1144  0021               	movlb	1	; select bank1
 15427  1145  00A1               	movwf	(_Clock_ForceRender$2392+1)^(0+128)
 15428                           
 15429                           ;clockLEDs.c: 347: void Clock_ForceRender( const TimeInDigits * const t );clockLEDs.c: 3
      +                          48: {;clockLEDs.c: 349:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15430  1146  3062               	movlw	low _ledArray
 15431  1147  0020               	movlb	0	; select bank0
 15432  1148  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 15433  1149  3000               	movlw	high _ledArray
 15434  114A  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 15435  114B  0021               	movlb	1	; select bank1
 15436  114C  0821               	movf	(_Clock_ForceRender$2392+1)^(0+128),w
 15437  114D  0020               	movlb	0	; select bank0
 15438  114E  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 15439  114F  0021               	movlb	1	; select bank1
 15440  1150  0820               	movf	_Clock_ForceRender$2392^(0+128),w
 15441  1151  0020               	movlb	0	; select bank0
 15442  1152  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 15443  1153  3001               	movlw	1
 15444  1154  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 15445  1155  3000               	movlw	0
 15446  1156  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 15447  1157  300E               	movlw	14
 15448  1158  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 15449  1159  3000               	movlw	0
 15450  115A  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 15451  115B  319B  23E1  3191   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 15452                           
 15453                           ;clockLEDs.c: 353:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15454  115E  0020               	movlb	0	; select bank0
 15455  115F  0854               	movf	Clock_ForceRender@t+1,w
 15456  1160  00D6               	movwf	??_Clock_ForceRender+1
 15457  1161  0853               	movf	Clock_ForceRender@t,w
 15458  1162  00D5               	movwf	??_Clock_ForceRender
 15459  1163  3001               	movlw	1
 15460  1164  0755               	addwf	??_Clock_ForceRender,w
 15461  1165  0084               	movwf	4
 15462  1166  0856               	movf	??_Clock_ForceRender+1,w
 15463  1167  1803               	skipnc
 15464  1168  0A56               	incf	??_Clock_ForceRender+1,w
 15465  1169  0085               	movwf	5
 15466  116A  0800               	movf	0,w	;code access
 15467  116B  00D7               	movwf	??_Clock_ForceRender+2
 15468  116C  01D8               	clrf	??_Clock_ForceRender+3
 15469  116D  0857               	movf	??_Clock_ForceRender+2,w
 15470  116E  00A9               	movwf	___wmul@multiplier
 15471  116F  0858               	movf	??_Clock_ForceRender+3,w
 15472  1170  00AA               	movwf	___wmul@multiplier+1
 15473  1171  302A               	movlw	42
 15474  1172  00AB               	movwf	___wmul@multiplicand
 15475  1173  3000               	movlw	0
 15476  1174  00AC               	movwf	___wmul@multiplicand+1
 15477  1175  31A4  247E  3191   	fcall	___wmul
 15478  1178  30E8               	movlw	232
 15479  1179  0020               	movlb	0	; select bank0
 15480  117A  00D9               	movwf	??_Clock_ForceRender+4
 15481  117B  3023               	movlw	35
 15482  117C  00DA               	movwf	??_Clock_ForceRender+5
 15483  117D  0829               	movf	?___wmul,w
 15484  117E  0759               	addwf	??_Clock_ForceRender+4,w
 15485  117F  00DB               	movwf	??_Clock_ForceRender+6
 15486  1180  082A               	movf	?___wmul+1,w
 15487  1181  3D5A               	addwfc	??_Clock_ForceRender+5,w
 15488  1182  00DC               	movwf	??_Clock_ForceRender+7
 15489  1183  085B               	movf	??_Clock_ForceRender+6,w
 15490  1184  0021               	movlb	1	; select bank1
 15491  1185  00A0               	movwf	_Clock_ForceRender$2392^(0+128)
 15492  1186  0020               	movlb	0	; select bank0
 15493  1187  085C               	movf	??_Clock_ForceRender+7,w
 15494  1188  0021               	movlb	1	; select bank1
 15495  1189  00A1               	movwf	(_Clock_ForceRender$2392+1)^(0+128)
 15496                           
 15497                           ;clockLEDs.c: 353:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15498  118A  3062               	movlw	low _ledArray
 15499  118B  0020               	movlb	0	; select bank0
 15500  118C  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 15501  118D  3000               	movlw	high _ledArray
 15502  118E  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 15503  118F  0021               	movlb	1	; select bank1
 15504  1190  0821               	movf	(_Clock_ForceRender$2392+1)^(0+128),w
 15505  1191  0020               	movlb	0	; select bank0
 15506  1192  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 15507  1193  0021               	movlb	1	; select bank1
 15508  1194  0820               	movf	_Clock_ForceRender$2392^(0+128),w
 15509  1195  0020               	movlb	0	; select bank0
 15510  1196  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 15511  1197  3010               	movlw	16
 15512  1198  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 15513  1199  3000               	movlw	0
 15514  119A  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 15515  119B  300E               	movlw	14
 15516  119C  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 15517  119D  3000               	movlw	0
 15518  119E  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 15519  119F  319B  23E1  3191   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 15520                           
 15521                           ;clockLEDs.c: 357:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15522  11A2  0020               	movlb	0	; select bank0
 15523  11A3  0854               	movf	Clock_ForceRender@t+1,w
 15524  11A4  00D6               	movwf	??_Clock_ForceRender+1
 15525  11A5  0853               	movf	Clock_ForceRender@t,w
 15526  11A6  00D5               	movwf	??_Clock_ForceRender
 15527  11A7  3002               	movlw	2
 15528  11A8  0755               	addwf	??_Clock_ForceRender,w
 15529  11A9  0084               	movwf	4
 15530  11AA  0856               	movf	??_Clock_ForceRender+1,w
 15531  11AB  1803               	skipnc
 15532  11AC  0A56               	incf	??_Clock_ForceRender+1,w
 15533  11AD  0085               	movwf	5
 15534  11AE  0800               	movf	0,w	;code access
 15535  11AF  00D7               	movwf	??_Clock_ForceRender+2
 15536  11B0  01D8               	clrf	??_Clock_ForceRender+3
 15537  11B1  0857               	movf	??_Clock_ForceRender+2,w
 15538  11B2  00A9               	movwf	___wmul@multiplier
 15539  11B3  0858               	movf	??_Clock_ForceRender+3,w
 15540  11B4  00AA               	movwf	___wmul@multiplier+1
 15541  11B5  302A               	movlw	42
 15542  11B6  00AB               	movwf	___wmul@multiplicand
 15543  11B7  3000               	movlw	0
 15544  11B8  00AC               	movwf	___wmul@multiplicand+1
 15545  11B9  31A4  247E  3191   	fcall	___wmul
 15546  11BC  30E8               	movlw	232
 15547  11BD  0020               	movlb	0	; select bank0
 15548  11BE  00D9               	movwf	??_Clock_ForceRender+4
 15549  11BF  3023               	movlw	35
 15550  11C0  00DA               	movwf	??_Clock_ForceRender+5
 15551  11C1  0829               	movf	?___wmul,w
 15552  11C2  0759               	addwf	??_Clock_ForceRender+4,w
 15553  11C3  00DB               	movwf	??_Clock_ForceRender+6
 15554  11C4  082A               	movf	?___wmul+1,w
 15555  11C5  3D5A               	addwfc	??_Clock_ForceRender+5,w
 15556  11C6  00DC               	movwf	??_Clock_ForceRender+7
 15557  11C7  085B               	movf	??_Clock_ForceRender+6,w
 15558  11C8  0021               	movlb	1	; select bank1
 15559  11C9  00A0               	movwf	_Clock_ForceRender$2392^(0+128)
 15560  11CA  0020               	movlb	0	; select bank0
 15561  11CB  085C               	movf	??_Clock_ForceRender+7,w
 15562  11CC  0021               	movlb	1	; select bank1
 15563  11CD  00A1               	movwf	(_Clock_ForceRender$2392+1)^(0+128)
 15564                           
 15565                           ;clockLEDs.c: 357:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15566  11CE  3062               	movlw	low _ledArray
 15567  11CF  0020               	movlb	0	; select bank0
 15568  11D0  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 15569  11D1  3000               	movlw	high _ledArray
 15570  11D2  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 15571  11D3  0021               	movlb	1	; select bank1
 15572  11D4  0821               	movf	(_Clock_ForceRender$2392+1)^(0+128),w
 15573  11D5  0020               	movlb	0	; select bank0
 15574  11D6  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 15575  11D7  0021               	movlb	1	; select bank1
 15576  11D8  0820               	movf	_Clock_ForceRender$2392^(0+128),w
 15577  11D9  0020               	movlb	0	; select bank0
 15578  11DA  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 15579  11DB  3024               	movlw	36
 15580  11DC  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 15581  11DD  3000               	movlw	0
 15582  11DE  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 15583  11DF  300E               	movlw	14
 15584  11E0  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 15585  11E1  3000               	movlw	0
 15586  11E2  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 15587  11E3  319B  23E1  3191   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 15588                           
 15589                           ;clockLEDs.c: 361:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15590  11E6  0020               	movlb	0	; select bank0
 15591  11E7  0854               	movf	Clock_ForceRender@t+1,w
 15592  11E8  00D6               	movwf	??_Clock_ForceRender+1
 15593  11E9  0853               	movf	Clock_ForceRender@t,w
 15594  11EA  00D5               	movwf	??_Clock_ForceRender
 15595  11EB  3003               	movlw	3
 15596  11EC  0755               	addwf	??_Clock_ForceRender,w
 15597  11ED  0084               	movwf	4
 15598  11EE  0856               	movf	??_Clock_ForceRender+1,w
 15599  11EF  1803               	skipnc
 15600  11F0  0A56               	incf	??_Clock_ForceRender+1,w
 15601  11F1  0085               	movwf	5
 15602  11F2  0800               	movf	0,w	;code access
 15603  11F3  00D7               	movwf	??_Clock_ForceRender+2
 15604  11F4  01D8               	clrf	??_Clock_ForceRender+3
 15605  11F5  0857               	movf	??_Clock_ForceRender+2,w
 15606  11F6  00A9               	movwf	___wmul@multiplier
 15607  11F7  0858               	movf	??_Clock_ForceRender+3,w
 15608  11F8  00AA               	movwf	___wmul@multiplier+1
 15609  11F9  302A               	movlw	42
 15610  11FA  00AB               	movwf	___wmul@multiplicand
 15611  11FB  3000               	movlw	0
 15612  11FC  00AC               	movwf	___wmul@multiplicand+1
 15613  11FD  31A4  247E  3191   	fcall	___wmul
 15614  1200  308C               	movlw	140
 15615  1201  0020               	movlb	0	; select bank0
 15616  1202  00D9               	movwf	??_Clock_ForceRender+4
 15617  1203  3025               	movlw	37
 15618  1204  00DA               	movwf	??_Clock_ForceRender+5
 15619  1205  0829               	movf	?___wmul,w
 15620  1206  0759               	addwf	??_Clock_ForceRender+4,w
 15621  1207  00DB               	movwf	??_Clock_ForceRender+6
 15622  1208  082A               	movf	?___wmul+1,w
 15623  1209  3D5A               	addwfc	??_Clock_ForceRender+5,w
 15624  120A  00DC               	movwf	??_Clock_ForceRender+7
 15625  120B  085B               	movf	??_Clock_ForceRender+6,w
 15626  120C  0021               	movlb	1	; select bank1
 15627  120D  00A0               	movwf	_Clock_ForceRender$2392^(0+128)
 15628  120E  0020               	movlb	0	; select bank0
 15629  120F  085C               	movf	??_Clock_ForceRender+7,w
 15630  1210  0021               	movlb	1	; select bank1
 15631  1211  00A1               	movwf	(_Clock_ForceRender$2392+1)^(0+128)
 15632                           
 15633                           ;clockLEDs.c: 361:     WS2812b_CopyPixelBufferArrayFromSource( &ledArray,
 15634  1212  3062               	movlw	low _ledArray
 15635  1213  0020               	movlb	0	; select bank0
 15636  1214  00BB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip
 15637  1215  3000               	movlw	high _ledArray
 15638  1216  00BC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1
 15639  1217  0021               	movlb	1	; select bank1
 15640  1218  0821               	movf	(_Clock_ForceRender$2392+1)^(0+128),w
 15641  1219  0020               	movlb	0	; select bank0
 15642  121A  00BE               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1
 15643  121B  0021               	movlb	1	; select bank1
 15644  121C  0820               	movf	_Clock_ForceRender$2392^(0+128),w
 15645  121D  0020               	movlb	0	; select bank0
 15646  121E  00BD               	movwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource
 15647  121F  3033               	movlw	51
 15648  1220  00BF               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress
 15649  1221  3000               	movlw	0
 15650  1222  00C0               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1
 15651  1223  300A               	movlw	10
 15652  1224  00C1               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy
 15653  1225  3000               	movlw	0
 15654  1226  00C2               	movwf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1
 15655  1227  319B  23E1  3191   	fcall	_WS2812b_CopyPixelBufferArrayFromSource
 15656                           
 15657                           ;clockLEDs.c: 365:     Clock_FixDigit4LastThreePixels( t->digit4 );
 15658  122A  0020               	movlb	0	; select bank0
 15659  122B  0854               	movf	Clock_ForceRender@t+1,w
 15660  122C  00D6               	movwf	??_Clock_ForceRender+1
 15661  122D  0853               	movf	Clock_ForceRender@t,w
 15662  122E  00D5               	movwf	??_Clock_ForceRender
 15663  122F  3003               	movlw	3
 15664  1230  0755               	addwf	??_Clock_ForceRender,w
 15665  1231  0084               	movwf	4
 15666  1232  0856               	movf	??_Clock_ForceRender+1,w
 15667  1233  1803               	skipnc
 15668  1234  0A56               	incf	??_Clock_ForceRender+1,w
 15669  1235  0085               	movwf	5
 15670  1236  0800               	movf	0,w	;code access
 15671  1237  319D  2587  3191   	fcall	_Clock_FixDigit4LastThreePixels
 15672                           
 15673                           ;clockLEDs.c: 366:     WS2812B_Render( &ledArray );
 15674  123A  3062               	movlw	low _ledArray
 15675  123B  0020               	movlb	0	; select bank0
 15676  123C  00A9               	movwf	WS2812B_Render@strip
 15677  123D  3000               	movlw	high _ledArray
 15678  123E  00AA               	movwf	WS2812B_Render@strip+1
 15679  123F  3190  2031         	fcall	_WS2812B_Render
 15680  1241  0008               	return
 15681  1242                     __end_of_Clock_ForceRender:
 15682                           
 15683                           	psect	text32
 15684  1BE1                     __ptext32:	
 15685 ;; *************** function _WS2812b_CopyPixelBufferArrayFromSource *****************
 15686 ;; Defined at:
 15687 ;;		line 228 in file "ws2812b.c"
 15688 ;; Parameters:    Size  Location     Type
 15689 ;;  strip           2   26[BANK0 ] const PTR const struct .
 15690 ;;		 -> ledArray(4), 
 15691 ;;  pixelSource     2   28[BANK0 ] const PTR struct .
 15692 ;;		 -> downEncodedDigitsPixelValues(420), upEncodedDigitsPixelValues(420), 
 15693 ;;  startAddress    2   30[BANK0 ] const unsigned int 
 15694 ;;  numPixelsToC    2   32[BANK0 ] const unsigned int 
 15695 ;; Auto vars:     Size  Location     Type
 15696 ;;  src             2   42[BANK0 ] PTR unsigned char 
 15697 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues(420), upEnc
      +odedDigitsPixelValues(420), 
 15698 ;;  dest            2   40[BANK0 ] PTR unsigned char 
 15699 ;;		 -> renderBuffer.red(1), renderBuffer(192), 
 15700 ;;  startPixel      2   38[BANK0 ] PTR struct .
 15701 ;;		 -> renderBuffer(192), 
 15702 ;; Return value:  Size  Location     Type
 15703 ;;                  1    wreg      void 
 15704 ;; Registers used:
 15705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15711 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15712 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15713 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15714 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15715 ;;Total ram usage:       18 bytes
 15716 ;; Hardware stack levels used: 1
 15717 ;; Hardware stack levels required when called: 6
 15718 ;; This function calls:
 15719 ;;		___wmul
 15720 ;;		_memcpy
 15721 ;; This function is called by:
 15722 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
 15723 ;;		_Clock_ForceRender
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727  1BE1                     _WS2812b_CopyPixelBufferArrayFromSource:	
 15728                           ;psect for function _WS2812b_CopyPixelBufferArrayFromSource
 15729                           
 15730                           
 15731                           ;ws2812b.c: 228: void WS2812b_CopyPixelBufferArrayFromSource( const ws2812bArray * const
      +                           strip,;ws2812b.c: 229:                                              ws2812bPixel * cons
      +                          t pixelSource,;ws2812b.c: 230:                                              const size_t
      +                           startAddress,;ws2812b.c: 231:                                              const size_t
      +                           numPixelsToCopy );ws2812b.c: 232: {;ws2812b.c: 233:     if( ( ((void*)0) == strip ) ||
 15732                           
 15733                           ;incstack = 0
 15734                           ; Regs used in _WS2812b_CopyPixelBufferArrayFromSource: [wreg+fsr1l+fsr1h+status,2+statu
      +                          s,0+pclath+cstack]
 15735  1BE1  0020               	movlb	0	; select bank0
 15736  1BE2  083B               	movf	WS2812b_CopyPixelBufferArrayFromSource@strip,w
 15737  1BE3  043C               	iorwf	WS2812b_CopyPixelBufferArrayFromSource@strip+1,w
 15738  1BE4  1903               	btfsc	3,2
 15739  1BE5  0008               	return
 15740  1BE6  083D               	movf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource,w
 15741  1BE7  043E               	iorwf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1,w
 15742  1BE8  1903               	btfsc	3,2
 15743  1BE9  0008               	return
 15744  1BEA  0841               	movf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy,w
 15745  1BEB  073F               	addwf	WS2812b_CopyPixelBufferArrayFromSource@startAddress,w
 15746  1BEC  00C3               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource
 15747  1BED  0842               	movf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1,w
 15748  1BEE  3D40               	addwfc	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1,w
 15749  1BEF  00C4               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource+1
 15750  1BF0  083B               	movf	WS2812b_CopyPixelBufferArrayFromSource@strip,w
 15751  1BF1  0086               	movwf	6
 15752  1BF2  083C               	movf	WS2812b_CopyPixelBufferArrayFromSource@strip+1,w
 15753  1BF3  0087               	movwf	7
 15754  1BF4  3142               	addfsr 1,2
 15755  1BF5  3F40               	moviw [0]fsr1
 15756  1BF6  00C5               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource+2
 15757  1BF7  3F41               	moviw [1]fsr1
 15758  1BF8  00C6               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource+3
 15759  1BF9  0844               	movf	??_WS2812b_CopyPixelBufferArrayFromSource+1,w
 15760  1BFA  0246               	subwf	??_WS2812b_CopyPixelBufferArrayFromSource+3,w
 15761  1BFB  1D03               	skipz
 15762  1BFC  2BFF               	goto	u3675
 15763  1BFD  0843               	movf	??_WS2812b_CopyPixelBufferArrayFromSource,w
 15764  1BFE  0245               	subwf	??_WS2812b_CopyPixelBufferArrayFromSource+2,w
 15765  1BFF                     u3675:
 15766  1BFF  1C03               	btfss	3,0
 15767  1C00  0008               	return
 15768                           
 15769                           ;ws2812b.c: 240:     ws2812bPixel * startPixel = &( strip->pixelBuffer[startAddress] );
 15770  1C01  0840               	movf	WS2812b_CopyPixelBufferArrayFromSource@startAddress+1,w
 15771  1C02  00AA               	movwf	___wmul@multiplier+1
 15772  1C03  083F               	movf	WS2812b_CopyPixelBufferArrayFromSource@startAddress,w
 15773  1C04  00A9               	movwf	___wmul@multiplier
 15774  1C05  3003               	movlw	3
 15775  1C06  00AB               	movwf	___wmul@multiplicand
 15776  1C07  3000               	movlw	0
 15777  1C08  00AC               	movwf	___wmul@multiplicand+1
 15778  1C09  31A4  247E  319B   	fcall	___wmul
 15779  1C0C  0020               	movlb	0	; select bank0
 15780  1C0D  083B               	movf	WS2812b_CopyPixelBufferArrayFromSource@strip,w
 15781  1C0E  0086               	movwf	6
 15782  1C0F  083C               	movf	WS2812b_CopyPixelBufferArrayFromSource@strip+1,w
 15783  1C10  0087               	movwf	7
 15784  1C11  3F40               	moviw [0]fsr1
 15785  1C12  00C3               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource
 15786  1C13  3F41               	moviw [1]fsr1
 15787  1C14  00C4               	movwf	??_WS2812b_CopyPixelBufferArrayFromSource+1
 15788  1C15  0829               	movf	?___wmul,w
 15789  1C16  0743               	addwf	??_WS2812b_CopyPixelBufferArrayFromSource,w
 15790  1C17  00C7               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startPixel
 15791  1C18  082A               	movf	?___wmul+1,w
 15792  1C19  3D44               	addwfc	??_WS2812b_CopyPixelBufferArrayFromSource+1,w
 15793  1C1A  00C8               	movwf	WS2812b_CopyPixelBufferArrayFromSource@startPixel+1
 15794                           
 15795                           ;ws2812b.c: 243:     uint8_t * dest = &( startPixel->red );
 15796  1C1B  0848               	movf	WS2812b_CopyPixelBufferArrayFromSource@startPixel+1,w
 15797  1C1C  00CA               	movwf	WS2812b_CopyPixelBufferArrayFromSource@dest+1
 15798  1C1D  0847               	movf	WS2812b_CopyPixelBufferArrayFromSource@startPixel,w
 15799  1C1E  00C9               	movwf	WS2812b_CopyPixelBufferArrayFromSource@dest
 15800                           
 15801                           ;ws2812b.c: 244:     uint8_t * src = &( pixelSource->red );
 15802  1C1F  083E               	movf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource+1,w
 15803  1C20  00CC               	movwf	WS2812b_CopyPixelBufferArrayFromSource@src+1
 15804  1C21  083D               	movf	WS2812b_CopyPixelBufferArrayFromSource@pixelSource,w
 15805  1C22  00CB               	movwf	WS2812b_CopyPixelBufferArrayFromSource@src
 15806                           
 15807                           ;ws2812b.c: 246:     memcpy( dest, src, numPixelsToCopy * 3u );
 15808  1C23  084A               	movf	WS2812b_CopyPixelBufferArrayFromSource@dest+1,w
 15809  1C24  00B0               	movwf	memcpy@d1+1
 15810  1C25  0849               	movf	WS2812b_CopyPixelBufferArrayFromSource@dest,w
 15811  1C26  00AF               	movwf	memcpy@d1
 15812  1C27  084C               	movf	WS2812b_CopyPixelBufferArrayFromSource@src+1,w
 15813  1C28  00B2               	movwf	memcpy@s1+1
 15814  1C29  084B               	movf	WS2812b_CopyPixelBufferArrayFromSource@src,w
 15815  1C2A  00B1               	movwf	memcpy@s1
 15816  1C2B  0842               	movf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy+1,w
 15817  1C2C  00AA               	movwf	___wmul@multiplier+1
 15818  1C2D  0841               	movf	WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy,w
 15819  1C2E  00A9               	movwf	___wmul@multiplier
 15820  1C2F  3003               	movlw	3
 15821  1C30  00AB               	movwf	___wmul@multiplicand
 15822  1C31  3000               	movlw	0
 15823  1C32  00AC               	movwf	___wmul@multiplicand+1
 15824  1C33  31A4  247E  319B   	fcall	___wmul
 15825  1C36  0020               	movlb	0	; select bank0
 15826  1C37  082A               	movf	?___wmul+1,w
 15827  1C38  00B4               	movwf	memcpy@n+1
 15828  1C39  0829               	movf	?___wmul,w
 15829  1C3A  00B3               	movwf	memcpy@n
 15830  1C3B  31A5  2580         	fcall	_memcpy
 15831  1C3D  0008               	return
 15832  1C3E                     __end_of_WS2812b_CopyPixelBufferArrayFromSource:
 15833                           
 15834                           	psect	text33
 15835  1031                     __ptext33:	
 15836 ;; *************** function _WS2812B_Render *****************
 15837 ;; Defined at:
 15838 ;;		line 56 in file "ws2812b.c"
 15839 ;; Parameters:    Size  Location     Type
 15840 ;;  strip           2    8[BANK0 ] const PTR const struct .
 15841 ;;		 -> ledArray(4), 
 15842 ;; Auto vars:     Size  Location     Type
 15843 ;;  j               2   16[BANK0 ] unsigned int 
 15844 ;;  thisPixel       2   14[BANK0 ] PTR struct .
 15845 ;;		 -> renderBuffer(192), 
 15846 ;;  i               2   12[BANK0 ] unsigned int 
 15847 ;; Return value:  Size  Location     Type
 15848 ;;                  1    wreg      void 
 15849 ;; Registers used:
 15850 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15851 ;; Tracked objects:
 15852 ;;		On entry : 0/0
 15853 ;;		On exit  : 0/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15857 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15858 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15859 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15860 ;;Total ram usage:       10 bytes
 15861 ;; Hardware stack levels used: 1
 15862 ;; Hardware stack levels required when called: 5
 15863 ;; This function calls:
 15864 ;;		Nothing
 15865 ;; This function is called by:
 15866 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
 15867 ;;		_Clock_ForceRender
 15868 ;;		_Clock_IterateSinglePixelByIndex
 15869 ;;		_Clock_CrossingRainbowPattern
 15870 ;;		_Clock_CrossingRainbowPatternwithDelays
 15871 ;;		_Clock_Popcorn_Pattern
 15872 ;;		_Clock_Popcorn_Pattern_Hold
 15873 ;; This function uses a non-reentrant model
 15874 ;;
 15875                           
 15876  1031                     _WS2812B_Render:	
 15877                           ;psect for function _WS2812B_Render
 15878                           
 15879                           
 15880                           ;ws2812b.c: 56: void WS2812B_Render( const ws2812bArray * const strip );ws2812b.c: 57: {
      +                          ;ws2812b.c: 58:     if( ( ((void*)0) == strip ) ||
 15881                           
 15882                           ;incstack = 0
 15883                           ; Regs used in _WS2812B_Render: [wreg+fsr1l+fsr1h+status,2+status,0]
 15884  1031  0020               	movlb	0	; select bank0
 15885  1032  0829               	movf	WS2812B_Render@strip,w
 15886  1033  042A               	iorwf	WS2812B_Render@strip+1,w
 15887  1034  1903               	btfsc	3,2
 15888  1035  0008               	return
 15889  1036  0829               	movf	WS2812B_Render@strip,w
 15890  1037  0086               	movwf	6
 15891  1038  082A               	movf	WS2812B_Render@strip+1,w
 15892  1039  0087               	movwf	7
 15893  103A  0016               	moviw fsr1++
 15894  103B  0401               	iorwf	1,w
 15895  103C  1903               	btfsc	3,2
 15896  103D  0008               	return
 15897                           
 15898                           ;ws2812b.c: 65:     (INTCONbits.GIE = 0);
 15899                           
 15900                           ;ws2812b.c: 62:     }
 15901  103E  138B               	bcf	11,7	;volatile
 15902                           
 15903                           ;ws2812b.c: 66:     (INTCONbits.PEIE = 0);
 15904  103F  130B               	bcf	11,6	;volatile
 15905                           
 15906                           ;ws2812b.c: 68:     size_t i;;ws2812b.c: 69:     ws2812bPixel * thisPixel = strip->pixel
      +                          Buffer;
 15907  1040  0829               	movf	WS2812B_Render@strip,w
 15908  1041  0086               	movwf	6
 15909  1042  082A               	movf	WS2812B_Render@strip+1,w
 15910  1043  0087               	movwf	7
 15911  1044  3F40               	moviw [0]fsr1
 15912  1045  00AF               	movwf	WS2812B_Render@thisPixel
 15913  1046  3F41               	moviw [1]fsr1
 15914  1047  00B0               	movwf	WS2812B_Render@thisPixel+1
 15915                           
 15916                           ;ws2812b.c: 70:     for( i = 0; i < strip->numPixels; i++ )
 15917  1048  01AD               	clrf	WS2812B_Render@i
 15918  1049  01AE               	clrf	WS2812B_Render@i+1
 15919  104A                     l4914:
 15920  104A  0829               	movf	WS2812B_Render@strip,w
 15921  104B  0086               	movwf	6
 15922  104C  082A               	movf	WS2812B_Render@strip+1,w
 15923  104D  0087               	movwf	7
 15924  104E  3142               	addfsr 1,2
 15925  104F  3F40               	moviw [0]fsr1
 15926  1050  00AB               	movwf	??_WS2812B_Render
 15927  1051  3F41               	moviw [1]fsr1
 15928  1052  00AC               	movwf	??_WS2812B_Render+1
 15929  1053  082C               	movf	??_WS2812B_Render+1,w
 15930  1054  022E               	subwf	WS2812B_Render@i+1,w
 15931  1055  1D03               	skipz
 15932  1056  2859               	goto	u3645
 15933  1057  082B               	movf	??_WS2812B_Render,w
 15934  1058  022D               	subwf	WS2812B_Render@i,w
 15935  1059                     u3645:
 15936  1059  1803               	btfsc	3,0
 15937  105A  28FC               	goto	l631
 15938                           
 15939                           ;ws2812b.c: 71:     {;ws2812b.c: 72:         size_t j;;ws2812b.c: 73:         for( j = 0
      +                          ; j < 8u; j++ )
 15940  105B  01B1               	clrf	WS2812B_Render@j
 15941  105C  01B2               	clrf	WS2812B_Render@j+1
 15942  105D                     l4888:
 15943                           
 15944                           ;ws2812b.c: 74:         {;ws2812b.c: 75:             if( ( thisPixel->green << j ) & 0x8
      +                          0u )
 15945  105D  082F               	movf	WS2812B_Render@thisPixel,w
 15946  105E  0086               	movwf	6
 15947  105F  0830               	movf	WS2812B_Render@thisPixel+1,w
 15948  1060  0087               	movwf	7
 15949  1061  3141               	addfsr 1,1
 15950  1062  0801               	movf	1,w
 15951  1063  00AB               	movwf	??_WS2812B_Render
 15952  1064  01AC               	clrf	??_WS2812B_Render+1
 15953  1065  0A31               	incf	WS2812B_Render@j,w
 15954  1066  2869               	goto	u3554
 15955  1067                     u3555:
 15956  1067  35AB               	lslf	??_WS2812B_Render,f
 15957  1068  0DAC               	rlf	??_WS2812B_Render+1,f
 15958  1069                     u3554:
 15959  1069  0B89               	decfsz	9,f
 15960  106A  2867               	goto	u3555
 15961  106B  1FAB               	btfss	??_WS2812B_Render,7
 15962  106C  2878               	goto	l602
 15963                           
 15964                           ;ws2812b.c: 76:             {;ws2812b.c: 77:                 do { LATCbits.LATC2 = 1; } 
      +                          while(0); __nop(); __nop(); __nop(); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop
      +                          (); __nop();;
 15965  106D  0022               	movlb	2	; select bank2
 15966  106E  150E               	bsf	14,2	;volatile
 15967  106F  0000               	nop
 15968  1070  0000               	nop
 15969  1071  0000               	nop
 15970  1072  0000               	nop
 15971  1073  0022               	movlb	2	; select bank2
 15972  1074  110E               	bcf	14,2	;volatile
 15973  1075  0000               	nop
 15974  1076  0000               	nop
 15975                           
 15976                           ;ws2812b.c: 78:             }
 15977  1077  2882               	goto	l4890
 15978  1078                     l602:	
 15979                           ;ws2812b.c: 80:             {;ws2812b.c: 81:                 do { LATCbits.LATC2 = 1; } 
      +                          while(0); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop(); __nop(); __nop(); __nop
      +                          (); __nop();;
 15980                           
 15981  1078  0022               	movlb	2	; select bank2
 15982  1079  150E               	bsf	14,2	;volatile
 15983  107A  0000               	nop
 15984  107B  0022               	movlb	2	; select bank2
 15985  107C  110E               	bcf	14,2	;volatile
 15986  107D  0000               	nop
 15987  107E  0000               	nop
 15988  107F  0000               	nop
 15989  1080  0000               	nop
 15990  1081  0000               	nop
 15991  1082                     l4890:
 15992                           
 15993                           ;ws2812b.c: 83:         }
 15994  1082  3001               	movlw	1
 15995  1083  0020               	movlb	0	; select bank0
 15996  1084  07B1               	addwf	WS2812B_Render@j,f
 15997  1085  3000               	movlw	0
 15998  1086  3DB2               	addwfc	WS2812B_Render@j+1,f
 15999  1087  3000               	movlw	0
 16000  1088  0232               	subwf	WS2812B_Render@j+1,w
 16001  1089  3008               	movlw	8
 16002  108A  1903               	skipnz
 16003  108B  0231               	subwf	WS2812B_Render@j,w
 16004  108C  1C03               	skipc
 16005  108D  285D               	goto	l4888
 16006                           
 16007                           ;ws2812b.c: 84:         for( j = 0; j < 8u; j++ )
 16008  108E  01B1               	clrf	WS2812B_Render@j
 16009  108F  01B2               	clrf	WS2812B_Render@j+1
 16010  1090                     l4898:
 16011                           
 16012                           ;ws2812b.c: 85:         {;ws2812b.c: 86:             if( ( thisPixel->red << j ) & 0x80u
      +                           )
 16013  1090  082F               	movf	WS2812B_Render@thisPixel,w
 16014  1091  0086               	movwf	6
 16015  1092  0830               	movf	WS2812B_Render@thisPixel+1,w
 16016  1093  0087               	movwf	7
 16017  1094  0801               	movf	1,w
 16018  1095  00AB               	movwf	??_WS2812B_Render
 16019  1096  01AC               	clrf	??_WS2812B_Render+1
 16020  1097  0A31               	incf	WS2812B_Render@j,w
 16021  1098  289B               	goto	u3584
 16022  1099                     u3585:
 16023  1099  35AB               	lslf	??_WS2812B_Render,f
 16024  109A  0DAC               	rlf	??_WS2812B_Render+1,f
 16025  109B                     u3584:
 16026  109B  0B89               	decfsz	9,f
 16027  109C  2899               	goto	u3585
 16028  109D  1FAB               	btfss	??_WS2812B_Render,7
 16029  109E  28AA               	goto	l614
 16030                           
 16031                           ;ws2812b.c: 87:             {;ws2812b.c: 88:                 do { LATCbits.LATC2 = 1; } 
      +                          while(0); __nop(); __nop(); __nop(); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop
      +                          (); __nop();;
 16032  109F  0022               	movlb	2	; select bank2
 16033  10A0  150E               	bsf	14,2	;volatile
 16034  10A1  0000               	nop
 16035  10A2  0000               	nop
 16036  10A3  0000               	nop
 16037  10A4  0000               	nop
 16038  10A5  0022               	movlb	2	; select bank2
 16039  10A6  110E               	bcf	14,2	;volatile
 16040  10A7  0000               	nop
 16041  10A8  0000               	nop
 16042                           
 16043                           ;ws2812b.c: 89:             }
 16044  10A9  28B4               	goto	l4900
 16045  10AA                     l614:	
 16046                           ;ws2812b.c: 91:             {;ws2812b.c: 92:                 do { LATCbits.LATC2 = 1; } 
      +                          while(0); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop(); __nop(); __nop(); __nop
      +                          (); __nop();;
 16047                           
 16048  10AA  0022               	movlb	2	; select bank2
 16049  10AB  150E               	bsf	14,2	;volatile
 16050  10AC  0000               	nop
 16051  10AD  0022               	movlb	2	; select bank2
 16052  10AE  110E               	bcf	14,2	;volatile
 16053  10AF  0000               	nop
 16054  10B0  0000               	nop
 16055  10B1  0000               	nop
 16056  10B2  0000               	nop
 16057  10B3  0000               	nop
 16058  10B4                     l4900:
 16059                           
 16060                           ;ws2812b.c: 94:         }
 16061  10B4  3001               	movlw	1
 16062  10B5  0020               	movlb	0	; select bank0
 16063  10B6  07B1               	addwf	WS2812B_Render@j,f
 16064  10B7  3000               	movlw	0
 16065  10B8  3DB2               	addwfc	WS2812B_Render@j+1,f
 16066  10B9  3000               	movlw	0
 16067  10BA  0232               	subwf	WS2812B_Render@j+1,w
 16068  10BB  3008               	movlw	8
 16069  10BC  1903               	skipnz
 16070  10BD  0231               	subwf	WS2812B_Render@j,w
 16071  10BE  1C03               	skipc
 16072  10BF  2890               	goto	l4898
 16073                           
 16074                           ;ws2812b.c: 95:         for( j = 0; j < 8u; j++ )
 16075  10C0  01B1               	clrf	WS2812B_Render@j
 16076  10C1  01B2               	clrf	WS2812B_Render@j+1
 16077  10C2                     l4908:
 16078                           
 16079                           ;ws2812b.c: 96:         {;ws2812b.c: 97:             if( ( thisPixel->blue << j ) & 0x80
      +                          u )
 16080  10C2  082F               	movf	WS2812B_Render@thisPixel,w
 16081  10C3  0086               	movwf	6
 16082  10C4  0830               	movf	WS2812B_Render@thisPixel+1,w
 16083  10C5  0087               	movwf	7
 16084  10C6  3142               	addfsr 1,2
 16085  10C7  0801               	movf	1,w
 16086  10C8  00AB               	movwf	??_WS2812B_Render
 16087  10C9  01AC               	clrf	??_WS2812B_Render+1
 16088  10CA  0A31               	incf	WS2812B_Render@j,w
 16089  10CB  28CE               	goto	u3614
 16090  10CC                     u3615:
 16091  10CC  35AB               	lslf	??_WS2812B_Render,f
 16092  10CD  0DAC               	rlf	??_WS2812B_Render+1,f
 16093  10CE                     u3614:
 16094  10CE  0B89               	decfsz	9,f
 16095  10CF  28CC               	goto	u3615
 16096  10D0  1FAB               	btfss	??_WS2812B_Render,7
 16097  10D1  28DD               	goto	l626
 16098                           
 16099                           ;ws2812b.c: 98:             {;ws2812b.c: 99:                 do { LATCbits.LATC2 = 1; } 
      +                          while(0); __nop(); __nop(); __nop(); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop
      +                          (); __nop();;
 16100  10D2  0022               	movlb	2	; select bank2
 16101  10D3  150E               	bsf	14,2	;volatile
 16102  10D4  0000               	nop
 16103  10D5  0000               	nop
 16104  10D6  0000               	nop
 16105  10D7  0000               	nop
 16106  10D8  0022               	movlb	2	; select bank2
 16107  10D9  110E               	bcf	14,2	;volatile
 16108  10DA  0000               	nop
 16109  10DB  0000               	nop
 16110                           
 16111                           ;ws2812b.c: 100:             }
 16112  10DC  28E7               	goto	l4910
 16113  10DD                     l626:	
 16114                           ;ws2812b.c: 102:             {;ws2812b.c: 103:                 do { LATCbits.LATC2 = 1; 
      +                          } while(0); __nop(); do { LATCbits.LATC2 = 0; } while(0); __nop(); __nop(); __nop(); __n
      +                          op(); __nop();;
 16115                           
 16116  10DD  0022               	movlb	2	; select bank2
 16117  10DE  150E               	bsf	14,2	;volatile
 16118  10DF  0000               	nop
 16119  10E0  0022               	movlb	2	; select bank2
 16120  10E1  110E               	bcf	14,2	;volatile
 16121  10E2  0000               	nop
 16122  10E3  0000               	nop
 16123  10E4  0000               	nop
 16124  10E5  0000               	nop
 16125  10E6  0000               	nop
 16126  10E7                     l4910:
 16127                           
 16128                           ;ws2812b.c: 105:         }
 16129  10E7  3001               	movlw	1
 16130  10E8  0020               	movlb	0	; select bank0
 16131  10E9  07B1               	addwf	WS2812B_Render@j,f
 16132  10EA  3000               	movlw	0
 16133  10EB  3DB2               	addwfc	WS2812B_Render@j+1,f
 16134  10EC  3000               	movlw	0
 16135  10ED  0232               	subwf	WS2812B_Render@j+1,w
 16136  10EE  3008               	movlw	8
 16137  10EF  1903               	skipnz
 16138  10F0  0231               	subwf	WS2812B_Render@j,w
 16139  10F1  1C03               	skipc
 16140  10F2  28C2               	goto	l4908
 16141                           
 16142                           ;ws2812b.c: 107:         thisPixel++;
 16143  10F3  3003               	movlw	3
 16144  10F4  07AF               	addwf	WS2812B_Render@thisPixel,f
 16145  10F5  3000               	movlw	0
 16146  10F6  3DB0               	addwfc	WS2812B_Render@thisPixel+1,f
 16147                           
 16148                           ;ws2812b.c: 109:     }
 16149  10F7  3001               	movlw	1
 16150  10F8  07AD               	addwf	WS2812B_Render@i,f
 16151  10F9  3000               	movlw	0
 16152  10FA  3DAE               	addwfc	WS2812B_Render@i+1,f
 16153  10FB  284A               	goto	l4914
 16154  10FC                     l631:	
 16155                           ;ws2812b.c: 112:     do { LATCbits.LATC2 = 1; } while(0); __nop(); __nop(); __nop(); __n
      +                          op(); do { LATCbits.LATC2 = 0; } while(0); __nop(); __nop();;
 16156                           
 16157  10FC  0022               	movlb	2	; select bank2
 16158  10FD  150E               	bsf	14,2	;volatile
 16159  10FE  0000               	nop
 16160  10FF  0000               	nop
 16161  1100  0000               	nop
 16162  1101  0000               	nop
 16163  1102  0022               	movlb	2	; select bank2
 16164  1103  110E               	bcf	14,2	;volatile
 16165  1104  0000               	nop
 16166  1105  0000               	nop
 16167                           
 16168                           ;ws2812b.c: 113:     do { LATCbits.LATC2 = 1; } while(0); __nop(); do { LATCbits.LATC2 =
      +                           0; } while(0); __nop(); __nop(); __nop(); __nop(); __nop();;
 16169  1106  0022               	movlb	2	; select bank2
 16170  1107  150E               	bsf	14,2	;volatile
 16171  1108  0000               	nop
 16172  1109  0022               	movlb	2	; select bank2
 16173  110A  110E               	bcf	14,2	;volatile
 16174  110B  0000               	nop
 16175  110C  0000               	nop
 16176  110D  0000               	nop
 16177  110E  0000               	nop
 16178  110F  0000               	nop
 16179                           
 16180                           ;ws2812b.c: 114:     _delay((unsigned long)((50)*(32000000u/4000000.0)));
 16181  1110  3085               	movlw	133
 16182  1111                     u4977:
 16183  1111  0B89               	decfsz	9,f
 16184  1112  2911               	goto	u4977
 16185  1113  0000               	nop
 16186  1114  0022               	movlb	2	; select bank2
 16187  1115  150E               	bsf	14,2	;volatile
 16188  1116  0000               	nop
 16189  1117  0000               	nop
 16190  1118  0000               	nop
 16191  1119  0000               	nop
 16192  111A  0022               	movlb	2	; select bank2
 16193  111B  110E               	bcf	14,2	;volatile
 16194  111C  0000               	nop
 16195  111D  0000               	nop
 16196                           
 16197                           ;ws2812b.c: 117:     (INTCONbits.GIE = 1);
 16198  111E  178B               	bsf	11,7	;volatile
 16199                           
 16200                           ;ws2812b.c: 118:     (INTCONbits.PEIE = 1);
 16201  111F  170B               	bsf	11,6	;volatile
 16202  1120  0008               	return
 16203  1121                     __end_of_WS2812B_Render:
 16204                           
 16205                           	psect	text34
 16206  1D87                     __ptext34:	
 16207 ;; *************** function _Clock_FixDigit4LastThreePixels *****************
 16208 ;; Defined at:
 16209 ;;		line 290 in file "clockLEDs.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;  digit4Value     1    wreg     const unsigned char 
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;  digit4Value     1   49[BANK0 ] const unsigned char 
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  1    wreg      void 
 16216 ;; Registers used:
 16217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16225 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16226 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16227 ;;Total ram usage:        4 bytes
 16228 ;; Hardware stack levels used: 1
 16229 ;; Hardware stack levels required when called: 7
 16230 ;; This function calls:
 16231 ;;		_WS2812b_SetPixelBlockConstantColor
 16232 ;;		_WS2812b_SetSinglePixelColor
 16233 ;; This function is called by:
 16234 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
 16235 ;;		_Clock_ForceRender
 16236 ;; This function uses a non-reentrant model
 16237 ;;
 16238                           
 16239  1D87                     _Clock_FixDigit4LastThreePixels:	
 16240                           ;psect for function _Clock_FixDigit4LastThreePixels
 16241                           
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _Clock_FixDigit4LastThreePixels: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16245                           ;Clock_FixDigit4LastThreePixels@digit4Value stored from wreg
 16246  1D87  0020               	movlb	0	; select bank0
 16247  1D88  00D2               	movwf	Clock_FixDigit4LastThreePixels@digit4Value
 16248                           
 16249                           ;clockLEDs.c: 290: static void Clock_FixDigit4LastThreePixels( const uint8_t digit4Value
      +                           );clockLEDs.c: 291: {;clockLEDs.c: 293:     WS2812b_SetPixelBlockConstantColor( &ledArr
      +                          ay,
 16250  1D89  3062               	movlw	low _ledArray
 16251  1D8A  00BB               	movwf	WS2812b_SetPixelBlockConstantColor@strip
 16252  1D8B  3000               	movlw	high _ledArray
 16253  1D8C  00BC               	movwf	WS2812b_SetPixelBlockConstantColor@strip+1
 16254  1D8D  303D               	movlw	61
 16255  1D8E  00BD               	movwf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset
 16256  1D8F  3000               	movlw	0
 16257  1D90  00BE               	movwf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset+1
 16258  1D91  3003               	movlw	3
 16259  1D92  00BF               	movwf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet
 16260  1D93  3000               	movlw	0
 16261  1D94  00C0               	movwf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet+1
 16262  1D95  0021               	movlb	1	; select bank1
 16263  1D96  0848               	movf	_currentBACKGROUNDrgbArray^(0+128),w
 16264  1D97  0020               	movlb	0	; select bank0
 16265  1D98  00CF               	movwf	??_Clock_FixDigit4LastThreePixels
 16266  1D99  084F               	movf	??_Clock_FixDigit4LastThreePixels,w
 16267  1D9A  00C1               	movwf	WS2812b_SetPixelBlockConstantColor@red
 16268  1D9B  0021               	movlb	1	; select bank1
 16269  1D9C  0849               	movf	(_currentBACKGROUNDrgbArray^(0+128)+1),w
 16270  1D9D  0020               	movlb	0	; select bank0
 16271  1D9E  00D0               	movwf	??_Clock_FixDigit4LastThreePixels+1
 16272  1D9F  0850               	movf	??_Clock_FixDigit4LastThreePixels+1,w
 16273  1DA0  00C2               	movwf	WS2812b_SetPixelBlockConstantColor@green
 16274  1DA1  0021               	movlb	1	; select bank1
 16275  1DA2  084A               	movf	(_currentBACKGROUNDrgbArray^(0+128)+2),w
 16276  1DA3  0020               	movlb	0	; select bank0
 16277  1DA4  00D1               	movwf	??_Clock_FixDigit4LastThreePixels+2
 16278  1DA5  0851               	movf	??_Clock_FixDigit4LastThreePixels+2,w
 16279  1DA6  00C3               	movwf	WS2812b_SetPixelBlockConstantColor@blue
 16280  1DA7  3188  2003  319D   	fcall	_WS2812b_SetPixelBlockConstantColor
 16281                           
 16282                           ;clockLEDs.c: 301:     if( ( 0u == digit4Value ) ||
 16283  1DAA  0020               	movlb	0	; select bank0
 16284  1DAB  0852               	movf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16285  1DAC  1903               	btfsc	3,2
 16286  1DAD  2DB9               	goto	l4964
 16287  1DAE  0352               	decf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16288  1DAF  1903               	btfsc	3,2
 16289  1DB0  2DB9               	goto	l4964
 16290  1DB1  3003               	movlw	3
 16291  1DB2  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16292  1DB3  1903               	btfsc	3,2
 16293  1DB4  2DB9               	goto	l4964
 16294  1DB5  3008               	movlw	8
 16295  1DB6  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16296  1DB7  1D03               	btfss	3,2
 16297  1DB8  2DF4               	goto	l4966
 16298  1DB9                     l4964:
 16299                           
 16300                           ;clockLEDs.c: 305:     {;clockLEDs.c: 306:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 16301  1DB9  3062               	movlw	low _ledArray
 16302  1DBA  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 16303  1DBB  3000               	movlw	high _ledArray
 16304  1DBC  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 16305  1DBD  303D               	movlw	61
 16306  1DBE  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 16307  1DBF  3000               	movlw	0
 16308  1DC0  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 16309  1DC1  0021               	movlb	1	; select bank1
 16310  1DC2  084B               	movf	_currentDIGITrgbArray^(0+128),w
 16311  1DC3  0020               	movlb	0	; select bank0
 16312  1DC4  00CF               	movwf	??_Clock_FixDigit4LastThreePixels
 16313  1DC5  084F               	movf	??_Clock_FixDigit4LastThreePixels,w
 16314  1DC6  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 16315  1DC7  0021               	movlb	1	; select bank1
 16316  1DC8  084C               	movf	(_currentDIGITrgbArray^(0+128)+1),w
 16317  1DC9  0020               	movlb	0	; select bank0
 16318  1DCA  00D0               	movwf	??_Clock_FixDigit4LastThreePixels+1
 16319  1DCB  0850               	movf	??_Clock_FixDigit4LastThreePixels+1,w
 16320  1DCC  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 16321  1DCD  0021               	movlb	1	; select bank1
 16322  1DCE  084D               	movf	(_currentDIGITrgbArray^(0+128)+2),w
 16323  1DCF  0020               	movlb	0	; select bank0
 16324  1DD0  00D1               	movwf	??_Clock_FixDigit4LastThreePixels+2
 16325  1DD1  0851               	movf	??_Clock_FixDigit4LastThreePixels+2,w
 16326  1DD2  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 16327  1DD3  319B  2386  319D   	fcall	_WS2812b_SetSinglePixelColor
 16328                           
 16329                           ;clockLEDs.c: 311:         WS2812b_SetSinglePixelColor( &ledArray,
 16330  1DD6  3062               	movlw	low _ledArray
 16331  1DD7  0020               	movlb	0	; select bank0
 16332  1DD8  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 16333  1DD9  3000               	movlw	high _ledArray
 16334  1DDA  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 16335  1DDB  303F               	movlw	63
 16336  1DDC  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 16337  1DDD  3000               	movlw	0
 16338  1DDE  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 16339  1DDF  0021               	movlb	1	; select bank1
 16340  1DE0  084B               	movf	_currentDIGITrgbArray^(0+128),w
 16341  1DE1  0020               	movlb	0	; select bank0
 16342  1DE2  00CF               	movwf	??_Clock_FixDigit4LastThreePixels
 16343  1DE3  084F               	movf	??_Clock_FixDigit4LastThreePixels,w
 16344  1DE4  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 16345  1DE5  0021               	movlb	1	; select bank1
 16346  1DE6  084C               	movf	(_currentDIGITrgbArray^(0+128)+1),w
 16347  1DE7  0020               	movlb	0	; select bank0
 16348  1DE8  00D0               	movwf	??_Clock_FixDigit4LastThreePixels+1
 16349  1DE9  0850               	movf	??_Clock_FixDigit4LastThreePixels+1,w
 16350  1DEA  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 16351  1DEB  0021               	movlb	1	; select bank1
 16352  1DEC  084D               	movf	(_currentDIGITrgbArray^(0+128)+2),w
 16353  1DED  0020               	movlb	0	; select bank0
 16354  1DEE  00D1               	movwf	??_Clock_FixDigit4LastThreePixels+2
 16355  1DEF  0851               	movf	??_Clock_FixDigit4LastThreePixels+2,w
 16356  1DF0  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 16357  1DF1  319B  2386         	fcall	_WS2812b_SetSinglePixelColor
 16358                           
 16359                           ;clockLEDs.c: 316:     }
 16360  1DF3  0008               	return
 16361  1DF4                     l4966:
 16362  1DF4  3002               	movlw	2
 16363  1DF5  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16364  1DF6  1903               	btfsc	3,2
 16365  1DF7  2E04               	goto	l4974
 16366  1DF8  3007               	movlw	7
 16367  1DF9  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16368  1DFA  1903               	btfsc	3,2
 16369  1DFB  2E04               	goto	l4974
 16370  1DFC  3009               	movlw	9
 16371  1DFD  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16372  1DFE  1903               	btfsc	3,2
 16373  1DFF  2E04               	goto	l4974
 16374  1E00  3004               	movlw	4
 16375  1E01  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16376  1E02  1D03               	btfss	3,2
 16377  1E03  2E21               	goto	l4976
 16378  1E04                     l4974:
 16379                           
 16380                           ;clockLEDs.c: 322:     {;clockLEDs.c: 323:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 16381  1E04  3062               	movlw	low _ledArray
 16382  1E05  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 16383  1E06  3000               	movlw	high _ledArray
 16384  1E07  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 16385  1E08  303F               	movlw	63
 16386  1E09  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 16387  1E0A  3000               	movlw	0
 16388  1E0B  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 16389  1E0C  0021               	movlb	1	; select bank1
 16390  1E0D  084B               	movf	_currentDIGITrgbArray^(0+128),w
 16391  1E0E  0020               	movlb	0	; select bank0
 16392  1E0F  00CF               	movwf	??_Clock_FixDigit4LastThreePixels
 16393  1E10  084F               	movf	??_Clock_FixDigit4LastThreePixels,w
 16394  1E11  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 16395  1E12  0021               	movlb	1	; select bank1
 16396  1E13  084C               	movf	(_currentDIGITrgbArray^(0+128)+1),w
 16397  1E14  0020               	movlb	0	; select bank0
 16398  1E15  00D0               	movwf	??_Clock_FixDigit4LastThreePixels+1
 16399  1E16  0850               	movf	??_Clock_FixDigit4LastThreePixels+1,w
 16400  1E17  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 16401  1E18  0021               	movlb	1	; select bank1
 16402  1E19  084D               	movf	(_currentDIGITrgbArray^(0+128)+2),w
 16403  1E1A  0020               	movlb	0	; select bank0
 16404  1E1B  00D1               	movwf	??_Clock_FixDigit4LastThreePixels+2
 16405  1E1C  0851               	movf	??_Clock_FixDigit4LastThreePixels+2,w
 16406  1E1D  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 16407  1E1E  319B  2386         	fcall	_WS2812b_SetSinglePixelColor
 16408                           
 16409                           ;clockLEDs.c: 328:     }
 16410  1E20  0008               	return
 16411  1E21                     l4976:
 16412  1E21  3005               	movlw	5
 16413  1E22  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16414  1E23  1903               	btfsc	3,2
 16415  1E24  2E29               	goto	l4980
 16416  1E25  3006               	movlw	6
 16417  1E26  0652               	xorwf	Clock_FixDigit4LastThreePixels@digit4Value,w
 16418  1E27  1D03               	btfss	3,2
 16419  1E28  0008               	return
 16420  1E29                     l4980:
 16421                           
 16422                           ;clockLEDs.c: 332:     {;clockLEDs.c: 333:         WS2812b_SetSinglePixelColor( &ledArra
      +                          y,
 16423  1E29  3062               	movlw	low _ledArray
 16424  1E2A  00C2               	movwf	WS2812b_SetSinglePixelColor@strip
 16425  1E2B  3000               	movlw	high _ledArray
 16426  1E2C  00C3               	movwf	WS2812b_SetSinglePixelColor@strip+1
 16427  1E2D  303D               	movlw	61
 16428  1E2E  00C4               	movwf	WS2812b_SetSinglePixelColor@pixelIndex
 16429  1E2F  3000               	movlw	0
 16430  1E30  00C5               	movwf	WS2812b_SetSinglePixelColor@pixelIndex+1
 16431  1E31  0021               	movlb	1	; select bank1
 16432  1E32  084B               	movf	_currentDIGITrgbArray^(0+128),w
 16433  1E33  0020               	movlb	0	; select bank0
 16434  1E34  00CF               	movwf	??_Clock_FixDigit4LastThreePixels
 16435  1E35  084F               	movf	??_Clock_FixDigit4LastThreePixels,w
 16436  1E36  00C6               	movwf	WS2812b_SetSinglePixelColor@red
 16437  1E37  0021               	movlb	1	; select bank1
 16438  1E38  084C               	movf	(_currentDIGITrgbArray^(0+128)+1),w
 16439  1E39  0020               	movlb	0	; select bank0
 16440  1E3A  00D0               	movwf	??_Clock_FixDigit4LastThreePixels+1
 16441  1E3B  0850               	movf	??_Clock_FixDigit4LastThreePixels+1,w
 16442  1E3C  00C7               	movwf	WS2812b_SetSinglePixelColor@green
 16443  1E3D  0021               	movlb	1	; select bank1
 16444  1E3E  084D               	movf	(_currentDIGITrgbArray^(0+128)+2),w
 16445  1E3F  0020               	movlb	0	; select bank0
 16446  1E40  00D1               	movwf	??_Clock_FixDigit4LastThreePixels+2
 16447  1E41  0851               	movf	??_Clock_FixDigit4LastThreePixels+2,w
 16448  1E42  00C8               	movwf	WS2812b_SetSinglePixelColor@blue
 16449  1E43  319B  2386         	fcall	_WS2812b_SetSinglePixelColor
 16450                           
 16451                           ;clockLEDs.c: 338:     }
 16452  1E45  0008               	return
 16453  1E46                     __end_of_Clock_FixDigit4LastThreePixels:
 16454                           
 16455                           	psect	text35
 16456  1B86                     __ptext35:	
 16457 ;; *************** function _WS2812b_SetSinglePixelColor *****************
 16458 ;; Defined at:
 16459 ;;		line 129 in file "ws2812b.c"
 16460 ;; Parameters:    Size  Location     Type
 16461 ;;  strip           2   33[BANK0 ] const PTR struct .
 16462 ;;		 -> ledArray(4), 
 16463 ;;  pixelIndex      2   35[BANK0 ] const unsigned int 
 16464 ;;  red             1   37[BANK0 ] const unsigned char 
 16465 ;;  green           1   38[BANK0 ] const unsigned char 
 16466 ;;  blue            1   39[BANK0 ] const unsigned char 
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;  thisPixel       2   42[BANK0 ] PTR struct .
 16469 ;;		 -> renderBuffer(192), 
 16470 ;; Return value:  Size  Location     Type
 16471 ;;                  1    wreg      void 
 16472 ;; Registers used:
 16473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16474 ;; Tracked objects:
 16475 ;;		On entry : 0/0
 16476 ;;		On exit  : 0/0
 16477 ;;		Unchanged: 0/0
 16478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16479 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16482 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16483 ;;Total ram usage:       11 bytes
 16484 ;; Hardware stack levels used: 1
 16485 ;; Hardware stack levels required when called: 6
 16486 ;; This function calls:
 16487 ;;		___wmul
 16488 ;; This function is called by:
 16489 ;;		_Clock_FixDigit4LastThreePixels
 16490 ;;		_Clock_IterateSinglePixelByIndex
 16491 ;;		_Clock_CrossingRainbowPattern
 16492 ;;		_Clock_CrossingRainbowPatternwithDelays
 16493 ;;		_Clock_Popcorn_Pattern
 16494 ;;		_Clock_Popcorn_Pattern_Hold
 16495 ;; This function uses a non-reentrant model
 16496 ;;
 16497                           
 16498  1B86                     _WS2812b_SetSinglePixelColor:	
 16499                           ;psect for function _WS2812b_SetSinglePixelColor
 16500                           
 16501                           
 16502                           ;ws2812b.c: 129: void WS2812b_SetSinglePixelColor( ws2812bArray * const strip,;ws2812b.c
      +                          : 130:                                   const size_t pixelIndex,;ws2812b.c: 131:       
      +                                                      const uint8_t red,;ws2812b.c: 132:                          
      +                                   const uint8_t green,;ws2812b.c: 133:                                   const ui
      +                          nt8_t blue );ws2812b.c: 134: {;ws2812b.c: 135:     if( ( ((void*)0) == strip ) ||
 16503                           
 16504                           ;incstack = 0
 16505                           ; Regs used in _WS2812b_SetSinglePixelColor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16506  1B86  0020               	movlb	0	; select bank0
 16507  1B87  0842               	movf	WS2812b_SetSinglePixelColor@strip,w
 16508  1B88  0443               	iorwf	WS2812b_SetSinglePixelColor@strip+1,w
 16509  1B89  1903               	btfsc	3,2
 16510  1B8A  0008               	return
 16511  1B8B  0842               	movf	WS2812b_SetSinglePixelColor@strip,w
 16512  1B8C  0086               	movwf	6
 16513  1B8D  0843               	movf	WS2812b_SetSinglePixelColor@strip+1,w
 16514  1B8E  0087               	movwf	7
 16515  1B8F  0016               	moviw fsr1++
 16516  1B90  0401               	iorwf	1,w
 16517  1B91  1903               	btfsc	3,2
 16518  1B92  0008               	return
 16519  1B93  0842               	movf	WS2812b_SetSinglePixelColor@strip,w
 16520  1B94  0086               	movwf	6
 16521  1B95  0843               	movf	WS2812b_SetSinglePixelColor@strip+1,w
 16522  1B96  0087               	movwf	7
 16523  1B97  3142               	addfsr 1,2
 16524  1B98  3F40               	moviw [0]fsr1
 16525  1B99  00C9               	movwf	??_WS2812b_SetSinglePixelColor
 16526  1B9A  3F41               	moviw [1]fsr1
 16527  1B9B  00CA               	movwf	??_WS2812b_SetSinglePixelColor+1
 16528  1B9C  0845               	movf	WS2812b_SetSinglePixelColor@pixelIndex+1,w
 16529  1B9D  024A               	subwf	??_WS2812b_SetSinglePixelColor+1,w
 16530  1B9E  1D03               	skipz
 16531  1B9F  2BA2               	goto	u3465
 16532  1BA0  0844               	movf	WS2812b_SetSinglePixelColor@pixelIndex,w
 16533  1BA1  0249               	subwf	??_WS2812b_SetSinglePixelColor,w
 16534  1BA2                     u3465:
 16535  1BA2  1C03               	btfss	3,0
 16536  1BA3  0008               	return
 16537                           
 16538                           ;ws2812b.c: 142:     ws2812bPixel * thisPixel = &( strip->pixelBuffer[pixelIndex] );
 16539  1BA4  0845               	movf	WS2812b_SetSinglePixelColor@pixelIndex+1,w
 16540  1BA5  00AA               	movwf	___wmul@multiplier+1
 16541  1BA6  0844               	movf	WS2812b_SetSinglePixelColor@pixelIndex,w
 16542  1BA7  00A9               	movwf	___wmul@multiplier
 16543  1BA8  3003               	movlw	3
 16544  1BA9  00AB               	movwf	___wmul@multiplicand
 16545  1BAA  3000               	movlw	0
 16546  1BAB  00AC               	movwf	___wmul@multiplicand+1
 16547  1BAC  31A4  247E  319B   	fcall	___wmul
 16548  1BAF  0020               	movlb	0	; select bank0
 16549  1BB0  0842               	movf	WS2812b_SetSinglePixelColor@strip,w
 16550  1BB1  0086               	movwf	6
 16551  1BB2  0843               	movf	WS2812b_SetSinglePixelColor@strip+1,w
 16552  1BB3  0087               	movwf	7
 16553  1BB4  3F40               	moviw [0]fsr1
 16554  1BB5  00C9               	movwf	??_WS2812b_SetSinglePixelColor
 16555  1BB6  3F41               	moviw [1]fsr1
 16556  1BB7  00CA               	movwf	??_WS2812b_SetSinglePixelColor+1
 16557  1BB8  0829               	movf	?___wmul,w
 16558  1BB9  0749               	addwf	??_WS2812b_SetSinglePixelColor,w
 16559  1BBA  00CB               	movwf	WS2812b_SetSinglePixelColor@thisPixel
 16560  1BBB  082A               	movf	?___wmul+1,w
 16561  1BBC  3D4A               	addwfc	??_WS2812b_SetSinglePixelColor+1,w
 16562  1BBD  00CC               	movwf	WS2812b_SetSinglePixelColor@thisPixel+1
 16563                           
 16564                           ;ws2812b.c: 144:     if( ((void*)0) == thisPixel )
 16565  1BBE  084B               	movf	WS2812b_SetSinglePixelColor@thisPixel,w
 16566  1BBF  044C               	iorwf	WS2812b_SetSinglePixelColor@thisPixel+1,w
 16567  1BC0  1903               	btfsc	3,2
 16568  1BC1  0008               	return
 16569                           
 16570                           ;ws2812b.c: 149:     thisPixel->red = red;
 16571  1BC2  084B               	movf	WS2812b_SetSinglePixelColor@thisPixel,w
 16572  1BC3  0086               	movwf	6
 16573  1BC4  084C               	movf	WS2812b_SetSinglePixelColor@thisPixel+1,w
 16574  1BC5  0087               	movwf	7
 16575  1BC6  0846               	movf	WS2812b_SetSinglePixelColor@red,w
 16576  1BC7  0081               	movwf	1
 16577                           
 16578                           ;ws2812b.c: 150:     thisPixel->green = green;
 16579  1BC8  084B               	movf	WS2812b_SetSinglePixelColor@thisPixel,w
 16580  1BC9  3E01               	addlw	1
 16581  1BCA  00C9               	movwf	??_WS2812b_SetSinglePixelColor
 16582  1BCB  3000               	movlw	0
 16583  1BCC  3D4C               	addwfc	WS2812b_SetSinglePixelColor@thisPixel+1,w
 16584  1BCD  00CA               	movwf	??_WS2812b_SetSinglePixelColor+1
 16585  1BCE  0849               	movf	??_WS2812b_SetSinglePixelColor,w
 16586  1BCF  0086               	movwf	6
 16587  1BD0  084A               	movf	??_WS2812b_SetSinglePixelColor+1,w
 16588  1BD1  0087               	movwf	7
 16589  1BD2  0847               	movf	WS2812b_SetSinglePixelColor@green,w
 16590  1BD3  0081               	movwf	1
 16591                           
 16592                           ;ws2812b.c: 151:     thisPixel->blue = blue;
 16593  1BD4  084B               	movf	WS2812b_SetSinglePixelColor@thisPixel,w
 16594  1BD5  3E02               	addlw	2
 16595  1BD6  00C9               	movwf	??_WS2812b_SetSinglePixelColor
 16596  1BD7  3000               	movlw	0
 16597  1BD8  3D4C               	addwfc	WS2812b_SetSinglePixelColor@thisPixel+1,w
 16598  1BD9  00CA               	movwf	??_WS2812b_SetSinglePixelColor+1
 16599  1BDA  0849               	movf	??_WS2812b_SetSinglePixelColor,w
 16600  1BDB  0086               	movwf	6
 16601  1BDC  084A               	movf	??_WS2812b_SetSinglePixelColor+1,w
 16602  1BDD  0087               	movwf	7
 16603  1BDE  0848               	movf	WS2812b_SetSinglePixelColor@blue,w
 16604  1BDF  0081               	movwf	1
 16605  1BE0  0008               	return
 16606  1BE1                     __end_of_WS2812b_SetSinglePixelColor:
 16607                           
 16608                           	psect	text36
 16609  23B0                     __ptext36:	
 16610 ;; *************** function _RotaryEncoder_GetSwitchState *****************
 16611 ;; Defined at:
 16612 ;;		line 83 in file "rotaryEncoder.c"
 16613 ;; Parameters:    Size  Location     Type
 16614 ;;		None
 16615 ;; Auto vars:     Size  Location     Type
 16616 ;;  currentState    1    9[BANK0 ] enum E186
 16617 ;; Return value:  Size  Location     Type
 16618 ;;                  1    wreg      enum E186
 16619 ;; Registers used:
 16620 ;;		wreg, fsr1l, fsr1h, status,2
 16621 ;; Tracked objects:
 16622 ;;		On entry : 0/0
 16623 ;;		On exit  : 0/0
 16624 ;;		Unchanged: 0/0
 16625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16630 ;;Total ram usage:        2 bytes
 16631 ;; Hardware stack levels used: 1
 16632 ;; Hardware stack levels required when called: 5
 16633 ;; This function calls:
 16634 ;;		Nothing
 16635 ;; This function is called by:
 16636 ;;		_APP_TASKS
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640  23B0                     _RotaryEncoder_GetSwitchState:	
 16641                           ;psect for function _RotaryEncoder_GetSwitchState
 16642                           
 16643                           
 16644                           ;rotaryEncoder.c: 85:     RotarySwitchState currentState = rot->rotBtn.currentState;
 16645                           
 16646                           ;incstack = 0
 16647                           ; Regs used in _RotaryEncoder_GetSwitchState: [wreg+fsr1l+fsr1h+status,2]
 16648  23B0  0020               	movlb	0	; select bank0
 16649  23B1  0861               	movf	_rot,w
 16650  23B2  0086               	movwf	6
 16651  23B3  3001               	movlw	1	; select bank2/3
 16652  23B4  0087               	movwf	7
 16653  23B5  0801               	movf	1,w
 16654  23B6  00A9               	movwf	??_RotaryEncoder_GetSwitchState
 16655  23B7  0829               	movf	??_RotaryEncoder_GetSwitchState,w
 16656  23B8  00AA               	movwf	RotaryEncoder_GetSwitchState@currentState
 16657                           
 16658                           ;rotaryEncoder.c: 86:     rot->rotBtn.currentState = SWITCH_RESTING;
 16659  23B9  0861               	movf	_rot,w
 16660  23BA  0086               	movwf	6
 16661  23BB  3001               	movlw	1	; select bank2/3
 16662  23BC  0087               	movwf	7
 16663  23BD  0181               	clrf	1
 16664                           
 16665                           ;rotaryEncoder.c: 88:     return currentState;
 16666  23BE  082A               	movf	RotaryEncoder_GetSwitchState@currentState,w
 16667  23BF  0008               	return
 16668  23C0                     __end_of_RotaryEncoder_GetSwitchState:
 16669                           
 16670                           	psect	text37
 16671  1E46                     __ptext37:	
 16672 ;; *************** function _APP_Initialize *****************
 16673 ;; Defined at:
 16674 ;;		line 37 in file "app.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;		None
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;  eepromReadba    8    8[BANK1 ] unsigned char [8]
 16679 ;;  maxRetries      2    6[BANK1 ] unsigned int 
 16680 ;;  wasReadbackV    1    0        _Bool 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;                  1    wreg      void 
 16683 ;; Registers used:
 16684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16691 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16692 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16693 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16694 ;;Total ram usage:       16 bytes
 16695 ;; Hardware stack levels used: 1
 16696 ;; Hardware stack levels required when called: 9
 16697 ;; This function calls:
 16698 ;;		_CRC16_Calculate16bitCRC
 16699 ;;		_Clock_InitializeClockLEDs
 16700 ;;		_Clock_PrerenderPixelAndBackgroundValues
 16701 ;;		_DATAEE_ReadByte
 16702 ;;		_RotaryEncoder_Enable
 16703 ;;		_RotaryEncoder_Init
 16704 ;;		_State_SetFunctionLookupTable
 16705 ;;		_TMR1_SetInterruptHandler
 16706 ;;		_TMR1_StartTimer
 16707 ;;		_Time_EnableTimeModule
 16708 ;;		_Time_InitializeTimeModule
 16709 ;; This function is called by:
 16710 ;;		_main
 16711 ;; This function uses a non-reentrant model
 16712 ;;
 16713                           
 16714  1E46                     _APP_Initialize:	
 16715                           ;psect for function _APP_Initialize
 16716                           
 16717                           
 16718                           ;app.c: 40:     uint8_t eepromReadbackData[8u];;app.c: 41:     _Bool wasReadbackValid;;a
      +                          pp.c: 42:     size_t maxRetries = 3;
 16719                           
 16720                           ;incstack = 0
 16721                           ; Regs used in _APP_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16722  1E46  3003               	movlw	3
 16723  1E47  0021               	movlb	1	; select bank1
 16724  1E48  00A6               	movwf	APP_Initialize@maxRetries^(0+128)
 16725  1E49  3000               	movlw	0
 16726  1E4A  00A7               	movwf	(APP_Initialize@maxRetries^(0+128)+1)
 16727  1E4B                     l6082:	
 16728                           ;app.c: 43:     while( maxRetries )
 16729                           
 16730                           
 16731                           ;app.c: 43:     while( maxRetries )
 16732  1E4B  0826               	movf	APP_Initialize@maxRetries^(0+128),w
 16733  1E4C  0427               	iorwf	(APP_Initialize@maxRetries+1)^(0+128),w
 16734  1E4D  1903               	btfsc	3,2
 16735  1E4E  2ECA               	goto	l6086
 16736                           
 16737                           ;app.c: 44:     {;app.c: 45:         eepromReadbackData[0] = DATAEE_ReadByte( 0x7000u );
 16738  1E4F  3000               	movlw	0
 16739  1E50  0020               	movlb	0	; select bank0
 16740  1E51  00A9               	movwf	DATAEE_ReadByte@bAdd
 16741  1E52  3070               	movlw	112
 16742  1E53  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16743  1E54  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16744  1E57  0021               	movlb	1	; select bank1
 16745  1E58  00A0               	movwf	??_APP_Initialize^(0+128)
 16746  1E59  0820               	movf	??_APP_Initialize^(0+128),w
 16747  1E5A  00A8               	movwf	APP_Initialize@eepromReadbackData^(0+128)
 16748                           
 16749                           ;app.c: 46:         eepromReadbackData[1] = DATAEE_ReadByte( 0x7001u );
 16750  1E5B  3001               	movlw	1
 16751  1E5C  0020               	movlb	0	; select bank0
 16752  1E5D  00A9               	movwf	DATAEE_ReadByte@bAdd
 16753  1E5E  3070               	movlw	112
 16754  1E5F  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16755  1E60  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16756  1E63  0021               	movlb	1	; select bank1
 16757  1E64  00A0               	movwf	??_APP_Initialize^(0+128)
 16758  1E65  0820               	movf	??_APP_Initialize^(0+128),w
 16759  1E66  00A9               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+1)
 16760                           
 16761                           ;app.c: 47:         eepromReadbackData[2] = DATAEE_ReadByte( 0x7002u );
 16762  1E67  3002               	movlw	2
 16763  1E68  0020               	movlb	0	; select bank0
 16764  1E69  00A9               	movwf	DATAEE_ReadByte@bAdd
 16765  1E6A  3070               	movlw	112
 16766  1E6B  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16767  1E6C  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16768  1E6F  0021               	movlb	1	; select bank1
 16769  1E70  00A0               	movwf	??_APP_Initialize^(0+128)
 16770  1E71  0820               	movf	??_APP_Initialize^(0+128),w
 16771  1E72  00AA               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+2)
 16772                           
 16773                           ;app.c: 48:         eepromReadbackData[3] = DATAEE_ReadByte( 0x7003u );
 16774  1E73  3003               	movlw	3
 16775  1E74  0020               	movlb	0	; select bank0
 16776  1E75  00A9               	movwf	DATAEE_ReadByte@bAdd
 16777  1E76  3070               	movlw	112
 16778  1E77  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16779  1E78  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16780  1E7B  0021               	movlb	1	; select bank1
 16781  1E7C  00A0               	movwf	??_APP_Initialize^(0+128)
 16782  1E7D  0820               	movf	??_APP_Initialize^(0+128),w
 16783  1E7E  00AB               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+3)
 16784                           
 16785                           ;app.c: 49:         eepromReadbackData[4] = DATAEE_ReadByte( 0x7004u );
 16786  1E7F  3004               	movlw	4
 16787  1E80  0020               	movlb	0	; select bank0
 16788  1E81  00A9               	movwf	DATAEE_ReadByte@bAdd
 16789  1E82  3070               	movlw	112
 16790  1E83  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16791  1E84  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16792  1E87  0021               	movlb	1	; select bank1
 16793  1E88  00A0               	movwf	??_APP_Initialize^(0+128)
 16794  1E89  0820               	movf	??_APP_Initialize^(0+128),w
 16795  1E8A  00AC               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+4)
 16796                           
 16797                           ;app.c: 50:         eepromReadbackData[5] = DATAEE_ReadByte( 0x7005u );
 16798  1E8B  3005               	movlw	5
 16799  1E8C  0020               	movlb	0	; select bank0
 16800  1E8D  00A9               	movwf	DATAEE_ReadByte@bAdd
 16801  1E8E  3070               	movlw	112
 16802  1E8F  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16803  1E90  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16804  1E93  0021               	movlb	1	; select bank1
 16805  1E94  00A0               	movwf	??_APP_Initialize^(0+128)
 16806  1E95  0820               	movf	??_APP_Initialize^(0+128),w
 16807  1E96  00AD               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+5)
 16808                           
 16809                           ;app.c: 51:         eepromReadbackData[6] = DATAEE_ReadByte( 0x7006u );
 16810  1E97  3006               	movlw	6
 16811  1E98  0020               	movlb	0	; select bank0
 16812  1E99  00A9               	movwf	DATAEE_ReadByte@bAdd
 16813  1E9A  3070               	movlw	112
 16814  1E9B  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16815  1E9C  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16816  1E9F  0021               	movlb	1	; select bank1
 16817  1EA0  00A0               	movwf	??_APP_Initialize^(0+128)
 16818  1EA1  0820               	movf	??_APP_Initialize^(0+128),w
 16819  1EA2  00AE               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+6)
 16820                           
 16821                           ;app.c: 52:         eepromReadbackData[7] = DATAEE_ReadByte( 0x7007u );
 16822  1EA3  3007               	movlw	7
 16823  1EA4  0020               	movlb	0	; select bank0
 16824  1EA5  00A9               	movwf	DATAEE_ReadByte@bAdd
 16825  1EA6  3070               	movlw	112
 16826  1EA7  00AA               	movwf	DATAEE_ReadByte@bAdd+1
 16827  1EA8  31A3  23A1  319E   	fcall	_DATAEE_ReadByte
 16828  1EAB  0021               	movlb	1	; select bank1
 16829  1EAC  00A0               	movwf	??_APP_Initialize^(0+128)
 16830  1EAD  0820               	movf	??_APP_Initialize^(0+128),w
 16831  1EAE  00AF               	movwf	(APP_Initialize@eepromReadbackData^(0+128)+7)
 16832                           
 16833                           ;app.c: 54:         if( CRC16_Calculate16bitCRC( eepromReadbackData, 8u, 0xFFFF ) == 0u 
      +                          )
 16834  1EAF  30A8               	movlw	low APP_Initialize@eepromReadbackData
 16835  1EB0  0020               	movlb	0	; select bank0
 16836  1EB1  00A9               	movwf	CRC16_Calculate16bitCRC@data
 16837  1EB2  3000               	movlw	high APP_Initialize@eepromReadbackData
 16838  1EB3  00AA               	movwf	CRC16_Calculate16bitCRC@data+1
 16839  1EB4  3008               	movlw	8
 16840  1EB5  00AB               	movwf	CRC16_Calculate16bitCRC@size
 16841  1EB6  3000               	movlw	0
 16842  1EB7  00AC               	movwf	CRC16_Calculate16bitCRC@size+1
 16843  1EB8  30FF               	movlw	255
 16844  1EB9  00AD               	movwf	CRC16_Calculate16bitCRC@seed
 16845  1EBA  30FF               	movlw	255
 16846  1EBB  00AE               	movwf	CRC16_Calculate16bitCRC@seed+1
 16847  1EBC  31A7  27B3  319E   	fcall	_CRC16_Calculate16bitCRC
 16848  1EBF  0020               	movlb	0	; select bank0
 16849  1EC0  0829               	movf	?_CRC16_Calculate16bitCRC,w
 16850  1EC1  042A               	iorwf	?_CRC16_Calculate16bitCRC+1,w
 16851  1EC2  1903               	btfsc	3,2
 16852  1EC3  2ECA               	goto	l6086
 16853                           
 16854                           ;app.c: 59:         maxRetries--;
 16855                           
 16856                           ;app.c: 57:             break;
 16857  1EC4  3001               	movlw	1
 16858  1EC5  0021               	movlb	1	; select bank1
 16859  1EC6  02A6               	subwf	APP_Initialize@maxRetries^(0+128),f
 16860  1EC7  3000               	movlw	0
 16861  1EC8  3BA7               	subwfb	(APP_Initialize@maxRetries+1)^(0+128),f
 16862  1EC9  2E4B               	goto	l6082
 16863  1ECA                     l6086:
 16864                           
 16865                           ;app.c: 69:     Clock_InitializeClockLEDs( 64,
 16866  1ECA  3040               	movlw	64
 16867  1ECB  0020               	movlb	0	; select bank0
 16868  1ECC  00B4               	movwf	Clock_InitializeClockLEDs@numElements
 16869  1ECD  3000               	movlw	0
 16870  1ECE  00B5               	movwf	Clock_InitializeClockLEDs@numElements+1
 16871  1ECF  0021               	movlb	1	; select bank1
 16872  1ED0  0828               	movf	APP_Initialize@eepromReadbackData^(0+128),w
 16873  1ED1  00A0               	movwf	??_APP_Initialize^(0+128)
 16874  1ED2  0820               	movf	??_APP_Initialize^(0+128),w
 16875  1ED3  0020               	movlb	0	; select bank0
 16876  1ED4  00B6               	movwf	Clock_InitializeClockLEDs@digitRed
 16877  1ED5  0021               	movlb	1	; select bank1
 16878  1ED6  0829               	movf	(APP_Initialize@eepromReadbackData^(0+128)+1),w
 16879  1ED7  00A1               	movwf	(??_APP_Initialize+1)^(0+128)
 16880  1ED8  0821               	movf	(??_APP_Initialize+1)^(0+128),w
 16881  1ED9  0020               	movlb	0	; select bank0
 16882  1EDA  00B7               	movwf	Clock_InitializeClockLEDs@digitGreen
 16883  1EDB  0021               	movlb	1	; select bank1
 16884  1EDC  082A               	movf	(APP_Initialize@eepromReadbackData^(0+128)+2),w
 16885  1EDD  00A2               	movwf	(??_APP_Initialize+2)^(0+128)
 16886  1EDE  0822               	movf	(??_APP_Initialize+2)^(0+128),w
 16887  1EDF  0020               	movlb	0	; select bank0
 16888  1EE0  00B8               	movwf	Clock_InitializeClockLEDs@digitBlue
 16889  1EE1  0021               	movlb	1	; select bank1
 16890  1EE2  082B               	movf	(APP_Initialize@eepromReadbackData^(0+128)+3),w
 16891  1EE3  00A3               	movwf	(??_APP_Initialize+3)^(0+128)
 16892  1EE4  0823               	movf	(??_APP_Initialize+3)^(0+128),w
 16893  1EE5  0020               	movlb	0	; select bank0
 16894  1EE6  00B9               	movwf	Clock_InitializeClockLEDs@backgroundRed
 16895  1EE7  0021               	movlb	1	; select bank1
 16896  1EE8  082C               	movf	(APP_Initialize@eepromReadbackData^(0+128)+4),w
 16897  1EE9  00A4               	movwf	(??_APP_Initialize+4)^(0+128)
 16898  1EEA  0824               	movf	(??_APP_Initialize+4)^(0+128),w
 16899  1EEB  0020               	movlb	0	; select bank0
 16900  1EEC  00BA               	movwf	Clock_InitializeClockLEDs@backgroundGreen
 16901  1EED  0021               	movlb	1	; select bank1
 16902  1EEE  082D               	movf	(APP_Initialize@eepromReadbackData^(0+128)+5),w
 16903  1EEF  00A5               	movwf	(??_APP_Initialize+5)^(0+128)
 16904  1EF0  0825               	movf	(??_APP_Initialize+5)^(0+128),w
 16905  1EF1  0020               	movlb	0	; select bank0
 16906  1EF2  00BB               	movwf	Clock_InitializeClockLEDs@backgroundBlue
 16907  1EF3  31A6  2634  319E   	fcall	_Clock_InitializeClockLEDs
 16908                           
 16909                           ;app.c: 78:     Clock_PrerenderPixelAndBackgroundValues( );
 16910  1EF6  31A6  2602  319E   	fcall	_Clock_PrerenderPixelAndBackgroundValues
 16911                           
 16912                           ;app.c: 81:     Time_InitializeTimeModule( );
 16913  1EF9  31A2  22B6  319E   	fcall	_Time_InitializeTimeModule
 16914                           
 16915                           ;app.c: 82:     Time_EnableTimeModule( );
 16916  1EFC  3188  2000  319E   	fcall	_Time_EnableTimeModule
 16917                           
 16918                           ;app.c: 85:     RotaryEncoder_Init( &rot );
 16919  1EFF  30C3               	movlw	(low (_rot@app$F1486| (0+256)))& (0+255)
 16920  1F00  31A4  24F3  319E   	fcall	_RotaryEncoder_Init
 16921                           
 16922                           ;app.c: 86:     RotaryEncoder_Enable( );
 16923  1F03  319A  2243  319E   	fcall	_RotaryEncoder_Enable
 16924                           
 16925                           ;app.c: 89:     State_SetFunctionLookupTable( );
 16926  1F06  31A4  2434  319E   	fcall	_State_SetFunctionLookupTable
 16927                           
 16928                           ;app.c: 92:     TMR1_SetInterruptHandler( Timer1Interrupt );
 16929  1F09  3012               	movlw	low _Timer1Interrupt
 16930  1F0A  0020               	movlb	0	; select bank0
 16931  1F0B  00A9               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 16932  1F0C  3023               	movlw	high _Timer1Interrupt
 16933  1F0D  00AA               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 16934  1F0E  31A2  22E1  319E   	fcall	_TMR1_SetInterruptHandler
 16935                           
 16936                           ;app.c: 93:     TMR1_StartTimer( );
 16937  1F11  31A2  22A7         	fcall	_TMR1_StartTimer
 16938  1F13  0008               	return
 16939  1F14                     __end_of_APP_Initialize:
 16940                           
 16941                           	psect	text38
 16942  22B6                     __ptext38:	
 16943 ;; *************** function _Time_InitializeTimeModule *****************
 16944 ;; Defined at:
 16945 ;;		line 48 in file "timeCalculation.c"
 16946 ;; Parameters:    Size  Location     Type
 16947 ;;		None
 16948 ;; Auto vars:     Size  Location     Type
 16949 ;;		None
 16950 ;; Return value:  Size  Location     Type
 16951 ;;                  1    wreg      void 
 16952 ;; Registers used:
 16953 ;;		wreg, status,2, status,0, pclath, cstack
 16954 ;; Tracked objects:
 16955 ;;		On entry : 0/0
 16956 ;;		On exit  : 0/0
 16957 ;;		Unchanged: 0/0
 16958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16963 ;;Total ram usage:        0 bytes
 16964 ;; Hardware stack levels used: 1
 16965 ;; Hardware stack levels required when called: 6
 16966 ;; This function calls:
 16967 ;;		_TMR5_SetInterruptHandler
 16968 ;; This function is called by:
 16969 ;;		_APP_Initialize
 16970 ;; This function uses a non-reentrant model
 16971 ;;
 16972                           
 16973  22B6                     _Time_InitializeTimeModule:	
 16974                           ;psect for function _Time_InitializeTimeModule
 16975                           
 16976                           
 16977                           ;timeCalculation.c: 50:     TMR5_SetInterruptHandler( Time_IncrementSecondsISR );
 16978                           
 16979                           ;incstack = 0
 16980                           ; Regs used in _Time_InitializeTimeModule: [wreg+status,2+status,0+pclath+cstack]
 16981  22B6  3002               	movlw	low _Time_IncrementSecondsISR
 16982  22B7  0020               	movlb	0	; select bank0
 16983  22B8  00A9               	movwf	TMR5_SetInterruptHandler@InterruptHandler
 16984  22B9  301A               	movlw	high _Time_IncrementSecondsISR
 16985  22BA  00AA               	movwf	TMR5_SetInterruptHandler@InterruptHandler+1
 16986  22BB  31A2  22EA         	fcall	_TMR5_SetInterruptHandler
 16987  22BD  0008               	return
 16988  22BE                     __end_of_Time_InitializeTimeModule:
 16989                           
 16990                           	psect	text39
 16991  22EA                     __ptext39:	
 16992 ;; *************** function _TMR5_SetInterruptHandler *****************
 16993 ;; Defined at:
 16994 ;;		line 178 in file "mcc_generated_files/tmr5.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  InterruptHan    2    8[BANK0 ] PTR FTN()void 
 16997 ;;		 -> Time_IncrementSecondsISR(1), TMR5_DefaultInterruptHandler(1), 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		wreg
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17013 ;;Total ram usage:        2 bytes
 17014 ;; Hardware stack levels used: 1
 17015 ;; Hardware stack levels required when called: 5
 17016 ;; This function calls:
 17017 ;;		Nothing
 17018 ;; This function is called by:
 17019 ;;		_TMR5_Initialize
 17020 ;;		_Time_InitializeTimeModule
 17021 ;; This function uses a non-reentrant model
 17022 ;;
 17023                           
 17024  22EA                     _TMR5_SetInterruptHandler:	
 17025                           ;psect for function _TMR5_SetInterruptHandler
 17026                           
 17027                           
 17028                           ;mcc_generated_files/tmr5.c: 179:     TMR5_InterruptHandler = InterruptHandler;
 17029                           
 17030                           ;incstack = 0
 17031                           ; Regs used in _TMR5_SetInterruptHandler: [wreg]
 17032  22EA  0020               	movlb	0	; select bank0
 17033  22EB  082A               	movf	TMR5_SetInterruptHandler@InterruptHandler+1,w
 17034  22EC  0022               	movlb	2	; select bank2
 17035  22ED  00CC               	movwf	(_TMR5_InterruptHandler+1)^(0+256)
 17036  22EE  0020               	movlb	0	; select bank0
 17037  22EF  0829               	movf	TMR5_SetInterruptHandler@InterruptHandler,w
 17038  22F0  0022               	movlb	2	; select bank2
 17039  22F1  00CB               	movwf	_TMR5_InterruptHandler^(0+256)
 17040  22F2  0008               	return
 17041  22F3                     __end_of_TMR5_SetInterruptHandler:
 17042                           
 17043                           	psect	text40
 17044  0800                     __ptext40:	
 17045 ;; *************** function _Time_EnableTimeModule *****************
 17046 ;; Defined at:
 17047 ;;		line 54 in file "timeCalculation.c"
 17048 ;; Parameters:    Size  Location     Type
 17049 ;;		None
 17050 ;; Auto vars:     Size  Location     Type
 17051 ;;		None
 17052 ;; Return value:  Size  Location     Type
 17053 ;;                  1    wreg      void 
 17054 ;; Registers used:
 17055 ;;		status,2, status,0, pclath, cstack
 17056 ;; Tracked objects:
 17057 ;;		On entry : 0/0
 17058 ;;		On exit  : 0/0
 17059 ;;		Unchanged: 0/0
 17060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17065 ;;Total ram usage:        0 bytes
 17066 ;; Hardware stack levels used: 1
 17067 ;; Hardware stack levels required when called: 6
 17068 ;; This function calls:
 17069 ;;		_TMR5_StartTimer
 17070 ;; This function is called by:
 17071 ;;		_APP_Initialize
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075  0800                     _Time_EnableTimeModule:	
 17076                           ;psect for function _Time_EnableTimeModule
 17077                           
 17078                           
 17079                           ;timeCalculation.c: 56:     TMR5_StartTimer( );
 17080                           
 17081                           ;incstack = 0
 17082                           ; Regs used in _Time_EnableTimeModule: [status,2+status,0+pclath+cstack]
 17083  0800  31A2  22AA         	fcall	_TMR5_StartTimer
 17084  0802  0008               	return
 17085  0803                     __end_of_Time_EnableTimeModule:
 17086                           
 17087                           	psect	text41
 17088  22AA                     __ptext41:	
 17089 ;; *************** function _TMR5_StartTimer *****************
 17090 ;; Defined at:
 17091 ;;		line 93 in file "mcc_generated_files/tmr5.c"
 17092 ;; Parameters:    Size  Location     Type
 17093 ;;		None
 17094 ;; Auto vars:     Size  Location     Type
 17095 ;;		None
 17096 ;; Return value:  Size  Location     Type
 17097 ;;                  1    wreg      void 
 17098 ;; Registers used:
 17099 ;;		None
 17100 ;; Tracked objects:
 17101 ;;		On entry : 0/0
 17102 ;;		On exit  : 0/0
 17103 ;;		Unchanged: 0/0
 17104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17109 ;;Total ram usage:        0 bytes
 17110 ;; Hardware stack levels used: 1
 17111 ;; Hardware stack levels required when called: 5
 17112 ;; This function calls:
 17113 ;;		Nothing
 17114 ;; This function is called by:
 17115 ;;		_Time_EnableTimeModule
 17116 ;; This function uses a non-reentrant model
 17117 ;;
 17118                           
 17119  22AA                     _TMR5_StartTimer:	
 17120                           ;psect for function _TMR5_StartTimer
 17121                           
 17122                           
 17123                           ;mcc_generated_files/tmr5.c: 96:     T5CONbits.TMR5ON = 1;
 17124                           
 17125                           ;incstack = 0
 17126                           ; Regs used in _TMR5_StartTimer: []
 17127  22AA  0028               	movlb	8	; select bank8
 17128  22AB  141A               	bsf	26,0	;volatile
 17129  22AC  0008               	return
 17130  22AD                     __end_of_TMR5_StartTimer:
 17131                           
 17132                           	psect	text42
 17133  22A7                     __ptext42:	
 17134 ;; *************** function _TMR1_StartTimer *****************
 17135 ;; Defined at:
 17136 ;;		line 93 in file "mcc_generated_files/tmr1.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;		None
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;		None
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  1    wreg      void 
 17143 ;; Registers used:
 17144 ;;		None
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17154 ;;Total ram usage:        0 bytes
 17155 ;; Hardware stack levels used: 1
 17156 ;; Hardware stack levels required when called: 5
 17157 ;; This function calls:
 17158 ;;		Nothing
 17159 ;; This function is called by:
 17160 ;;		_APP_Initialize
 17161 ;; This function uses a non-reentrant model
 17162 ;;
 17163                           
 17164  22A7                     _TMR1_StartTimer:	
 17165                           ;psect for function _TMR1_StartTimer
 17166                           
 17167                           
 17168                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
 17169                           
 17170                           ;incstack = 0
 17171                           ; Regs used in _TMR1_StartTimer: []
 17172  22A7  0020               	movlb	0	; select bank0
 17173  22A8  141B               	bsf	27,0	;volatile
 17174  22A9  0008               	return
 17175  22AA                     __end_of_TMR1_StartTimer:
 17176                           
 17177                           	psect	text43
 17178  22E1                     __ptext43:	
 17179 ;; *************** function _TMR1_SetInterruptHandler *****************
 17180 ;; Defined at:
 17181 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 17182 ;; Parameters:    Size  Location     Type
 17183 ;;  InterruptHan    2    8[BANK0 ] PTR FTN()void 
 17184 ;;		 -> Timer1Interrupt(1), TMR1_DefaultInterruptHandler(1), 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;		None
 17187 ;; Return value:  Size  Location     Type
 17188 ;;                  1    wreg      void 
 17189 ;; Registers used:
 17190 ;;		wreg
 17191 ;; Tracked objects:
 17192 ;;		On entry : 0/0
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17200 ;;Total ram usage:        2 bytes
 17201 ;; Hardware stack levels used: 1
 17202 ;; Hardware stack levels required when called: 5
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_TMR1_Initialize
 17207 ;;		_APP_Initialize
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211  22E1                     _TMR1_SetInterruptHandler:	
 17212                           ;psect for function _TMR1_SetInterruptHandler
 17213                           
 17214                           
 17215                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
 17216                           
 17217                           ;incstack = 0
 17218                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 17219  22E1  0020               	movlb	0	; select bank0
 17220  22E2  082A               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 17221  22E3  0022               	movlb	2	; select bank2
 17222  22E4  00D0               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 17223  22E5  0020               	movlb	0	; select bank0
 17224  22E6  0829               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 17225  22E7  0022               	movlb	2	; select bank2
 17226  22E8  00CF               	movwf	_TMR1_InterruptHandler^(0+256)
 17227  22E9  0008               	return
 17228  22EA                     __end_of_TMR1_SetInterruptHandler:
 17229                           
 17230                           	psect	text44
 17231  2434                     __ptext44:	
 17232 ;; *************** function _State_SetFunctionLookupTable *****************
 17233 ;; Defined at:
 17234 ;;		line 48 in file "patternMode.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;		None
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;		None
 17239 ;; Return value:  Size  Location     Type
 17240 ;;                  1    wreg      void 
 17241 ;; Registers used:
 17242 ;;		wreg
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17252 ;;Total ram usage:        0 bytes
 17253 ;; Hardware stack levels used: 1
 17254 ;; Hardware stack levels required when called: 5
 17255 ;; This function calls:
 17256 ;;		Nothing
 17257 ;; This function is called by:
 17258 ;;		_APP_Initialize
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262  2434                     _State_SetFunctionLookupTable:	
 17263                           ;psect for function _State_SetFunctionLookupTable
 17264                           
 17265                           
 17266                           ;patternMode.c: 50:     patterns[0] = Clock_IterateSinglePixelByIndex;
 17267                           
 17268                           ;incstack = 0
 17269                           ; Regs used in _State_SetFunctionLookupTable: [wreg]
 17270  2434  3021               	movlw	low _Clock_IterateSinglePixelByIndex
 17271  2435  0022               	movlb	2	; select bank2
 17272  2436  00AA               	movwf	_patterns^(0+256)
 17273  2437  3027               	movlw	high _Clock_IterateSinglePixelByIndex
 17274  2438  00AB               	movwf	(_patterns^(0+256)+1)
 17275                           
 17276                           ;patternMode.c: 51:     patterns[1] = Clock_CrossingRainbowPattern;
 17277  2439  303E               	movlw	low _Clock_CrossingRainbowPattern
 17278  243A  00AC               	movwf	(low ((_patterns| (0+256)+2)))^0
 17279  243B  300C               	movlw	high _Clock_CrossingRainbowPattern
 17280  243C  00AD               	movwf	((low ((_patterns| (0+256)+2)))^0+1)
 17281                           
 17282                           ;patternMode.c: 52:     patterns[2] = Clock_CrossingRainbowPatternwithDelays;
 17283  243D  307B               	movlw	low _Clock_CrossingRainbowPatternwithDelays
 17284  243E  00AE               	movwf	(low ((_patterns| (0+256)+4)))^0
 17285  243F  3000               	movlw	high _Clock_CrossingRainbowPatternwithDelays
 17286  2440  00AF               	movwf	((low ((_patterns| (0+256)+4)))^0+1)
 17287                           
 17288                           ;patternMode.c: 53:     patterns[3] = Clock_Popcorn_Pattern;
 17289  2441  3007               	movlw	low _Clock_Popcorn_Pattern
 17290  2442  00B0               	movwf	(low ((_patterns| (0+256)+6)))^0
 17291  2443  3015               	movlw	high _Clock_Popcorn_Pattern
 17292  2444  00B1               	movwf	((low ((_patterns| (0+256)+6)))^0+1)
 17293                           
 17294                           ;patternMode.c: 54:     patterns[4] = Clock_Popcorn_Pattern_Hold;
 17295  2445  305D               	movlw	low _Clock_Popcorn_Pattern_Hold
 17296  2446  00B2               	movwf	(low ((_patterns| (0+256)+8)))^0
 17297  2447  3004               	movlw	high _Clock_Popcorn_Pattern_Hold
 17298  2448  00B3               	movwf	((low ((_patterns| (0+256)+8)))^0+1)
 17299  2449  0008               	return
 17300  244A                     __end_of_State_SetFunctionLookupTable:
 17301                           
 17302                           	psect	text45
 17303  24F3                     __ptext45:	
 17304 ;; *************** function _RotaryEncoder_Init *****************
 17305 ;; Defined at:
 17306 ;;		line 39 in file "rotaryEncoder.c"
 17307 ;; Parameters:    Size  Location     Type
 17308 ;;  rotEncPtr       1    wreg     const PTR volatile struc
 17309 ;;		 -> rot@app$F1486(26), 
 17310 ;; Auto vars:     Size  Location     Type
 17311 ;;  rotEncPtr       1   11[BANK0 ] const PTR volatile struc
 17312 ;;		 -> rot@app$F1486(26), 
 17313 ;; Return value:  Size  Location     Type
 17314 ;;                  1    wreg      _Bool 
 17315 ;; Registers used:
 17316 ;;		wreg, status,2, status,0, pclath, cstack
 17317 ;; Tracked objects:
 17318 ;;		On entry : 0/0
 17319 ;;		On exit  : 0/0
 17320 ;;		Unchanged: 0/0
 17321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17326 ;;Total ram usage:        2 bytes
 17327 ;; Hardware stack levels used: 1
 17328 ;; Hardware stack levels required when called: 6
 17329 ;; This function calls:
 17330 ;;		_IOCCF3_SetInterruptHandler
 17331 ;;		_IOCCF4_SetInterruptHandler
 17332 ;;		_IOCCF5_SetInterruptHandler
 17333 ;; This function is called by:
 17334 ;;		_APP_Initialize
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338  24F3                     _RotaryEncoder_Init:	
 17339                           ;psect for function _RotaryEncoder_Init
 17340                           
 17341                           
 17342                           ;incstack = 0
 17343                           ; Regs used in _RotaryEncoder_Init: [wreg+status,2+status,0+pclath+cstack]
 17344                           ;RotaryEncoder_Init@rotEncPtr stored from wreg
 17345  24F3  0020               	movlb	0	; select bank0
 17346  24F4  00AC               	movwf	RotaryEncoder_Init@rotEncPtr
 17347                           
 17348                           ;rotaryEncoder.c: 39: _Bool RotaryEncoder_Init( RotaryEncoder * const rotEncPtr );rotary
      +                          Encoder.c: 40: {;rotaryEncoder.c: 41:     if( ((void*)0) == rotEncPtr )
 17349  24F5  082C               	movf	RotaryEncoder_Init@rotEncPtr,w
 17350  24F6  1903               	btfsc	3,2
 17351  24F7  0008               	return
 17352                           
 17353                           ;rotaryEncoder.c: 46:     rot = rotEncPtr;
 17354  24F8  082C               	movf	RotaryEncoder_Init@rotEncPtr,w
 17355  24F9  00AB               	movwf	??_RotaryEncoder_Init
 17356  24FA  082B               	movf	??_RotaryEncoder_Init,w
 17357  24FB  00E1               	movwf	_rot
 17358                           
 17359                           ;rotaryEncoder.c: 47:     IOCCF3_SetInterruptHandler( RotaryEncoder_ReadShaftISR );
 17360  24FC  3000               	movlw	low _RotaryEncoder_ReadShaftISR
 17361  24FD  00A9               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler
 17362  24FE  301D               	movlw	high _RotaryEncoder_ReadShaftISR
 17363  24FF  00AA               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler+1
 17364  2500  31A2  22C6  31A4   	fcall	_IOCCF3_SetInterruptHandler
 17365                           
 17366                           ;rotaryEncoder.c: 48:     IOCCF4_SetInterruptHandler( RotaryEncoder_ReadShaftISR );
 17367  2503  3000               	movlw	low _RotaryEncoder_ReadShaftISR
 17368  2504  0020               	movlb	0	; select bank0
 17369  2505  00A9               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
 17370  2506  301D               	movlw	high _RotaryEncoder_ReadShaftISR
 17371  2507  00AA               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
 17372  2508  31A2  22CF  31A4   	fcall	_IOCCF4_SetInterruptHandler
 17373                           
 17374                           ;rotaryEncoder.c: 49:     IOCCF5_SetInterruptHandler( RotaryEncoder_ReadButtonISR );
 17375  250B  3062               	movlw	low _RotaryEncoder_ReadButtonISR
 17376  250C  0020               	movlb	0	; select bank0
 17377  250D  00A9               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler
 17378  250E  3007               	movlw	high _RotaryEncoder_ReadButtonISR
 17379  250F  00AA               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler+1
 17380  2510  31A2  22D8         	fcall	_IOCCF5_SetInterruptHandler
 17381  2512  0008               	return
 17382  2513                     __end_of_RotaryEncoder_Init:
 17383                           
 17384                           	psect	text46
 17385  22D8                     __ptext46:	
 17386 ;; *************** function _IOCCF5_SetInterruptHandler *****************
 17387 ;; Defined at:
 17388 ;;		line 235 in file "mcc_generated_files/pin_manager.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;  InterruptHan    2    8[BANK0 ] PTR FTN()void 
 17391 ;;		 -> RotaryEncoder_ReadButtonISR(1), IOCCF5_DefaultInterruptHandler(1), 
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;		None
 17394 ;; Return value:  Size  Location     Type
 17395 ;;                  1    wreg      void 
 17396 ;; Registers used:
 17397 ;;		wreg
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17407 ;;Total ram usage:        2 bytes
 17408 ;; Hardware stack levels used: 1
 17409 ;; Hardware stack levels required when called: 5
 17410 ;; This function calls:
 17411 ;;		Nothing
 17412 ;; This function is called by:
 17413 ;;		_PIN_MANAGER_Initialize
 17414 ;;		_RotaryEncoder_Init
 17415 ;; This function uses a non-reentrant model
 17416 ;;
 17417                           
 17418  22D8                     _IOCCF5_SetInterruptHandler:	
 17419                           ;psect for function _IOCCF5_SetInterruptHandler
 17420                           
 17421                           
 17422                           ;mcc_generated_files/pin_manager.c: 236:     IOCCF5_InterruptHandler = InterruptHandler;
 17423                           
 17424                           ;incstack = 0
 17425                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
 17426  22D8  0020               	movlb	0	; select bank0
 17427  22D9  082A               	movf	IOCCF5_SetInterruptHandler@InterruptHandler+1,w
 17428  22DA  0022               	movlb	2	; select bank2
 17429  22DB  00D2               	movwf	(_IOCCF5_InterruptHandler+1)^(0+256)
 17430  22DC  0020               	movlb	0	; select bank0
 17431  22DD  0829               	movf	IOCCF5_SetInterruptHandler@InterruptHandler,w
 17432  22DE  0022               	movlb	2	; select bank2
 17433  22DF  00D1               	movwf	_IOCCF5_InterruptHandler^(0+256)
 17434  22E0  0008               	return
 17435  22E1                     __end_of_IOCCF5_SetInterruptHandler:
 17436                           
 17437                           	psect	text47
 17438  22CF                     __ptext47:	
 17439 ;; *************** function _IOCCF4_SetInterruptHandler *****************
 17440 ;; Defined at:
 17441 ;;		line 205 in file "mcc_generated_files/pin_manager.c"
 17442 ;; Parameters:    Size  Location     Type
 17443 ;;  InterruptHan    2    8[BANK0 ] PTR FTN()void 
 17444 ;;		 -> RotaryEncoder_ReadShaftISR(1), IOCCF4_DefaultInterruptHandler(1), 
 17445 ;; Auto vars:     Size  Location     Type
 17446 ;;		None
 17447 ;; Return value:  Size  Location     Type
 17448 ;;                  1    wreg      void 
 17449 ;; Registers used:
 17450 ;;		wreg
 17451 ;; Tracked objects:
 17452 ;;		On entry : 0/0
 17453 ;;		On exit  : 0/0
 17454 ;;		Unchanged: 0/0
 17455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17456 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17460 ;;Total ram usage:        2 bytes
 17461 ;; Hardware stack levels used: 1
 17462 ;; Hardware stack levels required when called: 5
 17463 ;; This function calls:
 17464 ;;		Nothing
 17465 ;; This function is called by:
 17466 ;;		_PIN_MANAGER_Initialize
 17467 ;;		_RotaryEncoder_Init
 17468 ;; This function uses a non-reentrant model
 17469 ;;
 17470                           
 17471  22CF                     _IOCCF4_SetInterruptHandler:	
 17472                           ;psect for function _IOCCF4_SetInterruptHandler
 17473                           
 17474                           
 17475                           ;mcc_generated_files/pin_manager.c: 206:     IOCCF4_InterruptHandler = InterruptHandler;
 17476                           
 17477                           ;incstack = 0
 17478                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
 17479  22CF  0020               	movlb	0	; select bank0
 17480  22D0  082A               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
 17481  22D1  0022               	movlb	2	; select bank2
 17482  22D2  00D4               	movwf	(_IOCCF4_InterruptHandler+1)^(0+256)
 17483  22D3  0020               	movlb	0	; select bank0
 17484  22D4  0829               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
 17485  22D5  0022               	movlb	2	; select bank2
 17486  22D6  00D3               	movwf	_IOCCF4_InterruptHandler^(0+256)
 17487  22D7  0008               	return
 17488  22D8                     __end_of_IOCCF4_SetInterruptHandler:
 17489                           
 17490                           	psect	text48
 17491  22C6                     __ptext48:	
 17492 ;; *************** function _IOCCF3_SetInterruptHandler *****************
 17493 ;; Defined at:
 17494 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;  InterruptHan    2    8[BANK0 ] PTR FTN()void 
 17497 ;;		 -> RotaryEncoder_ReadShaftISR(1), IOCCF3_DefaultInterruptHandler(1), 
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;		None
 17500 ;; Return value:  Size  Location     Type
 17501 ;;                  1    wreg      void 
 17502 ;; Registers used:
 17503 ;;		wreg
 17504 ;; Tracked objects:
 17505 ;;		On entry : 0/0
 17506 ;;		On exit  : 0/0
 17507 ;;		Unchanged: 0/0
 17508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17513 ;;Total ram usage:        2 bytes
 17514 ;; Hardware stack levels used: 1
 17515 ;; Hardware stack levels required when called: 5
 17516 ;; This function calls:
 17517 ;;		Nothing
 17518 ;; This function is called by:
 17519 ;;		_PIN_MANAGER_Initialize
 17520 ;;		_RotaryEncoder_Init
 17521 ;; This function uses a non-reentrant model
 17522 ;;
 17523                           
 17524  22C6                     _IOCCF3_SetInterruptHandler:	
 17525                           ;psect for function _IOCCF3_SetInterruptHandler
 17526                           
 17527                           
 17528                           ;mcc_generated_files/pin_manager.c: 176:     IOCCF3_InterruptHandler = InterruptHandler;
 17529                           
 17530                           ;incstack = 0
 17531                           ; Regs used in _IOCCF3_SetInterruptHandler: [wreg]
 17532  22C6  0020               	movlb	0	; select bank0
 17533  22C7  082A               	movf	IOCCF3_SetInterruptHandler@InterruptHandler+1,w
 17534  22C8  0022               	movlb	2	; select bank2
 17535  22C9  00D6               	movwf	(_IOCCF3_InterruptHandler+1)^(0+256)
 17536  22CA  0020               	movlb	0	; select bank0
 17537  22CB  0829               	movf	IOCCF3_SetInterruptHandler@InterruptHandler,w
 17538  22CC  0022               	movlb	2	; select bank2
 17539  22CD  00D5               	movwf	_IOCCF3_InterruptHandler^(0+256)
 17540  22CE  0008               	return
 17541  22CF                     __end_of_IOCCF3_SetInterruptHandler:
 17542                           
 17543                           	psect	text49
 17544  1A43                     __ptext49:	
 17545 ;; *************** function _RotaryEncoder_Enable *****************
 17546 ;; Defined at:
 17547 ;;		line 53 in file "rotaryEncoder.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;		None
 17550 ;; Auto vars:     Size  Location     Type
 17551 ;;		None
 17552 ;; Return value:  Size  Location     Type
 17553 ;;                  1    wreg      void 
 17554 ;; Registers used:
 17555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17556 ;; Tracked objects:
 17557 ;;		On entry : 0/0
 17558 ;;		On exit  : 0/0
 17559 ;;		Unchanged: 0/0
 17560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17565 ;;Total ram usage:        0 bytes
 17566 ;; Hardware stack levels used: 1
 17567 ;; Hardware stack levels required when called: 6
 17568 ;; This function calls:
 17569 ;;		_TMR3_ReadTimer
 17570 ;;		_TMR3_StartTimer
 17571 ;; This function is called by:
 17572 ;;		_APP_Initialize
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576  1A43                     _RotaryEncoder_Enable:	
 17577                           ;psect for function _RotaryEncoder_Enable
 17578                           
 17579                           
 17580                           ;rotaryEncoder.c: 55:     rot->shaft.counts = 0u;
 17581                           
 17582                           ;incstack = 0
 17583                           ; Regs used in _RotaryEncoder_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17584  1A43  0020               	movlb	0	; select bank0
 17585  1A44  0861               	movf	_rot,w
 17586  1A45  3E0F               	addlw	15
 17587  1A46  0086               	movwf	6
 17588  1A47  3001               	movlw	1	; select bank2/3
 17589  1A48  0087               	movwf	7
 17590  1A49  3000               	movlw	0
 17591  1A4A  3FC0               	movwi [0]fsr1
 17592  1A4B  3000               	movlw	0
 17593  1A4C  3FC1               	movwi [1]fsr1
 17594  1A4D  3FC2               	movwi [2]fsr1
 17595  1A4E  3FC3               	movwi [3]fsr1
 17596                           
 17597                           ;rotaryEncoder.c: 56:     rot->shaft.vector = 0u;
 17598  1A4F  0861               	movf	_rot,w
 17599  1A50  3E0E               	addlw	14
 17600  1A51  0086               	movwf	6
 17601  1A52  3001               	movlw	1	; select bank2/3
 17602  1A53  0087               	movwf	7
 17603  1A54  0181               	clrf	1
 17604                           
 17605                           ;rotaryEncoder.c: 57:     rot->shaft.currentTimestamp_tr = TMR3_ReadTimer( );
 17606  1A55  31A4  24D3  319A   	fcall	_TMR3_ReadTimer
 17607  1A58  0020               	movlb	0	; select bank0
 17608  1A59  0861               	movf	_rot,w
 17609  1A5A  3E14               	addlw	20
 17610  1A5B  0086               	movwf	6
 17611  1A5C  3001               	movlw	1	; select bank2/3
 17612  1A5D  0087               	movwf	7
 17613  1A5E  0829               	movf	?_TMR3_ReadTimer,w
 17614  1A5F  3FC0               	movwi [0]fsr1
 17615  1A60  082A               	movf	?_TMR3_ReadTimer+1,w
 17616  1A61  3FC1               	movwi [1]fsr1
 17617                           
 17618                           ;rotaryEncoder.c: 58:     rot->shaft.velocity_tps = 0u;
 17619  1A62  0861               	movf	_rot,w
 17620  1A63  3E16               	addlw	22
 17621  1A64  0086               	movwf	6
 17622  1A65  3001               	movlw	1	; select bank2/3
 17623  1A66  0087               	movwf	7
 17624  1A67  3000               	movlw	0
 17625  1A68  3FC0               	movwi [0]fsr1
 17626  1A69  3FC1               	movwi [1]fsr1
 17627                           
 17628                           ;rotaryEncoder.c: 60:     rot->rotBtn.currentState = SWITCH_RESTING;
 17629  1A6A  0861               	movf	_rot,w
 17630  1A6B  0086               	movwf	6
 17631  1A6C  3001               	movlw	1	; select bank2/3
 17632  1A6D  0087               	movwf	7
 17633  1A6E  0181               	clrf	1
 17634                           
 17635                           ;rotaryEncoder.c: 61:     rot->rotBtn.lastFallingEdgeTimestamp_cts = 0u;
 17636  1A6F  0861               	movf	_rot,w
 17637  1A70  3E03               	addlw	3
 17638  1A71  0086               	movwf	6
 17639  1A72  3001               	movlw	1	; select bank2/3
 17640  1A73  0087               	movwf	7
 17641  1A74  3000               	movlw	0
 17642  1A75  3FC0               	movwi [0]fsr1
 17643  1A76  3FC1               	movwi [1]fsr1
 17644                           
 17645                           ;rotaryEncoder.c: 62:     rot->rotBtn.lastRisingEdgeTimestamp_cts = 0u;
 17646  1A77  0A61               	incf	_rot,w
 17647  1A78  0086               	movwf	6
 17648  1A79  3001               	movlw	1	; select bank2/3
 17649  1A7A  0087               	movwf	7
 17650  1A7B  3000               	movlw	0
 17651  1A7C  3FC0               	movwi [0]fsr1
 17652  1A7D  3FC1               	movwi [1]fsr1
 17653                           
 17654                           ;rotaryEncoder.c: 63:     rot->rotBtn.currentNumMulticlicks = 0;
 17655  1A7E  0861               	movf	_rot,w
 17656  1A7F  3E06               	addlw	6
 17657  1A80  0086               	movwf	6
 17658  1A81  3001               	movlw	1	; select bank2/3
 17659  1A82  0087               	movwf	7
 17660  1A83  3000               	movlw	0
 17661  1A84  3FC0               	movwi [0]fsr1
 17662  1A85  3FC1               	movwi [1]fsr1
 17663                           
 17664                           ;rotaryEncoder.c: 64:     rot->rotBtn.hasSwitchBeenPressed = 0;
 17665  1A86  0861               	movf	_rot,w
 17666  1A87  3E05               	addlw	5
 17667  1A88  0086               	movwf	6
 17668  1A89  3001               	movlw	1	; select bank2/3
 17669  1A8A  0087               	movwf	7
 17670  1A8B  0181               	clrf	1
 17671                           
 17672                           ;rotaryEncoder.c: 66:     TMR3_StartTimer( );
 17673  1A8C  31A2  22A4         	fcall	_TMR3_StartTimer
 17674                           
 17675                           ;rotaryEncoder.c: 67:     isRotaryEncoderEnabled = 1;
 17676  1A8E  01FD               	clrf	_isRotaryEncoderEnabled
 17677  1A8F  0AFD               	incf	_isRotaryEncoderEnabled,f
 17678  1A90  0008               	return
 17679  1A91                     __end_of_RotaryEncoder_Enable:
 17680                           
 17681                           	psect	text50
 17682  22A4                     __ptext50:	
 17683 ;; *************** function _TMR3_StartTimer *****************
 17684 ;; Defined at:
 17685 ;;		line 86 in file "mcc_generated_files/tmr3.c"
 17686 ;; Parameters:    Size  Location     Type
 17687 ;;		None
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;		None
 17690 ;; Return value:  Size  Location     Type
 17691 ;;                  1    wreg      void 
 17692 ;; Registers used:
 17693 ;;		None
 17694 ;; Tracked objects:
 17695 ;;		On entry : 0/0
 17696 ;;		On exit  : 0/0
 17697 ;;		Unchanged: 0/0
 17698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17703 ;;Total ram usage:        0 bytes
 17704 ;; Hardware stack levels used: 1
 17705 ;; Hardware stack levels required when called: 5
 17706 ;; This function calls:
 17707 ;;		Nothing
 17708 ;; This function is called by:
 17709 ;;		_RotaryEncoder_Enable
 17710 ;; This function uses a non-reentrant model
 17711 ;;
 17712                           
 17713  22A4                     _TMR3_StartTimer:	
 17714                           ;psect for function _TMR3_StartTimer
 17715                           
 17716                           
 17717                           ;mcc_generated_files/tmr3.c: 89:     T3CONbits.TMR3ON = 1;
 17718                           
 17719                           ;incstack = 0
 17720                           ; Regs used in _TMR3_StartTimer: []
 17721  22A4  0028               	movlb	8	; select bank8
 17722  22A5  1413               	bsf	19,0	;volatile
 17723  22A6  0008               	return
 17724  22A7                     __end_of_TMR3_StartTimer:
 17725                           
 17726                           	psect	text51
 17727  24D3                     __ptext51:	
 17728 ;; *************** function _TMR3_ReadTimer *****************
 17729 ;; Defined at:
 17730 ;;		line 98 in file "mcc_generated_files/tmr3.c"
 17731 ;; Parameters:    Size  Location     Type
 17732 ;;		None
 17733 ;; Auto vars:     Size  Location     Type
 17734 ;;  readVal         2   15[BANK0 ] unsigned short 
 17735 ;;  readValLow      1   18[BANK0 ] unsigned char 
 17736 ;;  readValHigh     1   17[BANK0 ] unsigned char 
 17737 ;; Return value:  Size  Location     Type
 17738 ;;                  2    8[BANK0 ] unsigned short 
 17739 ;; Registers used:
 17740 ;;		wreg
 17741 ;; Tracked objects:
 17742 ;;		On entry : 0/0
 17743 ;;		On exit  : 0/0
 17744 ;;		Unchanged: 0/0
 17745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17746 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17747 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17748 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17749 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17750 ;;Total ram usage:       11 bytes
 17751 ;; Hardware stack levels used: 1
 17752 ;; Hardware stack levels required when called: 5
 17753 ;; This function calls:
 17754 ;;		Nothing
 17755 ;; This function is called by:
 17756 ;;		_RotaryEncoder_Enable
 17757 ;; This function uses a non-reentrant model
 17758 ;;
 17759                           
 17760  24D3                     _TMR3_ReadTimer:	
 17761                           ;psect for function _TMR3_ReadTimer
 17762                           
 17763                           
 17764                           ;mcc_generated_files/tmr3.c: 100:     uint16_t readVal;;mcc_generated_files/tmr3.c: 101:
      +                               uint8_t readValHigh;;mcc_generated_files/tmr3.c: 102:     uint8_t readValLow;;mcc_g
      +                          enerated_files/tmr3.c: 105:     readValLow = TMR3L;
 17765                           
 17766                           ;incstack = 0
 17767                           ; Regs used in _TMR3_ReadTimer: [wreg]
 17768  24D3  0028               	movlb	8	; select bank8
 17769  24D4  0811               	movf	17,w	;volatile
 17770  24D5  0020               	movlb	0	; select bank0
 17771  24D6  00AB               	movwf	??_TMR3_ReadTimer
 17772  24D7  082B               	movf	??_TMR3_ReadTimer,w
 17773  24D8  00B3               	movwf	TMR3_ReadTimer@readValLow
 17774                           
 17775                           ;mcc_generated_files/tmr3.c: 106:     readValHigh = TMR3H;
 17776  24D9  0028               	movlb	8	; select bank8
 17777  24DA  0812               	movf	18,w	;volatile
 17778  24DB  0020               	movlb	0	; select bank0
 17779  24DC  00AB               	movwf	??_TMR3_ReadTimer
 17780  24DD  082B               	movf	??_TMR3_ReadTimer,w
 17781  24DE  00B2               	movwf	TMR3_ReadTimer@readValHigh
 17782                           
 17783                           ;mcc_generated_files/tmr3.c: 108:     readVal = ((uint16_t)readValHigh << 8) | readValLo
      +                          w;
 17784  24DF  0833               	movf	TMR3_ReadTimer@readValLow,w
 17785  24E0  00AB               	movwf	??_TMR3_ReadTimer
 17786  24E1  01AC               	clrf	??_TMR3_ReadTimer+1
 17787  24E2  0832               	movf	TMR3_ReadTimer@readValHigh,w
 17788  24E3  00AD               	movwf	??_TMR3_ReadTimer+2
 17789  24E4  01AE               	clrf	??_TMR3_ReadTimer+3
 17790  24E5  082D               	movf	??_TMR3_ReadTimer+2,w
 17791  24E6  00AE               	movwf	??_TMR3_ReadTimer+3
 17792  24E7  01AD               	clrf	??_TMR3_ReadTimer+2
 17793  24E8  082B               	movf	??_TMR3_ReadTimer,w
 17794  24E9  042D               	iorwf	??_TMR3_ReadTimer+2,w
 17795  24EA  00B0               	movwf	TMR3_ReadTimer@readVal
 17796  24EB  082C               	movf	??_TMR3_ReadTimer+1,w
 17797  24EC  042E               	iorwf	??_TMR3_ReadTimer+3,w
 17798  24ED  00B1               	movwf	TMR3_ReadTimer@readVal+1
 17799                           
 17800                           ;mcc_generated_files/tmr3.c: 110:     return readVal;
 17801  24EE  0831               	movf	TMR3_ReadTimer@readVal+1,w
 17802  24EF  00AA               	movwf	?_TMR3_ReadTimer+1
 17803  24F0  0830               	movf	TMR3_ReadTimer@readVal,w
 17804  24F1  00A9               	movwf	?_TMR3_ReadTimer
 17805  24F2  0008               	return
 17806  24F3                     __end_of_TMR3_ReadTimer:
 17807                           
 17808                           	psect	text52
 17809  23A1                     __ptext52:	
 17810 ;; *************** function _DATAEE_ReadByte *****************
 17811 ;; Defined at:
 17812 ;;		line 202 in file "mcc_generated_files/memory.c"
 17813 ;; Parameters:    Size  Location     Type
 17814 ;;  bAdd            2    8[BANK0 ] unsigned short 
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;		None
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  1    wreg      unsigned char 
 17819 ;; Registers used:
 17820 ;;		wreg, status,2
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17830 ;;Total ram usage:        2 bytes
 17831 ;; Hardware stack levels used: 1
 17832 ;; Hardware stack levels required when called: 5
 17833 ;; This function calls:
 17834 ;;		Nothing
 17835 ;; This function is called by:
 17836 ;;		_STATE_ChangeColorMode
 17837 ;;		_APP_Initialize
 17838 ;; This function uses a non-reentrant model
 17839 ;;
 17840                           
 17841  23A1                     _DATAEE_ReadByte:	
 17842                           ;psect for function _DATAEE_ReadByte
 17843                           
 17844                           
 17845                           ;mcc_generated_files/memory.c: 202: uint8_t DATAEE_ReadByte(uint16_t bAdd);mcc_generated
      +                          _files/memory.c: 203: {;mcc_generated_files/memory.c: 204:     NVMADRH = ((bAdd >> 8) & 
      +                          0xFF);
 17846                           
 17847                           ;incstack = 0
 17848                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 17849  23A1  0020               	movlb	0	; select bank0
 17850  23A2  082A               	movf	DATAEE_ReadByte@bAdd+1,w
 17851  23A3  0031               	movlb	17	; select bank17
 17852  23A4  0092               	movwf	18	;volatile
 17853                           
 17854                           ;mcc_generated_files/memory.c: 205:     NVMADRL = (bAdd & 0xFF);
 17855  23A5  0020               	movlb	0	; select bank0
 17856  23A6  0829               	movf	DATAEE_ReadByte@bAdd,w
 17857  23A7  0031               	movlb	17	; select bank17
 17858  23A8  0091               	movwf	17	;volatile
 17859                           
 17860                           ;mcc_generated_files/memory.c: 206:     NVMCON1bits.NVMREGS = 1;
 17861  23A9  1715               	bsf	21,6	;volsfr
 17862                           
 17863                           ;mcc_generated_files/memory.c: 207:     NVMCON1bits.RD = 1;
 17864  23AA  1415               	bsf	21,0	;volsfr
 17865                           
 17866                           ;mcc_generated_files/memory.c: 208:     __nop();
 17867  23AB  0000               	nop
 17868                           
 17869                           ;mcc_generated_files/memory.c: 209:     __nop();
 17870  23AC  0000               	nop
 17871                           
 17872                           ;mcc_generated_files/memory.c: 211:     return (NVMDATL);
 17873  23AD  0031               	movlb	17	; select bank17
 17874  23AE  0813               	movf	19,w	;volatile
 17875  23AF  0008               	return
 17876  23B0                     __end_of_DATAEE_ReadByte:
 17877                           
 17878                           	psect	text53
 17879  2602                     __ptext53:	
 17880 ;; *************** function _Clock_PrerenderPixelAndBackgroundValues *****************
 17881 ;; Defined at:
 17882 ;;		line 219 in file "clockLEDs.c"
 17883 ;; Parameters:    Size  Location     Type
 17884 ;;		None
 17885 ;; Auto vars:     Size  Location     Type
 17886 ;;		None
 17887 ;; Return value:  Size  Location     Type
 17888 ;;                  1    wreg      void 
 17889 ;; Registers used:
 17890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17891 ;; Tracked objects:
 17892 ;;		On entry : 0/0
 17893 ;;		On exit  : 0/0
 17894 ;;		Unchanged: 0/0
 17895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17898 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17899 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17900 ;;Total ram usage:        3 bytes
 17901 ;; Hardware stack levels used: 1
 17902 ;; Hardware stack levels required when called: 8
 17903 ;; This function calls:
 17904 ;;		_Clock_WriteDigitPixelValuesToLocalPxlBuffers
 17905 ;;		_WS2812b_SetStripConstantColor
 17906 ;; This function is called by:
 17907 ;;		_STATE_ChangeColorMode
 17908 ;;		_APP_Initialize
 17909 ;;		_APP_TASKS
 17910 ;; This function uses a non-reentrant model
 17911 ;;
 17912                           
 17913  2602                     _Clock_PrerenderPixelAndBackgroundValues:	
 17914                           ;psect for function _Clock_PrerenderPixelAndBackgroundValues
 17915                           
 17916                           
 17917                           ;clockLEDs.c: 222:     WS2812b_SetStripConstantColor( &ledArray,
 17918                           
 17919                           ;incstack = 0
 17920                           ; Regs used in _Clock_PrerenderPixelAndBackgroundValues: [wreg-fsr1h+status,2+status,0+p
      +                          clath+cstack]
 17921  2602  3062               	movlw	low _ledArray
 17922  2603  0020               	movlb	0	; select bank0
 17923  2604  00CF               	movwf	WS2812b_SetStripConstantColor@strip
 17924  2605  3000               	movlw	high _ledArray
 17925  2606  00D0               	movwf	WS2812b_SetStripConstantColor@strip+1
 17926  2607  0021               	movlb	1	; select bank1
 17927  2608  0848               	movf	_currentBACKGROUNDrgbArray^(0+128),w
 17928  2609  0020               	movlb	0	; select bank0
 17929  260A  00D7               	movwf	??_Clock_PrerenderPixelAndBackgroundValues
 17930  260B  0857               	movf	??_Clock_PrerenderPixelAndBackgroundValues,w
 17931  260C  00D1               	movwf	WS2812b_SetStripConstantColor@red
 17932  260D  0021               	movlb	1	; select bank1
 17933  260E  0849               	movf	(_currentBACKGROUNDrgbArray^(0+128)+1),w
 17934  260F  0020               	movlb	0	; select bank0
 17935  2610  00D8               	movwf	??_Clock_PrerenderPixelAndBackgroundValues+1
 17936  2611  0858               	movf	??_Clock_PrerenderPixelAndBackgroundValues+1,w
 17937  2612  00D2               	movwf	WS2812b_SetStripConstantColor@green
 17938  2613  0021               	movlb	1	; select bank1
 17939  2614  084A               	movf	(_currentBACKGROUNDrgbArray^(0+128)+2),w
 17940  2615  0020               	movlb	0	; select bank0
 17941  2616  00D9               	movwf	??_Clock_PrerenderPixelAndBackgroundValues+2
 17942  2617  0859               	movf	??_Clock_PrerenderPixelAndBackgroundValues+2,w
 17943  2618  00D3               	movwf	WS2812b_SetStripConstantColor@blue
 17944  2619  31A5  25A9  31A6   	fcall	_WS2812b_SetStripConstantColor
 17945                           
 17946                           ;clockLEDs.c: 228:     Clock_WriteDigitPixelValuesToLocalPxlBuffers( upEncodedDigitsPixe
      +                          lValues[0],
 17947  261C  308C               	movlw	140
 17948  261D  0020               	movlb	0	; select bank0
 17949  261E  00BB               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer
 17950  261F  3025               	movlw	37
 17951  2620  00BC               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer+1
 17952  2621  3044               	movlw	low (_upDigitEncodings| (0+32768))
 17953  2622  00BD               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource
 17954  2623  30A8               	movlw	high (_upDigitEncodings| (0+32768))
 17955  2624  00BE               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource+1
 17956  2625  319A  2291  31A6   	fcall	_Clock_WriteDigitPixelValuesToLocalPxlBuffers
 17957                           
 17958                           ;clockLEDs.c: 232:     Clock_WriteDigitPixelValuesToLocalPxlBuffers( downEncodedDigitsPi
      +                          xelValues[0],
 17959  2628  30E8               	movlw	232
 17960  2629  0020               	movlb	0	; select bank0
 17961  262A  00BB               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer
 17962  262B  3023               	movlw	35
 17963  262C  00BC               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer+1
 17964  262D  3030               	movlw	low (_downDigitEncodings| (0+32768))
 17965  262E  00BD               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource
 17966  262F  30A8               	movlw	high (_downDigitEncodings| (0+32768))
 17967  2630  00BE               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource+1
 17968  2631  319A  2291         	fcall	_Clock_WriteDigitPixelValuesToLocalPxlBuffers
 17969  2633  0008               	return
 17970  2634                     __end_of_Clock_PrerenderPixelAndBackgroundValues:
 17971                           
 17972                           	psect	text54
 17973  25A9                     __ptext54:	
 17974 ;; *************** function _WS2812b_SetStripConstantColor *****************
 17975 ;; Defined at:
 17976 ;;		line 209 in file "ws2812b.c"
 17977 ;; Parameters:    Size  Location     Type
 17978 ;;  strip           2   46[BANK0 ] const PTR struct .
 17979 ;;		 -> ledArray(4), 
 17980 ;;  red             1   48[BANK0 ] const unsigned char 
 17981 ;;  green           1   49[BANK0 ] const unsigned char 
 17982 ;;  blue            1   50[BANK0 ] const unsigned char 
 17983 ;; Auto vars:     Size  Location     Type
 17984 ;;		None
 17985 ;; Return value:  Size  Location     Type
 17986 ;;                  1    wreg      void 
 17987 ;; Registers used:
 17988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17989 ;; Tracked objects:
 17990 ;;		On entry : 0/0
 17991 ;;		On exit  : 0/0
 17992 ;;		Unchanged: 0/0
 17993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17994 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17996 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17997 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17998 ;;Total ram usage:        8 bytes
 17999 ;; Hardware stack levels used: 1
 18000 ;; Hardware stack levels required when called: 7
 18001 ;; This function calls:
 18002 ;;		_WS2812b_SetPixelBlockConstantColor
 18003 ;; This function is called by:
 18004 ;;		_Clock_PrerenderPixelAndBackgroundValues
 18005 ;;		_Clock_IterateSinglePixelByIndex
 18006 ;;		_Clock_Popcorn_Pattern
 18007 ;;		_Clock_Popcorn_Pattern_Hold
 18008 ;; This function uses a non-reentrant model
 18009 ;;
 18010                           
 18011  25A9                     _WS2812b_SetStripConstantColor:	
 18012                           ;psect for function _WS2812b_SetStripConstantColor
 18013                           
 18014                           
 18015                           ;ws2812b.c: 209: void WS2812b_SetStripConstantColor( ws2812bArray * const strip,;ws2812b
      +                          .c: 210:                                     const uint8_t red,;ws2812b.c: 211:         
      +                                                      const uint8_t green,;ws2812b.c: 212:                        
      +                                       const uint8_t blue );ws2812b.c: 213: {;ws2812b.c: 214:     if( ( ((void*)0)
      +                           == strip ) ||
 18016                           
 18017                           ;incstack = 0
 18018                           ; Regs used in _WS2812b_SetStripConstantColor: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 18019  25A9  0020               	movlb	0	; select bank0
 18020  25AA  084F               	movf	WS2812b_SetStripConstantColor@strip,w
 18021  25AB  0450               	iorwf	WS2812b_SetStripConstantColor@strip+1,w
 18022  25AC  1903               	btfsc	3,2
 18023  25AD  0008               	return
 18024  25AE  084F               	movf	WS2812b_SetStripConstantColor@strip,w
 18025  25AF  0086               	movwf	6
 18026  25B0  0850               	movf	WS2812b_SetStripConstantColor@strip+1,w
 18027  25B1  0087               	movwf	7
 18028  25B2  0016               	moviw fsr1++
 18029  25B3  0401               	iorwf	1,w
 18030  25B4  1903               	btfsc	3,2
 18031  25B5  0008               	return
 18032                           
 18033                           ;ws2812b.c: 219:     WS2812b_SetPixelBlockConstantColor( strip,
 18034  25B6  0850               	movf	WS2812b_SetStripConstantColor@strip+1,w
 18035  25B7  00BC               	movwf	WS2812b_SetPixelBlockConstantColor@strip+1
 18036  25B8  084F               	movf	WS2812b_SetStripConstantColor@strip,w
 18037  25B9  00BB               	movwf	WS2812b_SetPixelBlockConstantColor@strip
 18038  25BA  3000               	movlw	0
 18039  25BB  00BD               	movwf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset
 18040  25BC  00BE               	movwf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset+1
 18041  25BD  084F               	movf	WS2812b_SetStripConstantColor@strip,w
 18042  25BE  0086               	movwf	6
 18043  25BF  0850               	movf	WS2812b_SetStripConstantColor@strip+1,w
 18044  25C0  0087               	movwf	7
 18045  25C1  3142               	addfsr 1,2
 18046  25C2  3F40               	moviw [0]fsr1
 18047  25C3  00BF               	movwf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet
 18048  25C4  3F41               	moviw [1]fsr1
 18049  25C5  00C0               	movwf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet+1
 18050  25C6  0851               	movf	WS2812b_SetStripConstantColor@red,w
 18051  25C7  00D4               	movwf	??_WS2812b_SetStripConstantColor
 18052  25C8  0854               	movf	??_WS2812b_SetStripConstantColor,w
 18053  25C9  00C1               	movwf	WS2812b_SetPixelBlockConstantColor@red
 18054  25CA  0852               	movf	WS2812b_SetStripConstantColor@green,w
 18055  25CB  00D5               	movwf	??_WS2812b_SetStripConstantColor+1
 18056  25CC  0855               	movf	??_WS2812b_SetStripConstantColor+1,w
 18057  25CD  00C2               	movwf	WS2812b_SetPixelBlockConstantColor@green
 18058  25CE  0853               	movf	WS2812b_SetStripConstantColor@blue,w
 18059  25CF  00D6               	movwf	??_WS2812b_SetStripConstantColor+2
 18060  25D0  0856               	movf	??_WS2812b_SetStripConstantColor+2,w
 18061  25D1  00C3               	movwf	WS2812b_SetPixelBlockConstantColor@blue
 18062  25D2  3188  2003         	fcall	_WS2812b_SetPixelBlockConstantColor
 18063  25D4  0008               	return
 18064  25D5                     __end_of_WS2812b_SetStripConstantColor:
 18065                           
 18066                           	psect	text55
 18067  0803                     __ptext55:	
 18068 ;; *************** function _WS2812b_SetPixelBlockConstantColor *****************
 18069 ;; Defined at:
 18070 ;;		line 179 in file "ws2812b.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;  strip           2   26[BANK0 ] const PTR const struct .
 18073 ;;		 -> ledArray(4), 
 18074 ;;  pixelStartOf    2   28[BANK0 ] const unsigned int 
 18075 ;;  numPixelsToS    2   30[BANK0 ] const unsigned int 
 18076 ;;  red             1   32[BANK0 ] const unsigned char 
 18077 ;;  green           1   33[BANK0 ] const unsigned char 
 18078 ;;  blue            1   34[BANK0 ] const unsigned char 
 18079 ;; Auto vars:     Size  Location     Type
 18080 ;;  rgbArray        3   41[BANK0 ] unsigned char [3]
 18081 ;;  i               2   44[BANK0 ] unsigned int 
 18082 ;;  startPixelAd    2   39[BANK0 ] PTR unsigned char 
 18083 ;;		 -> renderBuffer.red(1), renderBuffer(192), 
 18084 ;;  finalPixelIn    2   37[BANK0 ] unsigned int 
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  1    wreg      void 
 18087 ;; Registers used:
 18088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18094 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18095 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18097 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18098 ;;Total ram usage:       20 bytes
 18099 ;; Hardware stack levels used: 1
 18100 ;; Hardware stack levels required when called: 6
 18101 ;; This function calls:
 18102 ;;		___wmul
 18103 ;;		_memcpy
 18104 ;; This function is called by:
 18105 ;;		_WS2812b_SetStripConstantColor
 18106 ;;		_Clock_FixDigit4LastThreePixels
 18107 ;; This function uses a non-reentrant model
 18108 ;;
 18109                           
 18110  0803                     _WS2812b_SetPixelBlockConstantColor:	
 18111                           ;psect for function _WS2812b_SetPixelBlockConstantColor
 18112                           
 18113                           
 18114                           ;ws2812b.c: 179: void WS2812b_SetPixelBlockConstantColor( const ws2812bArray * const str
      +                          ip,;ws2812b.c: 180:                                          const size_t pixelStartOffs
      +                          et,;ws2812b.c: 181:                                          const size_t numPixelsToSet
      +                          ,;ws2812b.c: 182:                                          const uint8_t red,;ws2812b.c:
      +                           183:                                          const uint8_t green,;ws2812b.c: 184:     
      +                                                               const uint8_t blue );ws2812b.c: 185: {
 18115                           
 18116                           ;incstack = 0
 18117                           ; Regs used in _WS2812b_SetPixelBlockConstantColor: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 18118  0803  0020               	movlb	0	; select bank0
 18119  0804  083B               	movf	WS2812b_SetPixelBlockConstantColor@strip,w
 18120  0805  043C               	iorwf	WS2812b_SetPixelBlockConstantColor@strip+1,w
 18121  0806  1903               	btfsc	3,2
 18122  0807  0008               	return
 18123  0808  083B               	movf	WS2812b_SetPixelBlockConstantColor@strip,w
 18124  0809  0086               	movwf	6
 18125  080A  083C               	movf	WS2812b_SetPixelBlockConstantColor@strip+1,w
 18126  080B  0087               	movwf	7
 18127  080C  0016               	moviw fsr1++
 18128  080D  0401               	iorwf	1,w
 18129  080E  1903               	btfsc	3,2
 18130  080F  0008               	return
 18131                           
 18132                           ;ws2812b.c: 192:     size_t finalPixelIndex = pixelStartOffset + numPixelsToSet;
 18133  0810  083F               	movf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet,w
 18134  0811  073D               	addwf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset,w
 18135  0812  00C6               	movwf	WS2812b_SetPixelBlockConstantColor@finalPixelIndex
 18136  0813  0840               	movf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet+1,w
 18137  0814  3D3E               	addwfc	WS2812b_SetPixelBlockConstantColor@pixelStartOffset+1,w
 18138  0815  00C7               	movwf	WS2812b_SetPixelBlockConstantColor@finalPixelIndex+1
 18139                           
 18140                           ;ws2812b.c: 194:     if( finalPixelIndex > strip->numPixels )
 18141  0816  083B               	movf	WS2812b_SetPixelBlockConstantColor@strip,w
 18142  0817  0086               	movwf	6
 18143  0818  083C               	movf	WS2812b_SetPixelBlockConstantColor@strip+1,w
 18144  0819  0087               	movwf	7
 18145  081A  3142               	addfsr 1,2
 18146  081B  3F40               	moviw [0]fsr1
 18147  081C  00C4               	movwf	??_WS2812b_SetPixelBlockConstantColor
 18148  081D  3F41               	moviw [1]fsr1
 18149  081E  00C5               	movwf	??_WS2812b_SetPixelBlockConstantColor+1
 18150  081F  0847               	movf	WS2812b_SetPixelBlockConstantColor@finalPixelIndex+1,w
 18151  0820  0245               	subwf	??_WS2812b_SetPixelBlockConstantColor+1,w
 18152  0821  1D03               	skipz
 18153  0822  2825               	goto	u3505
 18154  0823  0846               	movf	WS2812b_SetPixelBlockConstantColor@finalPixelIndex,w
 18155  0824  0244               	subwf	??_WS2812b_SetPixelBlockConstantColor,w
 18156  0825                     u3505:
 18157  0825  1C03               	btfss	3,0
 18158  0826  0008               	return
 18159                           
 18160                           ;ws2812b.c: 199:     size_t i;;ws2812b.c: 200:     uint8_t rgbArray[3u] = {red, green, b
      +                          lue};
 18161  0827  3000               	movlw	0
 18162  0828  00CA               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray
 18163  0829  3000               	movlw	0
 18164  082A  00CB               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray+1
 18165  082B  3000               	movlw	0
 18166  082C  00CC               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray+2
 18167  082D  0841               	movf	WS2812b_SetPixelBlockConstantColor@red,w
 18168  082E  00C4               	movwf	??_WS2812b_SetPixelBlockConstantColor
 18169  082F  0844               	movf	??_WS2812b_SetPixelBlockConstantColor,w
 18170  0830  00CA               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray
 18171  0831  0842               	movf	WS2812b_SetPixelBlockConstantColor@green,w
 18172  0832  00C4               	movwf	??_WS2812b_SetPixelBlockConstantColor
 18173  0833  0844               	movf	??_WS2812b_SetPixelBlockConstantColor,w
 18174  0834  00CB               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray+1
 18175  0835  0843               	movf	WS2812b_SetPixelBlockConstantColor@blue,w
 18176  0836  00C4               	movwf	??_WS2812b_SetPixelBlockConstantColor
 18177  0837  0844               	movf	??_WS2812b_SetPixelBlockConstantColor,w
 18178  0838  00CC               	movwf	WS2812b_SetPixelBlockConstantColor@rgbArray+2
 18179                           
 18180                           ;ws2812b.c: 201:     uint8_t * startPixelAddress = &( strip->pixelBuffer[pixelStartOffse
      +                          t].red );
 18181  0839  083E               	movf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset+1,w
 18182  083A  00AA               	movwf	___wmul@multiplier+1
 18183  083B  083D               	movf	WS2812b_SetPixelBlockConstantColor@pixelStartOffset,w
 18184  083C  00A9               	movwf	___wmul@multiplier
 18185  083D  3003               	movlw	3
 18186  083E  00AB               	movwf	___wmul@multiplicand
 18187  083F  3000               	movlw	0
 18188  0840  00AC               	movwf	___wmul@multiplicand+1
 18189  0841  31A4  247E  3188   	fcall	___wmul
 18190  0844  0020               	movlb	0	; select bank0
 18191  0845  083B               	movf	WS2812b_SetPixelBlockConstantColor@strip,w
 18192  0846  0086               	movwf	6
 18193  0847  083C               	movf	WS2812b_SetPixelBlockConstantColor@strip+1,w
 18194  0848  0087               	movwf	7
 18195  0849  3F40               	moviw [0]fsr1
 18196  084A  00C4               	movwf	??_WS2812b_SetPixelBlockConstantColor
 18197  084B  3F41               	moviw [1]fsr1
 18198  084C  00C5               	movwf	??_WS2812b_SetPixelBlockConstantColor+1
 18199  084D  0829               	movf	?___wmul,w
 18200  084E  0744               	addwf	??_WS2812b_SetPixelBlockConstantColor,w
 18201  084F  00C8               	movwf	WS2812b_SetPixelBlockConstantColor@startPixelAddress
 18202  0850  082A               	movf	?___wmul+1,w
 18203  0851  3D45               	addwfc	??_WS2812b_SetPixelBlockConstantColor+1,w
 18204  0852  00C9               	movwf	WS2812b_SetPixelBlockConstantColor@startPixelAddress+1
 18205                           
 18206                           ;ws2812b.c: 202:     for( i = 0; i < numPixelsToSet; i++ )
 18207  0853  01CD               	clrf	WS2812b_SetPixelBlockConstantColor@i
 18208  0854  01CE               	clrf	WS2812b_SetPixelBlockConstantColor@i+1
 18209  0855  083F               	movf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet,w
 18210  0856  0440               	iorwf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet+1,w
 18211  0857  1903               	btfsc	3,2
 18212  0858  0008               	return
 18213  0859                     l4868:
 18214                           
 18215                           ;ws2812b.c: 203:     {;ws2812b.c: 204:         memcpy( ( startPixelAddress + 3u * i ), r
      +                          gbArray, 3u );
 18216  0859  084E               	movf	WS2812b_SetPixelBlockConstantColor@i+1,w
 18217  085A  00AA               	movwf	___wmul@multiplier+1
 18218  085B  084D               	movf	WS2812b_SetPixelBlockConstantColor@i,w
 18219  085C  00A9               	movwf	___wmul@multiplier
 18220  085D  3003               	movlw	3
 18221  085E  00AB               	movwf	___wmul@multiplicand
 18222  085F  3000               	movlw	0
 18223  0860  00AC               	movwf	___wmul@multiplicand+1
 18224  0861  31A4  247E  3188   	fcall	___wmul
 18225  0864  0020               	movlb	0	; select bank0
 18226  0865  0829               	movf	?___wmul,w
 18227  0866  0748               	addwf	WS2812b_SetPixelBlockConstantColor@startPixelAddress,w
 18228  0867  00AF               	movwf	memcpy@d1
 18229  0868  082A               	movf	?___wmul+1,w
 18230  0869  3D49               	addwfc	WS2812b_SetPixelBlockConstantColor@startPixelAddress+1,w
 18231  086A  00B0               	movwf	memcpy@d1+1
 18232  086B  304A               	movlw	low WS2812b_SetPixelBlockConstantColor@rgbArray
 18233  086C  00B1               	movwf	memcpy@s1
 18234  086D  3000               	movlw	high WS2812b_SetPixelBlockConstantColor@rgbArray
 18235  086E  00B2               	movwf	memcpy@s1+1
 18236  086F  3003               	movlw	3
 18237  0870  00B3               	movwf	memcpy@n
 18238  0871  3000               	movlw	0
 18239  0872  00B4               	movwf	memcpy@n+1
 18240  0873  31A5  2580  3188   	fcall	_memcpy
 18241                           
 18242                           ;ws2812b.c: 205:     }
 18243  0876  3001               	movlw	1
 18244  0877  0020               	movlb	0	; select bank0
 18245  0878  07CD               	addwf	WS2812b_SetPixelBlockConstantColor@i,f
 18246  0879  3000               	movlw	0
 18247  087A  3DCE               	addwfc	WS2812b_SetPixelBlockConstantColor@i+1,f
 18248  087B  0840               	movf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet+1,w
 18249  087C  024E               	subwf	WS2812b_SetPixelBlockConstantColor@i+1,w
 18250  087D  1D03               	skipz
 18251  087E  2881               	goto	u3525
 18252  087F  083F               	movf	WS2812b_SetPixelBlockConstantColor@numPixelsToSet,w
 18253  0880  024D               	subwf	WS2812b_SetPixelBlockConstantColor@i,w
 18254  0881                     u3525:
 18255  0881  1803               	btfsc	3,0
 18256  0882  0008               	return
 18257  0883  2859               	goto	l4868
 18258  0884                     __end_of_WS2812b_SetPixelBlockConstantColor:
 18259                           
 18260                           	psect	text56
 18261  247E                     __ptext56:	
 18262 ;; *************** function ___wmul *****************
 18263 ;; Defined at:
 18264 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 18265 ;; Parameters:    Size  Location     Type
 18266 ;;  multiplier      2    8[BANK0 ] unsigned int 
 18267 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;  product         2   12[BANK0 ] unsigned int 
 18270 ;; Return value:  Size  Location     Type
 18271 ;;                  2    8[BANK0 ] unsigned int 
 18272 ;; Registers used:
 18273 ;;		wreg, status,2, status,0
 18274 ;; Tracked objects:
 18275 ;;		On entry : 0/0
 18276 ;;		On exit  : 0/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18279 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18282 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18283 ;;Total ram usage:        6 bytes
 18284 ;; Hardware stack levels used: 1
 18285 ;; Hardware stack levels required when called: 5
 18286 ;; This function calls:
 18287 ;;		Nothing
 18288 ;; This function is called by:
 18289 ;;		_STATE_ChangeColorMode
 18290 ;;		_WS2812b_SetSinglePixelColor
 18291 ;;		_WS2812b_SetPixelBlockConstantColor
 18292 ;;		_WS2812b_CopyPixelBufferArrayFromSource
 18293 ;;		_Clock_WriteTimeDigitValuesAndRenderScreen
 18294 ;;		_Clock_ForceRender
 18295 ;;		_Clock_CrossingRainbowPattern
 18296 ;;		_Clock_CrossingRainbowPatternwithDelays
 18297 ;; This function uses a non-reentrant model
 18298 ;;
 18299                           
 18300  247E                     ___wmul:	
 18301                           ;psect for function ___wmul
 18302                           
 18303                           
 18304                           ;incstack = 0
 18305                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18306  247E  0020               	movlb	0	; select bank0
 18307  247F  01AD               	clrf	___wmul@product
 18308  2480  01AE               	clrf	___wmul@product+1
 18309  2481                     l4816:
 18310  2481  1C29               	btfss	___wmul@multiplier,0
 18311  2482  2C87               	goto	l1152
 18312  2483  082B               	movf	___wmul@multiplicand,w
 18313  2484  07AD               	addwf	___wmul@product,f
 18314  2485  082C               	movf	___wmul@multiplicand+1,w
 18315  2486  3DAE               	addwfc	___wmul@product+1,f
 18316  2487                     l1152:
 18317  2487  3001               	movlw	1
 18318  2488                     u3415:
 18319  2488  35AB               	lslf	___wmul@multiplicand,f
 18320  2489  0DAC               	rlf	___wmul@multiplicand+1,f
 18321  248A  0B89               	decfsz	9,f
 18322  248B  2C88               	goto	u3415
 18323  248C  3001               	movlw	1
 18324  248D                     u3425:
 18325  248D  36AA               	lsrf	___wmul@multiplier+1,f
 18326  248E  0CA9               	rrf	___wmul@multiplier,f
 18327  248F  0B89               	decfsz	9,f
 18328  2490  2C8D               	goto	u3425
 18329  2491  0829               	movf	___wmul@multiplier,w
 18330  2492  042A               	iorwf	___wmul@multiplier+1,w
 18331  2493  1D03               	btfss	3,2
 18332  2494  2C81               	goto	l4816
 18333  2495  082E               	movf	___wmul@product+1,w
 18334  2496  00AA               	movwf	?___wmul+1
 18335  2497  082D               	movf	___wmul@product,w
 18336  2498  00A9               	movwf	?___wmul
 18337  2499  0008               	return
 18338  249A                     __end_of___wmul:
 18339                           
 18340                           	psect	text57
 18341  1A91                     __ptext57:	
 18342 ;; *************** function _Clock_WriteDigitPixelValuesToLocalPxlBuffers *****************
 18343 ;; Defined at:
 18344 ;;		line 258 in file "clockLEDs.c"
 18345 ;; Parameters:    Size  Location     Type
 18346 ;;  pixelBuffer     2   26[BANK0 ] const PTR struct .
 18347 ;;		 -> downEncodedDigitsPixelValues(420), upEncodedDigitsPixelValues(420), 
 18348 ;;  encodingSour    2   28[BANK0 ] PTR const unsigned short
 18349 ;;		 -> downDigitEncodings(20), upDigitEncodings(20), 
 18350 ;; Auto vars:     Size  Location     Type
 18351 ;;  encodingCoun    2   36[BANK0 ] unsigned int 
 18352 ;;  thisDigitSta    2   34[BANK0 ] PTR unsigned char 
 18353 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues(420), upEnc
      +odedDigitsPixelValues(420), 
 18354 ;;  digitCounter    2   32[BANK0 ] unsigned int 
 18355 ;; Return value:  Size  Location     Type
 18356 ;;                  1    wreg      void 
 18357 ;; Registers used:
 18358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18359 ;; Tracked objects:
 18360 ;;		On entry : 0/0
 18361 ;;		On exit  : 0/0
 18362 ;;		Unchanged: 0/0
 18363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18364 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18365 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18367 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18368 ;;Total ram usage:       12 bytes
 18369 ;; Hardware stack levels used: 1
 18370 ;; Hardware stack levels required when called: 6
 18371 ;; This function calls:
 18372 ;;		_memcpy
 18373 ;; This function is called by:
 18374 ;;		_Clock_PrerenderPixelAndBackgroundValues
 18375 ;; This function uses a non-reentrant model
 18376 ;;
 18377                           
 18378  1A91                     _Clock_WriteDigitPixelValuesToLocalPxlBuffers:	
 18379                           ;psect for function _Clock_WriteDigitPixelValuesToLocalPxlBuffers
 18380                           
 18381                           
 18382                           ;clockLEDs.c: 258: static void Clock_WriteDigitPixelValuesToLocalPxlBuffers( ws2812bPixe
      +                          l * const pixelBuffer,;clockLEDs.c: 259:                                                
      +                                     const uint16_t * encodingSource );clockLEDs.c: 260: {;clockLEDs.c: 261:     s
      +                          ize_t digitCounter;;clockLEDs.c: 262:     size_t encodingCounter;;clockLEDs.c: 263:     
      +                          uint8_t * thisDigitStartAddress = &( pixelBuffer->red );
 18383                           
 18384                           ;incstack = 0
 18385                           ; Regs used in _Clock_WriteDigitPixelValuesToLocalPxlBuffers: [wreg-fsr1h+status,2+statu
      +                          s,0+pclath+cstack]
 18386  1A91  0020               	movlb	0	; select bank0
 18387  1A92  083C               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer+1,w
 18388  1A93  00C4               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress+1
 18389  1A94  083B               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer,w
 18390  1A95  00C3               	movwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress
 18391                           
 18392                           ;clockLEDs.c: 264:     for( digitCounter = 0; digitCounter < 10u; digitCounter++ )
 18393  1A96  01C1               	clrf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter
 18394  1A97  01C2               	clrf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter+1
 18395  1A98                     l5048:
 18396                           
 18397                           ;clockLEDs.c: 265:     {;clockLEDs.c: 266:         for( encodingCounter = 0; encodingCou
      +                          nter < 14u; encodingCounter++ )
 18398  1A98  01C5               	clrf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter
 18399  1A99  01C6               	clrf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter+1
 18400  1A9A                     l5054:
 18401                           
 18402                           ;clockLEDs.c: 267:         {;clockLEDs.c: 269:             if( ( *encodingSource << enco
      +                          dingCounter ) & 0x8000u )
 18403  1A9A  083D               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource,w
 18404  1A9B  0084               	movwf	4
 18405  1A9C  083E               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource+1,w
 18406  1A9D  0085               	movwf	5
 18407  1A9E  3F00               	moviw [0]fsr0
 18408  1A9F  00BF               	movwf	??_Clock_WriteDigitPixelValuesToLocalPxlBuffers
 18409  1AA0  3F01               	moviw [1]fsr0
 18410  1AA1  00C0               	movwf	??_Clock_WriteDigitPixelValuesToLocalPxlBuffers+1
 18411  1AA2  0A45               	incf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter,w
 18412  1AA3  2AA6               	goto	u3884
 18413  1AA4                     u3885:
 18414  1AA4  35BF               	lslf	??_Clock_WriteDigitPixelValuesToLocalPxlBuffers,f
 18415  1AA5  0DC0               	rlf	??_Clock_WriteDigitPixelValuesToLocalPxlBuffers+1,f
 18416  1AA6                     u3884:
 18417  1AA6  0B89               	decfsz	9,f
 18418  1AA7  2AA4               	goto	u3885
 18419  1AA8  1FC0               	btfss	??_Clock_WriteDigitPixelValuesToLocalPxlBuffers+1,7
 18420  1AA9  2AB2               	goto	l5058
 18421                           
 18422                           ;clockLEDs.c: 270:             {;clockLEDs.c: 271:                 memcpy( thisDigitStar
      +                          tAddress, currentDIGITrgbArray, 3u );
 18423  1AAA  0844               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress+1,w
 18424  1AAB  00B0               	movwf	memcpy@d1+1
 18425  1AAC  0843               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress,w
 18426  1AAD  00AF               	movwf	memcpy@d1
 18427  1AAE  30CB               	movlw	low _currentDIGITrgbArray
 18428  1AAF  00B1               	movwf	memcpy@s1
 18429  1AB0  3000               	movlw	high _currentDIGITrgbArray
 18430  1AB1  2AB9               	goto	L8
 18431  1AB2                     l5058:	
 18432                           ;clockLEDs.c: 272:             }
 18433                           
 18434                           
 18435                           ;clockLEDs.c: 274:             {;clockLEDs.c: 275:                 memcpy( thisDigitStar
      +                          tAddress, currentBACKGROUNDrgbArray, 3u );
 18436  1AB2  0844               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress+1,w
 18437  1AB3  00B0               	movwf	memcpy@d1+1
 18438  1AB4  0843               	movf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress,w
 18439  1AB5  00AF               	movwf	memcpy@d1
 18440  1AB6  30C8               	movlw	low _currentBACKGROUNDrgbArray
 18441  1AB7  00B1               	movwf	memcpy@s1
 18442  1AB8  3000               	movlw	high _currentBACKGROUNDrgbArray
 18443  1AB9                     L8:
 18444  1AB9  00B2               	movwf	memcpy@s1+1
 18445  1ABA  3003               	movlw	3
 18446  1ABB  00B3               	movwf	memcpy@n
 18447  1ABC  3000               	movlw	0
 18448  1ABD  00B4               	movwf	memcpy@n+1
 18449  1ABE  31A5  2580  319A   	fcall	_memcpy
 18450                           
 18451                           ;clockLEDs.c: 277:             thisDigitStartAddress += 3u;
 18452  1AC1  3003               	movlw	3
 18453  1AC2  0020               	movlb	0	; select bank0
 18454  1AC3  07C3               	addwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress,f
 18455  1AC4  3000               	movlw	0
 18456  1AC5  3DC4               	addwfc	Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress+1,f
 18457                           
 18458                           ;clockLEDs.c: 278:         }
 18459  1AC6  3001               	movlw	1
 18460  1AC7  07C5               	addwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter,f
 18461  1AC8  3000               	movlw	0
 18462  1AC9  3DC6               	addwfc	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter+1,f
 18463  1ACA  3000               	movlw	0
 18464  1ACB  0246               	subwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter+1,w
 18465  1ACC  300E               	movlw	14
 18466  1ACD  1903               	skipnz
 18467  1ACE  0245               	subwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter,w
 18468  1ACF  1C03               	skipc
 18469  1AD0  2A9A               	goto	l5054
 18470                           
 18471                           ;clockLEDs.c: 279:         encodingSource++;
 18472  1AD1  3002               	movlw	2
 18473  1AD2  07BD               	addwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource,f
 18474  1AD3  3000               	movlw	0
 18475  1AD4  3DBE               	addwfc	Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource+1,f
 18476                           
 18477                           ;clockLEDs.c: 280:     }
 18478  1AD5  3001               	movlw	1
 18479  1AD6  07C1               	addwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter,f
 18480  1AD7  3000               	movlw	0
 18481  1AD8  3DC2               	addwfc	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter+1,f
 18482  1AD9  3000               	movlw	0
 18483  1ADA  0242               	subwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter+1,w
 18484  1ADB  300A               	movlw	10
 18485  1ADC  1903               	skipnz
 18486  1ADD  0241               	subwf	Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter,w
 18487  1ADE  1803               	btfsc	3,0
 18488  1ADF  0008               	return
 18489  1AE0  2A98               	goto	l5048
 18490  1AE1                     __end_of_Clock_WriteDigitPixelValuesToLocalPxlBuffers:
 18491                           
 18492                           	psect	text58
 18493  2580                     __ptext58:	
 18494 ;; *************** function _memcpy *****************
 18495 ;; Defined at:
 18496 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\memcpy.c"
 18497 ;; Parameters:    Size  Location     Type
 18498 ;;  d1              2   14[BANK0 ] PTR void 
 18499 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), renderBuffer.red(1), downEncodedDigitsPi
      +xelValues(420), 
 18500 ;;		 -> upEncodedDigitsPixelValues(420), renderBuffer(192), 
 18501 ;;  s1              2   16[BANK0 ] PTR const void 
 18502 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues(420), upEnc
      +odedDigitsPixelValues(420), 
 18503 ;;		 -> currentDIGITrgbArray(3), currentBACKGROUNDrgbArray(3), WS2812b_SetPixelBlockConstantColor@rgbArray(3), 
 18504 ;;  n               2   18[BANK0 ] unsigned int 
 18505 ;; Auto vars:     Size  Location     Type
 18506 ;;  s               2   24[BANK0 ] PTR const unsigned char 
 18507 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues(420), upEnc
      +odedDigitsPixelValues(420), 
 18508 ;;		 -> currentDIGITrgbArray(3), currentBACKGROUNDrgbArray(3), WS2812b_SetPixelBlockConstantColor@rgbArray(3), 
 18509 ;;  d               2   22[BANK0 ] PTR unsigned char 
 18510 ;;		 -> upEncodedDigitsPixelValues.red(1), downEncodedDigitsPixelValues.red(1), renderBuffer.red(1), downEncodedDigitsPi
      +xelValues(420), 
 18511 ;;		 -> upEncodedDigitsPixelValues(420), renderBuffer(192), 
 18512 ;;  tmp             1   21[BANK0 ] unsigned char 
 18513 ;; Return value:  Size  Location     Type
 18514 ;;                  2   14[BANK0 ] PTR void 
 18515 ;; Registers used:
 18516 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18517 ;; Tracked objects:
 18518 ;;		On entry : 0/0
 18519 ;;		On exit  : 0/0
 18520 ;;		Unchanged: 0/0
 18521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18522 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18523 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18525 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18526 ;;Total ram usage:       12 bytes
 18527 ;; Hardware stack levels used: 1
 18528 ;; Hardware stack levels required when called: 5
 18529 ;; This function calls:
 18530 ;;		Nothing
 18531 ;; This function is called by:
 18532 ;;		_WS2812b_SetPixelBlockConstantColor
 18533 ;;		_WS2812b_CopyPixelBufferArrayFromSource
 18534 ;;		_Clock_WriteDigitPixelValuesToLocalPxlBuffers
 18535 ;;		_WS2812b_SetPixelBlockFromRGBArray
 18536 ;; This function uses a non-reentrant model
 18537 ;;
 18538                           
 18539  2580                     _memcpy:	
 18540                           ;psect for function _memcpy
 18541                           
 18542                           
 18543                           ;incstack = 0
 18544                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 18545  2580  0020               	movlb	0	; select bank0
 18546  2581  0832               	movf	memcpy@s1+1,w
 18547  2582  00BA               	movwf	memcpy@s+1
 18548  2583  0831               	movf	memcpy@s1,w
 18549  2584  00B9               	movwf	memcpy@s
 18550  2585  0830               	movf	memcpy@d1+1,w
 18551  2586  00B8               	movwf	memcpy@d+1
 18552  2587  082F               	movf	memcpy@d1,w
 18553  2588  00B7               	movwf	memcpy@d
 18554  2589                     l4812:
 18555  2589  3001               	movlw	1
 18556  258A  02B3               	subwf	memcpy@n,f
 18557  258B  3000               	movlw	0
 18558  258C  3BB4               	subwfb	memcpy@n+1,f
 18559  258D  0A33               	incf	memcpy@n,w
 18560  258E  1903               	btfsc	3,2
 18561  258F  0A34               	incf	memcpy@n+1,w
 18562  2590  1903               	btfsc	3,2
 18563  2591  0008               	return
 18564  2592  0839               	movf	memcpy@s,w
 18565  2593  0086               	movwf	6
 18566  2594  083A               	movf	memcpy@s+1,w
 18567  2595  0087               	movwf	7
 18568  2596  0801               	movf	1,w
 18569  2597  00B5               	movwf	??_memcpy
 18570  2598  0835               	movf	??_memcpy,w
 18571  2599  00B6               	movwf	memcpy@tmp
 18572  259A  3001               	movlw	1
 18573  259B  07B9               	addwf	memcpy@s,f
 18574  259C  3000               	movlw	0
 18575  259D  3DBA               	addwfc	memcpy@s+1,f
 18576  259E  0837               	movf	memcpy@d,w
 18577  259F  0086               	movwf	6
 18578  25A0  0838               	movf	memcpy@d+1,w
 18579  25A1  0087               	movwf	7
 18580  25A2  0836               	movf	memcpy@tmp,w
 18581  25A3  0081               	movwf	1
 18582  25A4  3001               	movlw	1
 18583  25A5  07B7               	addwf	memcpy@d,f
 18584  25A6  3000               	movlw	0
 18585  25A7  3DB8               	addwfc	memcpy@d+1,f
 18586  25A8  2D89               	goto	l4812
 18587  25A9                     __end_of_memcpy:
 18588                           
 18589                           	psect	text59
 18590  2634                     __ptext59:	
 18591 ;; *************** function _Clock_InitializeClockLEDs *****************
 18592 ;; Defined at:
 18593 ;;		line 131 in file "clockLEDs.c"
 18594 ;; Parameters:    Size  Location     Type
 18595 ;;  numElements     2   19[BANK0 ] const unsigned int 
 18596 ;;  digitRed        1   21[BANK0 ] const unsigned char 
 18597 ;;  digitGreen      1   22[BANK0 ] const unsigned char 
 18598 ;;  digitBlue       1   23[BANK0 ] const unsigned char 
 18599 ;;  backgroundRe    1   24[BANK0 ] const unsigned char 
 18600 ;;  backgroundGr    1   25[BANK0 ] const unsigned char 
 18601 ;;  backgroundBl    1   26[BANK0 ] const unsigned char 
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;  returnVal       1   29[BANK0 ] _Bool 
 18604 ;; Return value:  Size  Location     Type
 18605 ;;                  1    wreg      _Bool 
 18606 ;; Registers used:
 18607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18613 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18616 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18617 ;;Total ram usage:       11 bytes
 18618 ;; Hardware stack levels used: 1
 18619 ;; Hardware stack levels required when called: 6
 18620 ;; This function calls:
 18621 ;;		_Clock_SetBackgroundRGBArray
 18622 ;;		_Clock_SetDigitRGBArray
 18623 ;;		_WS2812b_Initialize
 18624 ;; This function is called by:
 18625 ;;		_APP_Initialize
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629  2634                     _Clock_InitializeClockLEDs:	
 18630                           ;psect for function _Clock_InitializeClockLEDs
 18631                           
 18632                           
 18633                           ;clockLEDs.c: 131: _Bool Clock_InitializeClockLEDs( const size_t numElements,;clockLEDs.
      +                          c: 132:                                 const uint8_t digitRed,;clockLEDs.c: 133:       
      +                                                    const uint8_t digitGreen,;clockLEDs.c: 134:                   
      +                                        const uint8_t digitBlue,;clockLEDs.c: 135:                                
      +                           const uint8_t backgroundRed,;clockLEDs.c: 136:                                 const ui
      +                          nt8_t backgroundGreen,;clockLEDs.c: 137:                                 const uint8_t b
      +                          ackgroundBlue )
 18634                           
 18635                           ;incstack = 0
 18636                           ; Regs used in _Clock_InitializeClockLEDs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 18637  2634  0020               	movlb	0	; select bank0
 18638  2635  0837               	movf	Clock_InitializeClockLEDs@digitGreen,w
 18639  2636  00BC               	movwf	??_Clock_InitializeClockLEDs
 18640  2637  083C               	movf	??_Clock_InitializeClockLEDs,w
 18641  2638  00AF               	movwf	Clock_SetDigitRGBArray@green
 18642  2639  0838               	movf	Clock_InitializeClockLEDs@digitBlue,w
 18643  263A  00BD               	movwf	??_Clock_InitializeClockLEDs+1
 18644  263B  083D               	movf	??_Clock_InitializeClockLEDs+1,w
 18645  263C  00B0               	movwf	Clock_SetDigitRGBArray@blue
 18646  263D  0836               	movf	Clock_InitializeClockLEDs@digitRed,w
 18647  263E  31A4  240B  31A6   	fcall	_Clock_SetDigitRGBArray
 18648                           
 18649                           ;clockLEDs.c: 143:     Clock_SetBackgroundRGBArray( backgroundRed,
 18650  2641  0020               	movlb	0	; select bank0
 18651  2642  083A               	movf	Clock_InitializeClockLEDs@backgroundGreen,w
 18652  2643  00BC               	movwf	??_Clock_InitializeClockLEDs
 18653  2644  083C               	movf	??_Clock_InitializeClockLEDs,w
 18654  2645  00AF               	movwf	Clock_SetBackgroundRGBArray@green
 18655  2646  083B               	movf	Clock_InitializeClockLEDs@backgroundBlue,w
 18656  2647  00BD               	movwf	??_Clock_InitializeClockLEDs+1
 18657  2648  083D               	movf	??_Clock_InitializeClockLEDs+1,w
 18658  2649  00B0               	movwf	Clock_SetBackgroundRGBArray@blue
 18659  264A  0839               	movf	Clock_InitializeClockLEDs@backgroundRed,w
 18660  264B  31A3  23F7  31A6   	fcall	_Clock_SetBackgroundRGBArray
 18661                           
 18662                           ;clockLEDs.c: 146:     _Bool returnVal;;clockLEDs.c: 147:     ledArray = WS2812b_Initial
      +                          ize( renderBuffer, numElements, &returnVal );
 18663  264E  3030               	movlw	48
 18664  264F  0020               	movlb	0	; select bank0
 18665  2650  00A9               	movwf	WS2812b_Initialize@pxBuff
 18666  2651  3027               	movlw	39
 18667  2652  00AA               	movwf	WS2812b_Initialize@pxBuff+1
 18668  2653  0835               	movf	Clock_InitializeClockLEDs@numElements+1,w
 18669  2654  00AC               	movwf	WS2812b_Initialize@numElements+1
 18670  2655  0834               	movf	Clock_InitializeClockLEDs@numElements,w
 18671  2656  00AB               	movwf	WS2812b_Initialize@numElements
 18672  2657  303E               	movlw	(low (Clock_InitializeClockLEDs@returnVal| 0))& (0+255)
 18673  2658  00BC               	movwf	??_Clock_InitializeClockLEDs
 18674  2659  083C               	movf	??_Clock_InitializeClockLEDs,w
 18675  265A  00AD               	movwf	WS2812b_Initialize@wasSetupSuccessful
 18676  265B  31A5  2557         	fcall	_WS2812b_Initialize
 18677  265D  0020               	movlb	0	; select bank0
 18678  265E  082C               	movf	?_WS2812b_Initialize+3,w
 18679  265F  00E5               	movwf	_ledArray+3
 18680  2660  082B               	movf	?_WS2812b_Initialize+2,w
 18681  2661  00E4               	movwf	_ledArray+2
 18682  2662  082A               	movf	?_WS2812b_Initialize+1,w
 18683  2663  00E3               	movwf	_ledArray+1
 18684  2664  0829               	movf	?_WS2812b_Initialize,w
 18685  2665  00E2               	movwf	_ledArray
 18686  2666  0008               	return
 18687  2667                     __end_of_Clock_InitializeClockLEDs:
 18688                           
 18689                           	psect	text60
 18690  2557                     __ptext60:	
 18691 ;; *************** function _WS2812b_Initialize *****************
 18692 ;; Defined at:
 18693 ;;		line 38 in file "ws2812b.c"
 18694 ;; Parameters:    Size  Location     Type
 18695 ;;  pxBuff          2    8[BANK0 ] PTR struct .
 18696 ;;		 -> renderBuffer(192), 
 18697 ;;  numElements     2   10[BANK0 ] const unsigned int 
 18698 ;;  wasSetupSucc    1   12[BANK0 ] const PTR _Bool 
 18699 ;;		 -> Clock_InitializeClockLEDs@returnVal(1), 
 18700 ;; Auto vars:     Size  Location     Type
 18701 ;;  array           4   15[BANK0 ] struct .
 18702 ;; Return value:  Size  Location     Type
 18703 ;;                  4    8[BANK0 ] struct .
 18704 ;; Registers used:
 18705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18706 ;; Tracked objects:
 18707 ;;		On entry : 0/0
 18708 ;;		On exit  : 0/0
 18709 ;;		Unchanged: 0/0
 18710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18711 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18712 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18714 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18715 ;;Total ram usage:       11 bytes
 18716 ;; Hardware stack levels used: 1
 18717 ;; Hardware stack levels required when called: 5
 18718 ;; This function calls:
 18719 ;;		Nothing
 18720 ;; This function is called by:
 18721 ;;		_Clock_InitializeClockLEDs
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725  2557                     _WS2812b_Initialize:	
 18726                           ;psect for function _WS2812b_Initialize
 18727                           
 18728                           
 18729                           ;ws2812b.c: 38: ws2812bArray WS2812b_Initialize( ws2812bPixel * pxBuff,;ws2812b.c: 39:  
      +                                                          const size_t numElements,;ws2812b.c: 40:                
      +                                            _Bool * const wasSetupSuccessful );ws2812b.c: 41: {;ws2812b.c: 42:    
      +                           ws2812bArray array;;ws2812b.c: 43:     array.pixelBuffer = pxBuff;
 18730                           
 18731                           ;incstack = 0
 18732                           ; Regs used in _WS2812b_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0]
 18733  2557  0020               	movlb	0	; select bank0
 18734  2558  082A               	movf	WS2812b_Initialize@pxBuff+1,w
 18735  2559  00B1               	movwf	WS2812b_Initialize@array+1
 18736  255A  0829               	movf	WS2812b_Initialize@pxBuff,w
 18737  255B  00B0               	movwf	WS2812b_Initialize@array
 18738                           
 18739                           ;ws2812b.c: 44:     array.numPixels = numElements;
 18740  255C  082C               	movf	WS2812b_Initialize@numElements+1,w
 18741  255D  00B3               	movwf	WS2812b_Initialize@array+3
 18742  255E  082B               	movf	WS2812b_Initialize@numElements,w
 18743  255F  00B2               	movwf	WS2812b_Initialize@array+2
 18744                           
 18745                           ;ws2812b.c: 45:     *wasSetupSuccessful = ( ( ((void*)0) == pxBuff ) || ( 0 == numElemen
      +                          ts ) ) ? 0 : 1;
 18746  2560  01AF               	clrf	_WS2812b_Initialize$1153
 18747  2561  0829               	movf	WS2812b_Initialize@pxBuff,w
 18748  2562  042A               	iorwf	WS2812b_Initialize@pxBuff+1,w
 18749  2563  1903               	btfsc	3,2
 18750  2564  2D6B               	goto	l3908
 18751  2565  082B               	movf	WS2812b_Initialize@numElements,w
 18752  2566  042C               	iorwf	WS2812b_Initialize@numElements+1,w
 18753  2567  1903               	btfsc	3,2
 18754  2568  2D6B               	goto	l3908
 18755  2569  01AF               	clrf	_WS2812b_Initialize$1153
 18756  256A  0AAF               	incf	_WS2812b_Initialize$1153,f
 18757  256B                     l3908:
 18758  256B  082F               	movf	_WS2812b_Initialize$1153,w
 18759  256C  1903               	btfsc	3,2
 18760  256D  2D70               	goto	u2730
 18761  256E  3001               	movlw	1
 18762  256F  2D71               	goto	u2740
 18763  2570                     u2730:
 18764  2570  3000               	movlw	0
 18765  2571                     u2740:
 18766  2571  00AE               	movwf	??_WS2812b_Initialize
 18767  2572  082D               	movf	WS2812b_Initialize@wasSetupSuccessful,w
 18768  2573  0086               	movwf	6
 18769  2574  0187               	clrf	7
 18770  2575  082E               	movf	??_WS2812b_Initialize,w
 18771  2576  0081               	movwf	1
 18772                           
 18773                           ;ws2812b.c: 46:     return array;
 18774  2577  0833               	movf	WS2812b_Initialize@array+3,w
 18775  2578  00AC               	movwf	?_WS2812b_Initialize+3
 18776  2579  0832               	movf	WS2812b_Initialize@array+2,w
 18777  257A  00AB               	movwf	?_WS2812b_Initialize+2
 18778  257B  0831               	movf	WS2812b_Initialize@array+1,w
 18779  257C  00AA               	movwf	?_WS2812b_Initialize+1
 18780  257D  0830               	movf	WS2812b_Initialize@array,w
 18781  257E  00A9               	movwf	?_WS2812b_Initialize
 18782  257F  0008               	return
 18783  2580                     __end_of_WS2812b_Initialize:
 18784                           
 18785                           	psect	text61
 18786  240B                     __ptext61:	
 18787 ;; *************** function _Clock_SetDigitRGBArray *****************
 18788 ;; Defined at:
 18789 ;;		line 160 in file "clockLEDs.c"
 18790 ;; Parameters:    Size  Location     Type
 18791 ;;  red             1    wreg     const unsigned char 
 18792 ;;  green           1   14[BANK0 ] const unsigned char 
 18793 ;;  blue            1   15[BANK0 ] const unsigned char 
 18794 ;; Auto vars:     Size  Location     Type
 18795 ;;  red             1   17[BANK0 ] const unsigned char 
 18796 ;; Return value:  Size  Location     Type
 18797 ;;                  1    wreg      void 
 18798 ;; Registers used:
 18799 ;;		wreg
 18800 ;; Tracked objects:
 18801 ;;		On entry : 0/0
 18802 ;;		On exit  : 0/0
 18803 ;;		Unchanged: 0/0
 18804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18808 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18809 ;;Total ram usage:        4 bytes
 18810 ;; Hardware stack levels used: 1
 18811 ;; Hardware stack levels required when called: 5
 18812 ;; This function calls:
 18813 ;;		Nothing
 18814 ;; This function is called by:
 18815 ;;		_STATE_ChangeColorMode
 18816 ;;		_Clock_InitializeClockLEDs
 18817 ;; This function uses a non-reentrant model
 18818 ;;
 18819                           
 18820  240B                     _Clock_SetDigitRGBArray:	
 18821                           ;psect for function _Clock_SetDigitRGBArray
 18822                           
 18823                           
 18824                           ;incstack = 0
 18825                           ; Regs used in _Clock_SetDigitRGBArray: [wreg]
 18826                           ;Clock_SetDigitRGBArray@red stored from wreg
 18827  240B  0020               	movlb	0	; select bank0
 18828  240C  00B2               	movwf	Clock_SetDigitRGBArray@red
 18829                           
 18830                           ;clockLEDs.c: 160: void Clock_SetDigitRGBArray( const uint8_t red,;clockLEDs.c: 161:    
      +                                                    const uint8_t green,;clockLEDs.c: 162:                        
      +                                const uint8_t blue );clockLEDs.c: 163: {;clockLEDs.c: 164:     currentDIGITrgbArra
      +                          y[0] = red;
 18831  240D  0832               	movf	Clock_SetDigitRGBArray@red,w
 18832  240E  00B1               	movwf	??_Clock_SetDigitRGBArray
 18833  240F  0831               	movf	??_Clock_SetDigitRGBArray,w
 18834  2410  0021               	movlb	1	; select bank1
 18835  2411  00CB               	movwf	_currentDIGITrgbArray^(0+128)
 18836                           
 18837                           ;clockLEDs.c: 165:     currentDIGITrgbArray[1] = green;
 18838  2412  0020               	movlb	0	; select bank0
 18839  2413  082F               	movf	Clock_SetDigitRGBArray@green,w
 18840  2414  00B1               	movwf	??_Clock_SetDigitRGBArray
 18841  2415  0831               	movf	??_Clock_SetDigitRGBArray,w
 18842  2416  0021               	movlb	1	; select bank1
 18843  2417  00CC               	movwf	(_currentDIGITrgbArray^(0+128)+1)
 18844                           
 18845                           ;clockLEDs.c: 166:     currentDIGITrgbArray[2] = blue;
 18846  2418  0020               	movlb	0	; select bank0
 18847  2419  0830               	movf	Clock_SetDigitRGBArray@blue,w
 18848  241A  00B1               	movwf	??_Clock_SetDigitRGBArray
 18849  241B  0831               	movf	??_Clock_SetDigitRGBArray,w
 18850  241C  0021               	movlb	1	; select bank1
 18851  241D  00CD               	movwf	(_currentDIGITrgbArray^(0+128)+2)
 18852  241E  0008               	return
 18853  241F                     __end_of_Clock_SetDigitRGBArray:
 18854                           
 18855                           	psect	text62
 18856  23F7                     __ptext62:	
 18857 ;; *************** function _Clock_SetBackgroundRGBArray *****************
 18858 ;; Defined at:
 18859 ;;		line 151 in file "clockLEDs.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;  red             1    wreg     const unsigned char 
 18862 ;;  green           1   14[BANK0 ] const unsigned char 
 18863 ;;  blue            1   15[BANK0 ] const unsigned char 
 18864 ;; Auto vars:     Size  Location     Type
 18865 ;;  red             1   17[BANK0 ] const unsigned char 
 18866 ;; Return value:  Size  Location     Type
 18867 ;;                  1    wreg      void 
 18868 ;; Registers used:
 18869 ;;		wreg
 18870 ;; Tracked objects:
 18871 ;;		On entry : 0/0
 18872 ;;		On exit  : 0/0
 18873 ;;		Unchanged: 0/0
 18874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18878 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18879 ;;Total ram usage:        4 bytes
 18880 ;; Hardware stack levels used: 1
 18881 ;; Hardware stack levels required when called: 5
 18882 ;; This function calls:
 18883 ;;		Nothing
 18884 ;; This function is called by:
 18885 ;;		_STATE_ChangeColorMode
 18886 ;;		_Clock_InitializeClockLEDs
 18887 ;; This function uses a non-reentrant model
 18888 ;;
 18889                           
 18890  23F7                     _Clock_SetBackgroundRGBArray:	
 18891                           ;psect for function _Clock_SetBackgroundRGBArray
 18892                           
 18893                           
 18894                           ;incstack = 0
 18895                           ; Regs used in _Clock_SetBackgroundRGBArray: [wreg]
 18896                           ;Clock_SetBackgroundRGBArray@red stored from wreg
 18897  23F7  0020               	movlb	0	; select bank0
 18898  23F8  00B2               	movwf	Clock_SetBackgroundRGBArray@red
 18899                           
 18900                           ;clockLEDs.c: 151: void Clock_SetBackgroundRGBArray( const uint8_t red,;clockLEDs.c: 152
      +                          :                                   const uint8_t green,;clockLEDs.c: 153:              
      +                                               const uint8_t blue );clockLEDs.c: 154: {;clockLEDs.c: 155:     curr
      +                          entBACKGROUNDrgbArray[0] = red;
 18901  23F9  0832               	movf	Clock_SetBackgroundRGBArray@red,w
 18902  23FA  00B1               	movwf	??_Clock_SetBackgroundRGBArray
 18903  23FB  0831               	movf	??_Clock_SetBackgroundRGBArray,w
 18904  23FC  0021               	movlb	1	; select bank1
 18905  23FD  00C8               	movwf	_currentBACKGROUNDrgbArray^(0+128)
 18906                           
 18907                           ;clockLEDs.c: 156:     currentBACKGROUNDrgbArray[1] = green;
 18908  23FE  0020               	movlb	0	; select bank0
 18909  23FF  082F               	movf	Clock_SetBackgroundRGBArray@green,w
 18910  2400  00B1               	movwf	??_Clock_SetBackgroundRGBArray
 18911  2401  0831               	movf	??_Clock_SetBackgroundRGBArray,w
 18912  2402  0021               	movlb	1	; select bank1
 18913  2403  00C9               	movwf	(_currentBACKGROUNDrgbArray^(0+128)+1)
 18914                           
 18915                           ;clockLEDs.c: 157:     currentBACKGROUNDrgbArray[2] = blue;
 18916  2404  0020               	movlb	0	; select bank0
 18917  2405  0830               	movf	Clock_SetBackgroundRGBArray@blue,w
 18918  2406  00B1               	movwf	??_Clock_SetBackgroundRGBArray
 18919  2407  0831               	movf	??_Clock_SetBackgroundRGBArray,w
 18920  2408  0021               	movlb	1	; select bank1
 18921  2409  00CA               	movwf	(_currentBACKGROUNDrgbArray^(0+128)+2)
 18922  240A  0008               	return
 18923  240B                     __end_of_Clock_SetBackgroundRGBArray:
 18924                           
 18925                           	psect	text63
 18926  27B3                     __ptext63:	
 18927 ;; *************** function _CRC16_Calculate16bitCRC *****************
 18928 ;; Defined at:
 18929 ;;		line 66 in file "CRC16bit.c"
 18930 ;; Parameters:    Size  Location     Type
 18931 ;;  data            2    8[BANK0 ] const PTR const unsigned
 18932 ;;		 -> APP_Initialize@eepromReadbackData(8), STATE_ChangeColorMode@eepromReadbackData(8), STATE_ChangeColorMode@backgro
      +undSelection(3), STATE_ChangeColorMode@digitSelection(3), 
 18933 ;;  size            2   10[BANK0 ] const unsigned int 
 18934 ;;  seed            2   12[BANK0 ] const unsigned short 
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;  crc             2   28[BANK0 ] unsigned short 
 18937 ;;  i               2   26[BANK0 ] unsigned int 
 18938 ;; Return value:  Size  Location     Type
 18939 ;;                  2    8[BANK0 ] unsigned short 
 18940 ;; Registers used:
 18941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 18942 ;; Tracked objects:
 18943 ;;		On entry : 0/0
 18944 ;;		On exit  : 0/0
 18945 ;;		Unchanged: 0/0
 18946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18947 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18948 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18949 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18950 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18951 ;;Total ram usage:       22 bytes
 18952 ;; Hardware stack levels used: 1
 18953 ;; Hardware stack levels required when called: 5
 18954 ;; This function calls:
 18955 ;;		Nothing
 18956 ;; This function is called by:
 18957 ;;		_STATE_ChangeColorMode
 18958 ;;		_APP_Initialize
 18959 ;; This function uses a non-reentrant model
 18960 ;;
 18961                           
 18962  27B3                     _CRC16_Calculate16bitCRC:	
 18963                           ;psect for function _CRC16_Calculate16bitCRC
 18964                           
 18965                           
 18966                           ;CRC16bit.c: 66: uint16_t CRC16_Calculate16bitCRC(const uint8_t* const data,;CRC16bit.c:
      +                           67:                                  const size_t size,;CRC16bit.c: 68:                
      +                                            const uint16_t seed);CRC16bit.c: 69: {;CRC16bit.c: 70:     size_t i;;C
      +                          RC16bit.c: 71:     uint16_t crc = seed;
 18967                           
 18968                           ;incstack = 0
 18969                           ; Regs used in _CRC16_Calculate16bitCRC: [wreg-fsr1h+status,2+status,0+pclath]
 18970  27B3  0020               	movlb	0	; select bank0
 18971  27B4  082E               	movf	CRC16_Calculate16bitCRC@seed+1,w
 18972  27B5  00BE               	movwf	CRC16_Calculate16bitCRC@crc+1
 18973  27B6  082D               	movf	CRC16_Calculate16bitCRC@seed,w
 18974  27B7  00BD               	movwf	CRC16_Calculate16bitCRC@crc
 18975                           
 18976                           ;CRC16bit.c: 73:     for (i = 0; i < size; i++)
 18977  27B8  01BB               	clrf	CRC16_Calculate16bitCRC@i
 18978  27B9  01BC               	clrf	CRC16_Calculate16bitCRC@i+1
 18979  27BA  082B               	movf	CRC16_Calculate16bitCRC@size,w
 18980  27BB  042C               	iorwf	CRC16_Calculate16bitCRC@size+1,w
 18981  27BC  1903               	btfsc	3,2
 18982  27BD  2FFB               	goto	l5942
 18983  27BE                     l5936:
 18984                           
 18985                           ;CRC16bit.c: 74:     {;CRC16bit.c: 75:         crc = (crc << 8) ^ CRCtbl[((crc >> 8) ^ d
      +                          ata[i]) & 0x00FF];
 18986  27BE  083B               	movf	CRC16_Calculate16bitCRC@i,w
 18987  27BF  0729               	addwf	CRC16_Calculate16bitCRC@data,w
 18988  27C0  0086               	movwf	6
 18989  27C1  083C               	movf	CRC16_Calculate16bitCRC@i+1,w
 18990  27C2  3D2A               	addwfc	CRC16_Calculate16bitCRC@data+1,w
 18991  27C3  0087               	movwf	7
 18992  27C4  0801               	movf	1,w
 18993  27C5  00AF               	movwf	??_CRC16_Calculate16bitCRC
 18994  27C6  01B0               	clrf	??_CRC16_Calculate16bitCRC+1
 18995  27C7  083E               	movf	CRC16_Calculate16bitCRC@crc+1,w
 18996  27C8  00B2               	movwf	??_CRC16_Calculate16bitCRC+3
 18997  27C9  083D               	movf	CRC16_Calculate16bitCRC@crc,w
 18998  27CA  00B1               	movwf	??_CRC16_Calculate16bitCRC+2
 18999  27CB  0832               	movf	??_CRC16_Calculate16bitCRC+3,w
 19000  27CC  00B1               	movwf	??_CRC16_Calculate16bitCRC+2
 19001  27CD  01B2               	clrf	??_CRC16_Calculate16bitCRC+3
 19002  27CE  082F               	movf	??_CRC16_Calculate16bitCRC,w
 19003  27CF  0631               	xorwf	??_CRC16_Calculate16bitCRC+2,w
 19004  27D0  00B3               	movwf	??_CRC16_Calculate16bitCRC+4
 19005  27D1  0830               	movf	??_CRC16_Calculate16bitCRC+1,w
 19006  27D2  0632               	xorwf	??_CRC16_Calculate16bitCRC+3,w
 19007  27D3  00B4               	movwf	??_CRC16_Calculate16bitCRC+5
 19008  27D4  30FF               	movlw	255
 19009  27D5  0533               	andwf	??_CRC16_Calculate16bitCRC+4,w
 19010  27D6  00B5               	movwf	??_CRC16_Calculate16bitCRC+6
 19011  27D7  3000               	movlw	0
 19012  27D8  0534               	andwf	??_CRC16_Calculate16bitCRC+5,w
 19013  27D9  00B6               	movwf	??_CRC16_Calculate16bitCRC+7
 19014  27DA  35B5               	lslf	??_CRC16_Calculate16bitCRC+6,f
 19015  27DB  0DB6               	rlf	??_CRC16_Calculate16bitCRC+7,f
 19016  27DC  3000               	movlw	low (_CRCtbl| (0+32768))
 19017  27DD  0735               	addwf	??_CRC16_Calculate16bitCRC+6,w
 19018  27DE  0084               	movwf	4
 19019  27DF  3098               	movlw	high (_CRCtbl| (0+32768))
 19020  27E0  3D36               	addwfc	??_CRC16_Calculate16bitCRC+7,w
 19021  27E1  0085               	movwf	5
 19022  27E2  3F00               	moviw [0]fsr0
 19023  27E3  00B7               	movwf	??_CRC16_Calculate16bitCRC+8
 19024  27E4  3F01               	moviw [1]fsr0
 19025  27E5  00B8               	movwf	??_CRC16_Calculate16bitCRC+9
 19026  27E6  083D               	movf	CRC16_Calculate16bitCRC@crc,w
 19027  27E7  00BA               	movwf	??_CRC16_Calculate16bitCRC+11
 19028  27E8  01B9               	clrf	??_CRC16_Calculate16bitCRC+10
 19029  27E9  0837               	movf	??_CRC16_Calculate16bitCRC+8,w
 19030  27EA  0639               	xorwf	??_CRC16_Calculate16bitCRC+10,w
 19031  27EB  00BD               	movwf	CRC16_Calculate16bitCRC@crc
 19032  27EC  0838               	movf	??_CRC16_Calculate16bitCRC+9,w
 19033  27ED  063A               	xorwf	??_CRC16_Calculate16bitCRC+11,w
 19034  27EE  00BE               	movwf	CRC16_Calculate16bitCRC@crc+1
 19035                           
 19036                           ;CRC16bit.c: 76:     }
 19037  27EF  3001               	movlw	1
 19038  27F0  07BB               	addwf	CRC16_Calculate16bitCRC@i,f
 19039  27F1  3000               	movlw	0
 19040  27F2  3DBC               	addwfc	CRC16_Calculate16bitCRC@i+1,f
 19041  27F3  082C               	movf	CRC16_Calculate16bitCRC@size+1,w
 19042  27F4  023C               	subwf	CRC16_Calculate16bitCRC@i+1,w
 19043  27F5  1D03               	skipz
 19044  27F6  2FF9               	goto	u4755
 19045  27F7  082B               	movf	CRC16_Calculate16bitCRC@size,w
 19046  27F8  023B               	subwf	CRC16_Calculate16bitCRC@i,w
 19047  27F9                     u4755:
 19048  27F9  1C03               	skipc
 19049  27FA  2FBE               	goto	l5936
 19050  27FB                     l5942:
 19051                           
 19052                           ;CRC16bit.c: 77:     return (crc);
 19053  27FB  083E               	movf	CRC16_Calculate16bitCRC@crc+1,w
 19054  27FC  00AA               	movwf	?_CRC16_Calculate16bitCRC+1
 19055  27FD  083D               	movf	CRC16_Calculate16bitCRC@crc,w
 19056  27FE  00A9               	movwf	?_CRC16_Calculate16bitCRC
 19057  27FF  0008               	return
 19058  2800                     __end_of_CRC16_Calculate16bitCRC:
 19059                           
 19060                           	psect	intentry
 19061  0004                     __pintentry:	
 19062 ;; *************** function _INTERRUPT_InterruptManager *****************
 19063 ;; Defined at:
 19064 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;		None
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;		None
 19069 ;; Return value:  Size  Location     Type
 19070 ;;                  1    wreg      void 
 19071 ;; Registers used:
 19072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19082 ;;Total ram usage:        0 bytes
 19083 ;; Hardware stack levels used: 1
 19084 ;; Hardware stack levels required when called: 4
 19085 ;; This function calls:
 19086 ;;		_PIN_MANAGER_IOC
 19087 ;;		_TMR1_ISR
 19088 ;;		_TMR5_ISR
 19089 ;; This function is called by:
 19090 ;;		Interrupt level 1
 19091 ;; This function uses a non-reentrant model
 19092 ;;
 19093                           
 19094  0004                     _INTERRUPT_InterruptManager:
 19095                           
 19096                           ;incstack = 0
 19097  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19098                           
 19099                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19100  0005  3180               	pagesel	$
 19101                           
 19102                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 19103  0006  0021               	movlb	1	; select bank1
 19104  0007  1E10               	btfss	16,4	;volatile
 19105  0008  2810               	goto	i1l239
 19106  0009  0020               	movlb	0	; select bank0
 19107  000A  1E10               	btfss	16,4	;volatile
 19108  000B  2810               	goto	i1l239
 19109                           
 19110                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 19111  000C  3187  27EE  3180   	fcall	_PIN_MANAGER_IOC
 19112                           
 19113                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 19114  000F  2824               	goto	i1l247
 19115  0010                     i1l239:	
 19116                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 19117                           
 19118  0010  1F0B               	btfss	11,6	;volatile
 19119  0011  2824               	goto	i1l247
 19120                           
 19121                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE4bits.TMR5IE == 1 && PIR4bits.TMR5IF == 1)
 19122  0012  0021               	movlb	1	; select bank1
 19123  0013  1E14               	btfss	20,4	;volatile
 19124  0014  281C               	goto	i1l242
 19125  0015  0020               	movlb	0	; select bank0
 19126  0016  1E14               	btfss	20,4	;volatile
 19127  0017  281C               	goto	i1l242
 19128                           
 19129                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR5_ISR();
 19130  0018  31A3  2376  3180   	fcall	_TMR5_ISR
 19131                           
 19132                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 19133  001B  2824               	goto	i1l247
 19134  001C                     i1l242:	
 19135                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 19136                           
 19137  001C  0021               	movlb	1	; select bank1
 19138  001D  1C11               	btfss	17,0	;volatile
 19139  001E  2824               	goto	i1l247
 19140  001F  0020               	movlb	0	; select bank0
 19141  0020  1C11               	btfss	17,0	;volatile
 19142  0021  2824               	goto	i1l247
 19143                           
 19144                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR1_ISR();
 19145  0022  31A3  2369         	fcall	_TMR1_ISR
 19146  0024                     i1l247:	
 19147                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 19148                           
 19149                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 19150                           
 19151  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19152  0025  0009               	retfie
 19153  0026                     __end_of_INTERRUPT_InterruptManager:
 19154                           
 19155                           	psect	text65
 19156  2376                     __ptext65:	
 19157 ;; *************** function _TMR5_ISR *****************
 19158 ;; Defined at:
 19159 ;;		line 157 in file "mcc_generated_files/tmr5.c"
 19160 ;; Parameters:    Size  Location     Type
 19161 ;;		None
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;		None
 19164 ;; Return value:  Size  Location     Type
 19165 ;;                  1    wreg      void 
 19166 ;; Registers used:
 19167 ;;		wreg, status,2, status,0, pclath, cstack
 19168 ;; Tracked objects:
 19169 ;;		On entry : 0/0
 19170 ;;		On exit  : 0/0
 19171 ;;		Unchanged: 0/0
 19172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19177 ;;Total ram usage:        0 bytes
 19178 ;; Hardware stack levels used: 1
 19179 ;; Hardware stack levels required when called: 2
 19180 ;; This function calls:
 19181 ;;		_TMR5_CallBack
 19182 ;;		_TMR5_WriteTimer
 19183 ;; This function is called by:
 19184 ;;		_INTERRUPT_InterruptManager
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188  2376                     _TMR5_ISR:	
 19189                           ;psect for function _TMR5_ISR
 19190                           
 19191                           
 19192                           ;mcc_generated_files/tmr5.c: 161:     PIR4bits.TMR5IF = 0;
 19193                           
 19194                           ;incstack = 0
 19195                           ; Regs used in _TMR5_ISR: [wreg+status,2+status,0+pclath+cstack]
 19196  2376  0020               	movlb	0	; select bank0
 19197  2377  1214               	bcf	20,4	;volatile
 19198                           
 19199                           ;mcc_generated_files/tmr5.c: 162:     TMR5_WriteTimer(timer5ReloadVal);
 19200  2378  0021               	movlb	1	; select bank1
 19201  2379  0854               	movf	(_timer5ReloadVal+1)^(0+128),w	;volatile
 19202  237A  00F1               	movwf	TMR5_WriteTimer@timerVal+1
 19203  237B  0853               	movf	_timer5ReloadVal^(0+128),w	;volatile
 19204  237C  00F0               	movwf	TMR5_WriteTimer@timerVal
 19205  237D  31A3  2392  31A3   	fcall	_TMR5_WriteTimer
 19206                           
 19207                           ;mcc_generated_files/tmr5.c: 166:     TMR5_CallBack();
 19208  2380  31A3  2307         	fcall	_TMR5_CallBack
 19209  2382  0008               	return
 19210  2383                     __end_of_TMR5_ISR:
 19211                           
 19212                           	psect	text66
 19213  2392                     __ptext66:	
 19214 ;; *************** function _TMR5_WriteTimer *****************
 19215 ;; Defined at:
 19216 ;;		line 120 in file "mcc_generated_files/tmr5.c"
 19217 ;; Parameters:    Size  Location     Type
 19218 ;;  timerVal        2    0[COMMON] unsigned short 
 19219 ;; Auto vars:     Size  Location     Type
 19220 ;;		None
 19221 ;; Return value:  Size  Location     Type
 19222 ;;                  1    wreg      void 
 19223 ;; Registers used:
 19224 ;;		wreg, status,2
 19225 ;; Tracked objects:
 19226 ;;		On entry : 0/0
 19227 ;;		On exit  : 0/0
 19228 ;;		Unchanged: 0/0
 19229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19230 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19233 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19234 ;;Total ram usage:        2 bytes
 19235 ;; Hardware stack levels used: 1
 19236 ;; This function calls:
 19237 ;;		Nothing
 19238 ;; This function is called by:
 19239 ;;		_TMR5_ISR
 19240 ;;		_TMR5_Reload
 19241 ;; This function uses a non-reentrant model
 19242 ;;
 19243                           
 19244  2392                     _TMR5_WriteTimer:	
 19245                           ;psect for function _TMR5_WriteTimer
 19246                           
 19247                           
 19248                           ;mcc_generated_files/tmr5.c: 120: void TMR5_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr5.c: 121: {;mcc_generated_files/tmr5.c: 122:     if (T5CONbits.T5SYNC == 1)
 19249                           
 19250                           ;incstack = 0
 19251                           ; Regs used in _TMR5_WriteTimer: [wreg+status,2]
 19252  2392  0028               	movlb	8	; select bank8
 19253  2393  1D1A               	btfss	26,2	;volatile
 19254  2394  2B9C               	goto	i1l4298
 19255                           
 19256                           ;mcc_generated_files/tmr5.c: 123:     {;mcc_generated_files/tmr5.c: 125:         T5CONbi
      +                          ts.TMR5ON = 0;
 19257  2395  101A               	bcf	26,0	;volatile
 19258                           
 19259                           ;mcc_generated_files/tmr5.c: 128:         TMR5H = (uint8_t)(timerVal >> 8);
 19260  2396  0871               	movf	TMR5_WriteTimer@timerVal+1,w
 19261  2397  0099               	movwf	25	;volatile
 19262                           
 19263                           ;mcc_generated_files/tmr5.c: 129:         TMR5L = (uint8_t)timerVal;
 19264  2398  0870               	movf	TMR5_WriteTimer@timerVal,w
 19265  2399  0098               	movwf	24	;volatile
 19266                           
 19267                           ;mcc_generated_files/tmr5.c: 132:         T5CONbits.TMR5ON =1;
 19268  239A  141A               	bsf	26,0	;volatile
 19269                           
 19270                           ;mcc_generated_files/tmr5.c: 133:     }
 19271  239B  0008               	return
 19272  239C                     i1l4298:
 19273                           
 19274                           ;mcc_generated_files/tmr5.c: 135:     {;mcc_generated_files/tmr5.c: 137:         TMR5H =
      +                           (uint8_t)(timerVal >> 8);
 19275  239C  0871               	movf	TMR5_WriteTimer@timerVal+1,w
 19276  239D  0099               	movwf	25	;volatile
 19277                           
 19278                           ;mcc_generated_files/tmr5.c: 138:         TMR5L = (uint8_t)timerVal;
 19279  239E  0870               	movf	TMR5_WriteTimer@timerVal,w
 19280  239F  0098               	movwf	24	;volatile
 19281  23A0  0008               	return
 19282  23A1                     __end_of_TMR5_WriteTimer:
 19283                           
 19284                           	psect	text67
 19285  2307                     __ptext67:	
 19286 ;; *************** function _TMR5_CallBack *****************
 19287 ;; Defined at:
 19288 ;;		line 169 in file "mcc_generated_files/tmr5.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;		None
 19291 ;; Auto vars:     Size  Location     Type
 19292 ;;		None
 19293 ;; Return value:  Size  Location     Type
 19294 ;;                  1    wreg      void 
 19295 ;; Registers used:
 19296 ;;		wreg, status,2, status,0, pclath, cstack
 19297 ;; Tracked objects:
 19298 ;;		On entry : 0/0
 19299 ;;		On exit  : 0/0
 19300 ;;		Unchanged: 0/0
 19301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19306 ;;Total ram usage:        0 bytes
 19307 ;; Hardware stack levels used: 1
 19308 ;; Hardware stack levels required when called: 1
 19309 ;; This function calls:
 19310 ;;		Absolute function
 19311 ;;		_TMR5_DefaultInterruptHandler
 19312 ;;		_Time_IncrementSecondsISR
 19313 ;; This function is called by:
 19314 ;;		_TMR5_ISR
 19315 ;; This function uses a non-reentrant model
 19316 ;;
 19317                           
 19318  2307                     _TMR5_CallBack:	
 19319                           ;psect for function _TMR5_CallBack
 19320                           
 19321                           
 19322                           ;mcc_generated_files/tmr5.c: 172:     if(TMR5_InterruptHandler)
 19323                           
 19324                           ;incstack = 0
 19325                           ; Regs used in _TMR5_CallBack: [wreg+status,2+status,0+pclath+cstack]
 19326  2307  0022               	movlb	2	; select bank2
 19327  2308  084B               	movf	_TMR5_InterruptHandler^(0+256),w
 19328  2309  044C               	iorwf	(_TMR5_InterruptHandler+1)^(0+256),w
 19329  230A  1903               	btfsc	3,2
 19330  230B  0008               	return
 19331                           
 19332                           ;mcc_generated_files/tmr5.c: 173:     {;mcc_generated_files/tmr5.c: 174:         TMR5_In
      +                          terruptHandler();
 19333  230C  084C               	movf	(_TMR5_InterruptHandler+1)^(0+256),w
 19334  230D  008A               	movwf	10
 19335  230E  084B               	movf	_TMR5_InterruptHandler^(0+256),w
 19336  230F  000A               	callw
 19337  2310  31A3               	pagesel	$
 19338  2311  0008               	return
 19339  2312                     __end_of_TMR5_CallBack:
 19340                           
 19341                           	psect	text68
 19342  0002                     __ptext68:	
 19343 ;; *************** function _TMR5_DefaultInterruptHandler *****************
 19344 ;; Defined at:
 19345 ;;		line 182 in file "mcc_generated_files/tmr5.c"
 19346 ;; Parameters:    Size  Location     Type
 19347 ;;		None
 19348 ;; Auto vars:     Size  Location     Type
 19349 ;;		None
 19350 ;; Return value:  Size  Location     Type
 19351 ;;                  1    wreg      void 
 19352 ;; Registers used:
 19353 ;;		None
 19354 ;; Tracked objects:
 19355 ;;		On entry : 0/0
 19356 ;;		On exit  : 0/0
 19357 ;;		Unchanged: 0/0
 19358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19363 ;;Total ram usage:        0 bytes
 19364 ;; Hardware stack levels used: 1
 19365 ;; This function calls:
 19366 ;;		Nothing
 19367 ;; This function is called by:
 19368 ;;		_TMR5_Initialize
 19369 ;;		_TMR5_CallBack
 19370 ;; This function uses a non-reentrant model
 19371 ;;
 19372                           
 19373  0002                     _TMR5_DefaultInterruptHandler:	
 19374                           ;psect for function _TMR5_DefaultInterruptHandler
 19375                           
 19376                           
 19377                           ;incstack = 0
 19378                           ; Regs used in _TMR5_DefaultInterruptHandler: []
 19379  0002  0008               	return
 19380  0003                     __end_of_TMR5_DefaultInterruptHandler:
 19381                           
 19382                           	psect	text69
 19383  1A02                     __ptext69:	
 19384 ;; *************** function _Time_IncrementSecondsISR *****************
 19385 ;; Defined at:
 19386 ;;		line 140 in file "timeCalculation.c"
 19387 ;; Parameters:    Size  Location     Type
 19388 ;;		None
 19389 ;; Auto vars:     Size  Location     Type
 19390 ;;		None
 19391 ;; Return value:  Size  Location     Type
 19392 ;;                  1    wreg      void 
 19393 ;; Registers used:
 19394 ;;		wreg, status,2, status,0
 19395 ;; Tracked objects:
 19396 ;;		On entry : 0/0
 19397 ;;		On exit  : 0/0
 19398 ;;		Unchanged: 0/0
 19399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19402 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19404 ;;Total ram usage:        4 bytes
 19405 ;; Hardware stack levels used: 1
 19406 ;; This function calls:
 19407 ;;		Nothing
 19408 ;; This function is called by:
 19409 ;;		_Time_InitializeTimeModule
 19410 ;;		_TMR5_CallBack
 19411 ;; This function uses a non-reentrant model
 19412 ;;
 19413                           
 19414  1A02                     _Time_IncrementSecondsISR:	
 19415                           ;psect for function _Time_IncrementSecondsISR
 19416                           
 19417                           
 19418                           ;timeCalculation.c: 142:     currentTimeInSeconds = ( currentTimeInSeconds + 1 > 43199u 
      +                          ) ? 0 : currentTimeInSeconds + 1;
 19419                           
 19420                           ;incstack = 0
 19421                           ; Regs used in _Time_IncrementSecondsISR: [wreg+status,2+status,0]
 19422  1A02  3001               	movlw	1
 19423  1A03  00F0               	movwf	??_Time_IncrementSecondsISR
 19424  1A04  3000               	movlw	0
 19425  1A05  00F1               	movwf	??_Time_IncrementSecondsISR+1
 19426  1A06  3000               	movlw	0
 19427  1A07  00F2               	movwf	??_Time_IncrementSecondsISR+2
 19428  1A08  3000               	movlw	0
 19429  1A09  00F3               	movwf	??_Time_IncrementSecondsISR+3
 19430  1A0A  0021               	movlb	1	; select bank1
 19431  1A0B  083B               	movf	_currentTimeInSeconds^(0+128),w	;volatile
 19432  1A0C  07F0               	addwf	??_Time_IncrementSecondsISR,f
 19433  1A0D  083C               	movf	(_currentTimeInSeconds+1)^(0+128),w	;volatile
 19434  1A0E  3DF1               	addwfc	??_Time_IncrementSecondsISR+1,f
 19435  1A0F  083D               	movf	(_currentTimeInSeconds+2)^(0+128),w	;volatile
 19436  1A10  3DF2               	addwfc	??_Time_IncrementSecondsISR+2,f
 19437  1A11  083E               	movf	(_currentTimeInSeconds+3)^(0+128),w	;volatile
 19438  1A12  3DF3               	addwfc	??_Time_IncrementSecondsISR+3,f
 19439  1A13  0873               	movf	??_Time_IncrementSecondsISR+3,w
 19440  1A14  1D03               	btfss	3,2
 19441  1A15  2A39               	goto	i1l3894
 19442  1A16  0872               	movf	??_Time_IncrementSecondsISR+2,w
 19443  1A17  1D03               	btfss	3,2
 19444  1A18  2A39               	goto	i1l3894
 19445  1A19  30C0               	movlw	192
 19446  1A1A  0270               	subwf	??_Time_IncrementSecondsISR,w
 19447  1A1B  30A8               	movlw	168
 19448  1A1C  3B71               	subwfb	??_Time_IncrementSecondsISR+1,w
 19449  1A1D  1803               	btfsc	3,0
 19450  1A1E  2A39               	goto	i1l3894
 19451  1A1F  3001               	movlw	1
 19452  1A20  00F0               	movwf	??_Time_IncrementSecondsISR
 19453  1A21  3000               	movlw	0
 19454  1A22  00F1               	movwf	??_Time_IncrementSecondsISR+1
 19455  1A23  3000               	movlw	0
 19456  1A24  00F2               	movwf	??_Time_IncrementSecondsISR+2
 19457  1A25  3000               	movlw	0
 19458  1A26  00F3               	movwf	??_Time_IncrementSecondsISR+3
 19459  1A27  0021               	movlb	1	; select bank1
 19460  1A28  083B               	movf	_currentTimeInSeconds^(0+128),w	;volatile
 19461  1A29  07F0               	addwf	??_Time_IncrementSecondsISR,f
 19462  1A2A  083C               	movf	(_currentTimeInSeconds+1)^(0+128),w	;volatile
 19463  1A2B  3DF1               	addwfc	??_Time_IncrementSecondsISR+1,f
 19464  1A2C  083D               	movf	(_currentTimeInSeconds+2)^(0+128),w	;volatile
 19465  1A2D  3DF2               	addwfc	??_Time_IncrementSecondsISR+2,f
 19466  1A2E  083E               	movf	(_currentTimeInSeconds+3)^(0+128),w	;volatile
 19467  1A2F  3DF3               	addwfc	??_Time_IncrementSecondsISR+3,f
 19468  1A30  0873               	movf	??_Time_IncrementSecondsISR+3,w
 19469  1A31  00BE               	movwf	(_currentTimeInSeconds+3)^(0+128)	;volatile
 19470  1A32  0872               	movf	??_Time_IncrementSecondsISR+2,w
 19471  1A33  00BD               	movwf	(_currentTimeInSeconds+2)^(0+128)	;volatile
 19472  1A34  0871               	movf	??_Time_IncrementSecondsISR+1,w
 19473  1A35  00BC               	movwf	(_currentTimeInSeconds+1)^(0+128)	;volatile
 19474  1A36  0870               	movf	??_Time_IncrementSecondsISR,w
 19475  1A37  00BB               	movwf	_currentTimeInSeconds^(0+128)	;volatile
 19476  1A38  0008               	return
 19477  1A39                     i1l3894:
 19478  1A39  3000               	movlw	0
 19479  1A3A  0021               	movlb	1	; select bank1
 19480  1A3B  00BE               	movwf	(_currentTimeInSeconds+3)^(0+128)	;volatile
 19481  1A3C  3000               	movlw	0
 19482  1A3D  00BD               	movwf	(_currentTimeInSeconds+2)^(0+128)	;volatile
 19483  1A3E  3000               	movlw	0
 19484  1A3F  00BC               	movwf	(_currentTimeInSeconds+1)^(0+128)	;volatile
 19485  1A40  3000               	movlw	0
 19486  1A41  00BB               	movwf	_currentTimeInSeconds^(0+128)	;volatile
 19487  1A42  0008               	return
 19488  1A43                     __end_of_Time_IncrementSecondsISR:
 19489                           
 19490                           	psect	text70
 19491  2369                     __ptext70:	
 19492 ;; *************** function _TMR1_ISR *****************
 19493 ;; Defined at:
 19494 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 19495 ;; Parameters:    Size  Location     Type
 19496 ;;		None
 19497 ;; Auto vars:     Size  Location     Type
 19498 ;;		None
 19499 ;; Return value:  Size  Location     Type
 19500 ;;                  1    wreg      void 
 19501 ;; Registers used:
 19502 ;;		wreg, status,2, status,0, pclath, cstack
 19503 ;; Tracked objects:
 19504 ;;		On entry : 0/0
 19505 ;;		On exit  : 0/0
 19506 ;;		Unchanged: 0/0
 19507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19512 ;;Total ram usage:        0 bytes
 19513 ;; Hardware stack levels used: 1
 19514 ;; Hardware stack levels required when called: 2
 19515 ;; This function calls:
 19516 ;;		_TMR1_CallBack
 19517 ;;		_TMR1_WriteTimer
 19518 ;; This function is called by:
 19519 ;;		_INTERRUPT_InterruptManager
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523  2369                     _TMR1_ISR:	
 19524                           ;psect for function _TMR1_ISR
 19525                           
 19526                           
 19527                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 19528                           
 19529                           ;incstack = 0
 19530                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 19531  2369  0020               	movlb	0	; select bank0
 19532  236A  1011               	bcf	17,0	;volatile
 19533                           
 19534                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 19535  236B  0021               	movlb	1	; select bank1
 19536  236C  0856               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 19537  236D  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 19538  236E  0855               	movf	_timer1ReloadVal^(0+128),w	;volatile
 19539  236F  00F0               	movwf	TMR1_WriteTimer@timerVal
 19540  2370  31A3  2383  31A3   	fcall	_TMR1_WriteTimer
 19541                           
 19542                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 19543  2373  31A2  22FC         	fcall	_TMR1_CallBack
 19544  2375  0008               	return
 19545  2376                     __end_of_TMR1_ISR:
 19546                           
 19547                           	psect	text71
 19548  2383                     __ptext71:	
 19549 ;; *************** function _TMR1_WriteTimer *****************
 19550 ;; Defined at:
 19551 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 19552 ;; Parameters:    Size  Location     Type
 19553 ;;  timerVal        2    0[COMMON] unsigned short 
 19554 ;; Auto vars:     Size  Location     Type
 19555 ;;		None
 19556 ;; Return value:  Size  Location     Type
 19557 ;;                  1    wreg      void 
 19558 ;; Registers used:
 19559 ;;		wreg, status,2
 19560 ;; Tracked objects:
 19561 ;;		On entry : 0/0
 19562 ;;		On exit  : 0/0
 19563 ;;		Unchanged: 0/0
 19564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19565 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19568 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19569 ;;Total ram usage:        2 bytes
 19570 ;; Hardware stack levels used: 1
 19571 ;; This function calls:
 19572 ;;		Nothing
 19573 ;; This function is called by:
 19574 ;;		_TMR1_ISR
 19575 ;;		_TMR1_Reload
 19576 ;; This function uses a non-reentrant model
 19577 ;;
 19578                           
 19579  2383                     _TMR1_WriteTimer:	
 19580                           ;psect for function _TMR1_WriteTimer
 19581                           
 19582                           
 19583                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
 19584                           
 19585                           ;incstack = 0
 19586                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 19587  2383  0020               	movlb	0	; select bank0
 19588  2384  1D1B               	btfss	27,2	;volatile
 19589  2385  2B8D               	goto	i1l4242
 19590                           
 19591                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 19592  2386  101B               	bcf	27,0	;volatile
 19593                           
 19594                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
 19595  2387  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 19596  2388  009A               	movwf	26	;volatile
 19597                           
 19598                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
 19599  2389  0870               	movf	TMR1_WriteTimer@timerVal,w
 19600  238A  0099               	movwf	25	;volatile
 19601                           
 19602                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 19603  238B  141B               	bsf	27,0	;volatile
 19604                           
 19605                           ;mcc_generated_files/tmr1.c: 133:     }
 19606  238C  0008               	return
 19607  238D                     i1l4242:
 19608                           
 19609                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
 19610  238D  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 19611  238E  009A               	movwf	26	;volatile
 19612                           
 19613                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
 19614  238F  0870               	movf	TMR1_WriteTimer@timerVal,w
 19615  2390  0099               	movwf	25	;volatile
 19616  2391  0008               	return
 19617  2392                     __end_of_TMR1_WriteTimer:
 19618                           
 19619                           	psect	text72
 19620  22FC                     __ptext72:	
 19621 ;; *************** function _TMR1_CallBack *****************
 19622 ;; Defined at:
 19623 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 19624 ;; Parameters:    Size  Location     Type
 19625 ;;		None
 19626 ;; Auto vars:     Size  Location     Type
 19627 ;;		None
 19628 ;; Return value:  Size  Location     Type
 19629 ;;                  1    wreg      void 
 19630 ;; Registers used:
 19631 ;;		wreg, status,2, status,0, pclath, cstack
 19632 ;; Tracked objects:
 19633 ;;		On entry : 0/0
 19634 ;;		On exit  : 0/0
 19635 ;;		Unchanged: 0/0
 19636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19641 ;;Total ram usage:        0 bytes
 19642 ;; Hardware stack levels used: 1
 19643 ;; Hardware stack levels required when called: 1
 19644 ;; This function calls:
 19645 ;;		Absolute function
 19646 ;;		_TMR1_DefaultInterruptHandler
 19647 ;;		_Timer1Interrupt
 19648 ;; This function is called by:
 19649 ;;		_TMR1_ISR
 19650 ;; This function uses a non-reentrant model
 19651 ;;
 19652                           
 19653  22FC                     _TMR1_CallBack:	
 19654                           ;psect for function _TMR1_CallBack
 19655                           
 19656                           
 19657                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 19658                           
 19659                           ;incstack = 0
 19660                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 19661  22FC  0022               	movlb	2	; select bank2
 19662  22FD  084F               	movf	_TMR1_InterruptHandler^(0+256),w
 19663  22FE  0450               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 19664  22FF  1903               	btfsc	3,2
 19665  2300  0008               	return
 19666                           
 19667                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 19668  2301  0850               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 19669  2302  008A               	movwf	10
 19670  2303  084F               	movf	_TMR1_InterruptHandler^(0+256),w
 19671  2304  000A               	callw
 19672  2305  31A2               	pagesel	$
 19673  2306  0008               	return
 19674  2307                     __end_of_TMR1_CallBack:
 19675                           
 19676                           	psect	text73
 19677  1000                     __ptext73:	
 19678 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 19679 ;; Defined at:
 19680 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 19681 ;; Parameters:    Size  Location     Type
 19682 ;;		None
 19683 ;; Auto vars:     Size  Location     Type
 19684 ;;		None
 19685 ;; Return value:  Size  Location     Type
 19686 ;;                  1    wreg      void 
 19687 ;; Registers used:
 19688 ;;		None
 19689 ;; Tracked objects:
 19690 ;;		On entry : 0/0
 19691 ;;		On exit  : 0/0
 19692 ;;		Unchanged: 0/0
 19693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19698 ;;Total ram usage:        0 bytes
 19699 ;; Hardware stack levels used: 1
 19700 ;; This function calls:
 19701 ;;		Nothing
 19702 ;; This function is called by:
 19703 ;;		_TMR1_Initialize
 19704 ;;		_TMR1_CallBack
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708  1000                     _TMR1_DefaultInterruptHandler:	
 19709                           ;psect for function _TMR1_DefaultInterruptHandler
 19710                           
 19711                           
 19712                           ;incstack = 0
 19713                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 19714  1000  0008               	return
 19715  1001                     __end_of_TMR1_DefaultInterruptHandler:
 19716                           
 19717                           	psect	text74
 19718  2312                     __ptext74:	
 19719 ;; *************** function _Timer1Interrupt *****************
 19720 ;; Defined at:
 19721 ;;		line 157 in file "app.c"
 19722 ;; Parameters:    Size  Location     Type
 19723 ;;		None
 19724 ;; Auto vars:     Size  Location     Type
 19725 ;;		None
 19726 ;; Return value:  Size  Location     Type
 19727 ;;                  1    wreg      void 
 19728 ;; Registers used:
 19729 ;;		status,0
 19730 ;; Tracked objects:
 19731 ;;		On entry : 0/0
 19732 ;;		On exit  : 0/0
 19733 ;;		Unchanged: 0/0
 19734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19739 ;;Total ram usage:        0 bytes
 19740 ;; Hardware stack levels used: 1
 19741 ;; This function calls:
 19742 ;;		Nothing
 19743 ;; This function is called by:
 19744 ;;		_APP_Initialize
 19745 ;;		_TMR1_CallBack
 19746 ;; This function uses a non-reentrant model
 19747 ;;
 19748                           
 19749  2312                     _Timer1Interrupt:	
 19750                           ;psect for function _Timer1Interrupt
 19751                           
 19752                           
 19753                           ;incstack = 0
 19754                           ; Regs used in _Timer1Interrupt: [status,0]
 19755                           ;app.c: 159:     do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 19756  2312  1003               	clrc
 19757  2313  0022               	movlb	2	; select bank2
 19758  2314  1C0E               	btfss	14,0	;volatile
 19759  2315  1403               	setc
 19760  2316  1C03               	btfss	3,0
 19761  2317  2B1B               	goto	u281_20
 19762  2318  0022               	movlb	2	; select bank2
 19763  2319  140E               	bsf	14,0	;volatile
 19764  231A  0008               	return
 19765  231B                     u281_20:
 19766  231B  0022               	movlb	2	; select bank2
 19767  231C  100E               	bcf	14,0	;volatile
 19768  231D  0008               	return
 19769  231E                     __end_of_Timer1Interrupt:
 19770                           
 19771                           	psect	text75
 19772  07EE                     __ptext75:	
 19773 ;; *************** function _PIN_MANAGER_IOC *****************
 19774 ;; Defined at:
 19775 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 19776 ;; Parameters:    Size  Location     Type
 19777 ;;		None
 19778 ;; Auto vars:     Size  Location     Type
 19779 ;;		None
 19780 ;; Return value:  Size  Location     Type
 19781 ;;                  1    wreg      void 
 19782 ;; Registers used:
 19783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19784 ;; Tracked objects:
 19785 ;;		On entry : 0/0
 19786 ;;		On exit  : 0/0
 19787 ;;		Unchanged: 0/0
 19788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19793 ;;Total ram usage:        0 bytes
 19794 ;; Hardware stack levels used: 1
 19795 ;; Hardware stack levels required when called: 3
 19796 ;; This function calls:
 19797 ;;		_IOCCF3_ISR
 19798 ;;		_IOCCF4_ISR
 19799 ;;		_IOCCF5_ISR
 19800 ;; This function is called by:
 19801 ;;		_INTERRUPT_InterruptManager
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805  07EE                     _PIN_MANAGER_IOC:	
 19806                           ;psect for function _PIN_MANAGER_IOC
 19807                           
 19808                           
 19809                           ;mcc_generated_files/pin_manager.c: 141:     if(IOCCFbits.IOCCF3 == 1)
 19810                           
 19811                           ;incstack = 0
 19812                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19813  07EE  0027               	movlb	7	; select bank7
 19814  07EF  1D99               	btfss	25,3	;volatile
 19815  07F0  2FF4               	goto	i1l4552
 19816                           
 19817                           ;mcc_generated_files/pin_manager.c: 142:     {;mcc_generated_files/pin_manager.c: 143:  
      +                                 IOCCF3_ISR();
 19818  07F1  31A3  2342  3187   	fcall	_IOCCF3_ISR
 19819  07F4                     i1l4552:
 19820                           
 19821                           ;mcc_generated_files/pin_manager.c: 146:     if(IOCCFbits.IOCCF4 == 1)
 19822  07F4  0027               	movlb	7	; select bank7
 19823  07F5  1E19               	btfss	25,4	;volatile
 19824  07F6  2FFA               	goto	i1l4556
 19825                           
 19826                           ;mcc_generated_files/pin_manager.c: 147:     {;mcc_generated_files/pin_manager.c: 148:  
      +                                 IOCCF4_ISR();
 19827  07F7  31A3  234F  3187   	fcall	_IOCCF4_ISR
 19828  07FA                     i1l4556:
 19829                           
 19830                           ;mcc_generated_files/pin_manager.c: 151:     if(IOCCFbits.IOCCF5 == 1)
 19831  07FA  0027               	movlb	7	; select bank7
 19832  07FB  1E99               	btfss	25,5	;volatile
 19833  07FC  0008               	return
 19834                           
 19835                           ;mcc_generated_files/pin_manager.c: 152:     {;mcc_generated_files/pin_manager.c: 153:  
      +                                 IOCCF5_ISR();
 19836  07FD  31A3  235C         	fcall	_IOCCF5_ISR
 19837  07FF  0008               	return
 19838  0800                     __end_of_PIN_MANAGER_IOC:
 19839                           
 19840                           	psect	text76
 19841  235C                     __ptext76:	
 19842 ;; *************** function _IOCCF5_ISR *****************
 19843 ;; Defined at:
 19844 ;;		line 220 in file "mcc_generated_files/pin_manager.c"
 19845 ;; Parameters:    Size  Location     Type
 19846 ;;		None
 19847 ;; Auto vars:     Size  Location     Type
 19848 ;;		None
 19849 ;; Return value:  Size  Location     Type
 19850 ;;                  1    wreg      void 
 19851 ;; Registers used:
 19852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19853 ;; Tracked objects:
 19854 ;;		On entry : 0/0
 19855 ;;		On exit  : 0/0
 19856 ;;		Unchanged: 0/0
 19857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19862 ;;Total ram usage:        0 bytes
 19863 ;; Hardware stack levels used: 1
 19864 ;; Hardware stack levels required when called: 2
 19865 ;; This function calls:
 19866 ;;		Absolute function
 19867 ;;		_IOCCF5_DefaultInterruptHandler
 19868 ;;		_RotaryEncoder_ReadButtonISR
 19869 ;; This function is called by:
 19870 ;;		_PIN_MANAGER_IOC
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874  235C                     _IOCCF5_ISR:	
 19875                           ;psect for function _IOCCF5_ISR
 19876                           
 19877                           
 19878                           ;mcc_generated_files/pin_manager.c: 225:     if(IOCCF5_InterruptHandler)
 19879                           
 19880                           ;incstack = 0
 19881                           ; Regs used in _IOCCF5_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19882  235C  0022               	movlb	2	; select bank2
 19883  235D  0851               	movf	_IOCCF5_InterruptHandler^(0+256),w
 19884  235E  0452               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 19885  235F  1903               	btfsc	3,2
 19886  2360  2B66               	goto	i1l4212
 19887                           
 19888                           ;mcc_generated_files/pin_manager.c: 226:     {;mcc_generated_files/pin_manager.c: 227:  
      +                                 IOCCF5_InterruptHandler();
 19889  2361  0852               	movf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 19890  2362  008A               	movwf	10
 19891  2363  0851               	movf	_IOCCF5_InterruptHandler^(0+256),w
 19892  2364  000A               	callw
 19893  2365  31A3               	pagesel	$
 19894  2366                     i1l4212:
 19895                           
 19896                           ;mcc_generated_files/pin_manager.c: 229:     IOCCFbits.IOCCF5 = 0;
 19897  2366  0027               	movlb	7	; select bank7
 19898  2367  1299               	bcf	25,5	;volatile
 19899  2368  0008               	return
 19900  2369                     __end_of_IOCCF5_ISR:
 19901                           
 19902                           	psect	text77
 19903  1A01                     __ptext77:	
 19904 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 19905 ;; Defined at:
 19906 ;;		line 242 in file "mcc_generated_files/pin_manager.c"
 19907 ;; Parameters:    Size  Location     Type
 19908 ;;		None
 19909 ;; Auto vars:     Size  Location     Type
 19910 ;;		None
 19911 ;; Return value:  Size  Location     Type
 19912 ;;                  1    wreg      void 
 19913 ;; Registers used:
 19914 ;;		None
 19915 ;; Tracked objects:
 19916 ;;		On entry : 0/0
 19917 ;;		On exit  : 0/0
 19918 ;;		Unchanged: 0/0
 19919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19924 ;;Total ram usage:        0 bytes
 19925 ;; Hardware stack levels used: 1
 19926 ;; This function calls:
 19927 ;;		Nothing
 19928 ;; This function is called by:
 19929 ;;		_PIN_MANAGER_Initialize
 19930 ;;		_IOCCF5_ISR
 19931 ;; This function uses a non-reentrant model
 19932 ;;
 19933                           
 19934  1A01                     _IOCCF5_DefaultInterruptHandler:	
 19935                           ;psect for function _IOCCF5_DefaultInterruptHandler
 19936                           
 19937                           
 19938                           ;incstack = 0
 19939                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 19940  1A01  0008               	return
 19941  1A02                     __end_of_IOCCF5_DefaultInterruptHandler:
 19942                           
 19943                           	psect	text78
 19944  0762                     __ptext78:	
 19945 ;; *************** function _RotaryEncoder_ReadButtonISR *****************
 19946 ;; Defined at:
 19947 ;;		line 161 in file "rotaryEncoder.c"
 19948 ;; Parameters:    Size  Location     Type
 19949 ;;		None
 19950 ;; Auto vars:     Size  Location     Type
 19951 ;;  currentTimes    2    6[BANK0 ] unsigned short 
 19952 ;;  positiveWidt    2    4[BANK0 ] unsigned short 
 19953 ;; Return value:  Size  Location     Type
 19954 ;;                  1    wreg      void 
 19955 ;; Registers used:
 19956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19957 ;; Tracked objects:
 19958 ;;		On entry : 0/0
 19959 ;;		On exit  : 0/0
 19960 ;;		Unchanged: 0/0
 19961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19963 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19965 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19966 ;;Total ram usage:        8 bytes
 19967 ;; Hardware stack levels used: 1
 19968 ;; Hardware stack levels required when called: 1
 19969 ;; This function calls:
 19970 ;;		i1_TMR3_ReadTimer
 19971 ;; This function is called by:
 19972 ;;		_RotaryEncoder_Init
 19973 ;;		_IOCCF5_ISR
 19974 ;; This function uses a non-reentrant model
 19975 ;;
 19976                           
 19977  0762                     _RotaryEncoder_ReadButtonISR:	
 19978                           ;psect for function _RotaryEncoder_ReadButtonISR
 19979                           
 19980                           
 19981                           ;rotaryEncoder.c: 163:     if( 1 == isRotaryEncoderEnabled )
 19982                           
 19983                           ;incstack = 0
 19984                           ; Regs used in _RotaryEncoder_ReadButtonISR: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19985  0762  037D               	decf	_isRotaryEncoderEnabled,w
 19986  0763  1D03               	btfss	3,2
 19987  0764  0008               	return
 19988                           
 19989                           ;rotaryEncoder.c: 164:     {;rotaryEncoder.c: 166:         uint16_t currentTimestamp = T
      +                          MR3_ReadTimer( );
 19990  0765  31A4  24B6  3187   	fcall	i1_TMR3_ReadTimer
 19991  0768  0871               	movf	?i1_TMR3_ReadTimer+1,w
 19992  0769  0020               	movlb	0	; select bank0
 19993  076A  00A8               	movwf	RotaryEncoder_ReadButtonISR@currentTimestamp+1
 19994  076B  0870               	movf	?i1_TMR3_ReadTimer,w
 19995  076C  00A7               	movwf	RotaryEncoder_ReadButtonISR@currentTimestamp
 19996                           
 19997                           ;rotaryEncoder.c: 167:         uint16_t positiveWidth_cts;;rotaryEncoder.c: 170:        
      +                           switch( PORTCbits.RC5 )
 19998  076D  2FDB               	goto	i1l3966
 19999  076E                     i1l3946:
 20000                           
 20001                           ;rotaryEncoder.c: 173:                 rot->rotBtn.lastRisingEdgeTimestamp_cts = current
      +                          Timestamp;
 20002  076E  0A61               	incf	_rot,w
 20003  076F  0086               	movwf	6
 20004  0770  3001               	movlw	1	; select bank2/3
 20005  0771  0087               	movwf	7
 20006  0772  0827               	movf	RotaryEncoder_ReadButtonISR@currentTimestamp,w
 20007  0773  3FC0               	movwi [0]fsr1
 20008  0774  0828               	movf	RotaryEncoder_ReadButtonISR@currentTimestamp+1,w
 20009  0775  3FC1               	movwi [1]fsr1
 20010                           
 20011                           ;rotaryEncoder.c: 174:                 break;
 20012  0776  0008               	return
 20013  0777                     i1l3948:
 20014                           
 20015                           ;rotaryEncoder.c: 176:                 positiveWidth_cts = currentTimestamp - rot->rotBt
      +                          n.lastRisingEdgeTimestamp_cts;
 20016  0777  0A61               	incf	_rot,w
 20017  0778  0086               	movwf	6
 20018  0779  3001               	movlw	1	; select bank2/3
 20019  077A  0087               	movwf	7
 20020  077B  3F40               	moviw [0]fsr1
 20021  077C  0227               	subwf	RotaryEncoder_ReadButtonISR@currentTimestamp,w
 20022  077D  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20023  077E  3F41               	moviw [1]fsr1
 20024  077F  3B28               	subwfb	RotaryEncoder_ReadButtonISR@currentTimestamp+1,w
 20025  0780  00A2               	movwf	??_RotaryEncoder_ReadButtonISR+1
 20026  0781  0821               	movf	??_RotaryEncoder_ReadButtonISR,w
 20027  0782  00A5               	movwf	RotaryEncoder_ReadButtonISR@positiveWidth_cts
 20028  0783  0822               	movf	??_RotaryEncoder_ReadButtonISR+1,w
 20029  0784  00A6               	movwf	RotaryEncoder_ReadButtonISR@positiveWidth_cts+1
 20030                           
 20031                           ;rotaryEncoder.c: 179:                 if( positiveWidth_cts > rot->rotBtn.config.longPr
      +                          essTimerThreshold_cts )
 20032  0785  0861               	movf	_rot,w
 20033  0786  3E0A               	addlw	10
 20034  0787  0086               	movwf	6
 20035  0788  3001               	movlw	1	; select bank2/3
 20036  0789  0087               	movwf	7
 20037  078A  3F40               	moviw [0]fsr1
 20038  078B  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20039  078C  3F41               	moviw [1]fsr1
 20040  078D  00A2               	movwf	??_RotaryEncoder_ReadButtonISR+1
 20041  078E  0826               	movf	RotaryEncoder_ReadButtonISR@positiveWidth_cts+1,w
 20042  078F  0222               	subwf	??_RotaryEncoder_ReadButtonISR+1,w
 20043  0790  1D03               	skipz
 20044  0791  2F94               	goto	u279_25
 20045  0792  0825               	movf	RotaryEncoder_ReadButtonISR@positiveWidth_cts,w
 20046  0793  0221               	subwf	??_RotaryEncoder_ReadButtonISR,w
 20047  0794                     u279_25:
 20048  0794  1803               	skipnc
 20049  0795  2F98               	goto	i1l3952
 20050                           
 20051                           ;rotaryEncoder.c: 180:                 {;rotaryEncoder.c: 181:                     rot->
      +                          rotBtn.currentState = SWITCH_HOLD;
 20052  0796  3003               	movlw	3
 20053  0797  2FC1               	goto	L9
 20054  0798                     i1l3952:	
 20055                           ;rotaryEncoder.c: 182:                 }
 20056                           
 20057  0798  0861               	movf	_rot,w
 20058  0799  3E08               	addlw	8
 20059  079A  0086               	movwf	6
 20060  079B  3001               	movlw	1	; select bank2/3
 20061  079C  0087               	movwf	7
 20062  079D  3F40               	moviw [0]fsr1
 20063  079E  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20064  079F  3F41               	moviw [1]fsr1
 20065  07A0  00A2               	movwf	??_RotaryEncoder_ReadButtonISR+1
 20066  07A1  0861               	movf	_rot,w
 20067  07A2  3E03               	addlw	3
 20068  07A3  0086               	movwf	6
 20069  07A4  3001               	movlw	1	; select bank2/3
 20070  07A5  0087               	movwf	7
 20071  07A6  3F40               	moviw [0]fsr1
 20072  07A7  0227               	subwf	RotaryEncoder_ReadButtonISR@currentTimestamp,w
 20073  07A8  00A3               	movwf	??_RotaryEncoder_ReadButtonISR+2
 20074  07A9  3F41               	moviw [1]fsr1
 20075  07AA  3B28               	subwfb	RotaryEncoder_ReadButtonISR@currentTimestamp+1,w
 20076  07AB  00A4               	movwf	??_RotaryEncoder_ReadButtonISR+3
 20077  07AC  0822               	movf	??_RotaryEncoder_ReadButtonISR+1,w
 20078  07AD  0224               	subwf	??_RotaryEncoder_ReadButtonISR+3,w
 20079  07AE  1D03               	skipz
 20080  07AF  2FB2               	goto	u280_25
 20081  07B0  0821               	movf	??_RotaryEncoder_ReadButtonISR,w
 20082  07B1  0223               	subwf	??_RotaryEncoder_ReadButtonISR+2,w
 20083  07B2                     u280_25:
 20084  07B2  1803               	skipnc
 20085  07B3  2FC0               	goto	i1l3958
 20086                           
 20087                           ;rotaryEncoder.c: 186:                 {;rotaryEncoder.c: 187:                     rot->
      +                          rotBtn.currentNumMulticlicks++;
 20088  07B4  0861               	movf	_rot,w
 20089  07B5  3E06               	addlw	6
 20090  07B6  0086               	movwf	6
 20091  07B7  3001               	movlw	1	; select bank2/3
 20092  07B8  0087               	movwf	7
 20093  07B9  3001               	movlw	1
 20094  07BA  0781               	addwf	1,f
 20095  07BB  3141               	addfsr 1,1
 20096  07BC  1803               	skipnc
 20097  07BD  0A81               	incf	1,f
 20098                           
 20099                           ;rotaryEncoder.c: 188:                     rot->rotBtn.currentState = SWITCH_DOUBLE_CLIC
      +                          K;
 20100  07BE  3002               	movlw	2
 20101  07BF  2FC1               	goto	L9
 20102  07C0                     i1l3958:	
 20103                           ;rotaryEncoder.c: 189:                 }
 20104                           
 20105                           
 20106                           ;rotaryEncoder.c: 192:                 {;rotaryEncoder.c: 193:                     rot->
      +                          rotBtn.currentState = SWITCH_PRESSED;
 20107  07C0  3001               	movlw	1
 20108  07C1                     L9:
 20109  07C1  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20110  07C2  0861               	movf	_rot,w
 20111  07C3  0086               	movwf	6
 20112  07C4  3001               	movlw	1	; select bank2/3
 20113  07C5  0087               	movwf	7
 20114  07C6  0821               	movf	??_RotaryEncoder_ReadButtonISR,w
 20115  07C7  0081               	movwf	1
 20116                           
 20117                           ;rotaryEncoder.c: 197:                 rot->rotBtn.hasSwitchBeenPressed = 1;
 20118  07C8  3001               	movlw	1
 20119  07C9  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20120  07CA  0861               	movf	_rot,w
 20121  07CB  3E05               	addlw	5
 20122  07CC  0086               	movwf	6
 20123  07CD  3001               	movlw	1	; select bank2/3
 20124  07CE  0087               	movwf	7
 20125  07CF  0821               	movf	??_RotaryEncoder_ReadButtonISR,w
 20126  07D0  0081               	movwf	1
 20127                           
 20128                           ;rotaryEncoder.c: 198:                 rot->rotBtn.lastFallingEdgeTimestamp_cts = curren
      +                          tTimestamp;
 20129  07D1  0861               	movf	_rot,w
 20130  07D2  3E03               	addlw	3
 20131  07D3  0086               	movwf	6
 20132  07D4  3001               	movlw	1	; select bank2/3
 20133  07D5  0087               	movwf	7
 20134  07D6  0827               	movf	RotaryEncoder_ReadButtonISR@currentTimestamp,w
 20135  07D7  3FC0               	movwi [0]fsr1
 20136  07D8  0828               	movf	RotaryEncoder_ReadButtonISR@currentTimestamp+1,w
 20137  07D9  3FC1               	movwi [1]fsr1
 20138                           
 20139                           ;rotaryEncoder.c: 199:                 break;
 20140  07DA  0008               	return
 20141  07DB                     i1l3966:
 20142  07DB  0E0E               	swapf	14,w	;volatile
 20143  07DC  0C89               	rrf	9,f
 20144  07DD  3901               	andlw	1
 20145  07DE  00A1               	movwf	??_RotaryEncoder_ReadButtonISR
 20146  07DF  01A2               	clrf	??_RotaryEncoder_ReadButtonISR+1
 20147                           
 20148                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20149                           ; Switch size 1, requested type "simple"
 20150                           ; Number of cases is 1, Range of values is 0 to 0
 20151                           ; switch strategies available:
 20152                           ; Name         Instructions Cycles
 20153                           ; simple_byte            4     3 (average)
 20154                           ; direct_byte            8     6 (fixed)
 20155                           ; jumptable            260     6 (fixed)
 20156                           ;	Chosen strategy is simple_byte
 20157  07E0  0822               	movf	??_RotaryEncoder_ReadButtonISR+1,w
 20158  07E1  3A00               	xorlw	0	; case 0
 20159  07E2  1903               	skipnz
 20160  07E3  2FE5               	goto	i1l6268
 20161  07E4  2FED               	goto	i1l748
 20162  07E5                     i1l6268:
 20163                           
 20164                           ; Switch size 1, requested type "simple"
 20165                           ; Number of cases is 2, Range of values is 0 to 1
 20166                           ; switch strategies available:
 20167                           ; Name         Instructions Cycles
 20168                           ; simple_byte            7     4 (average)
 20169                           ; direct_byte           10     6 (fixed)
 20170                           ; jumptable            260     6 (fixed)
 20171                           ;	Chosen strategy is simple_byte
 20172  07E5  0821               	movf	??_RotaryEncoder_ReadButtonISR,w
 20173  07E6  3A00               	xorlw	0	; case 0
 20174  07E7  1903               	skipnz
 20175  07E8  2F77               	goto	i1l3948
 20176  07E9  3A01               	xorlw	1	; case 1
 20177  07EA  1903               	skipnz
 20178  07EB  2F6E               	goto	i1l3946
 20179  07EC  2FED               	goto	i1l748
 20180  07ED                     i1l748:
 20181  07ED  0008               	return
 20182  07EE                     __end_of_RotaryEncoder_ReadButtonISR:
 20183                           
 20184                           	psect	text79
 20185  24B6                     __ptext79:	
 20186 ;; *************** function i1_TMR3_ReadTimer *****************
 20187 ;; Defined at:
 20188 ;;		line 98 in file "mcc_generated_files/tmr3.c"
 20189 ;; Parameters:    Size  Location     Type
 20190 ;;		None
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;  readVal         2    7[COMMON] unsigned short 
 20193 ;;  readValLow      1   10[COMMON] unsigned char 
 20194 ;;  readValHigh     1    9[COMMON] unsigned char 
 20195 ;; Return value:  Size  Location     Type
 20196 ;;                  2    0[COMMON] unsigned short 
 20197 ;; Registers used:
 20198 ;;		wreg
 20199 ;; Tracked objects:
 20200 ;;		On entry : 0/0
 20201 ;;		On exit  : 0/0
 20202 ;;		Unchanged: 0/0
 20203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20205 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20206 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20207 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20208 ;;Total ram usage:       11 bytes
 20209 ;; Hardware stack levels used: 1
 20210 ;; This function calls:
 20211 ;;		Nothing
 20212 ;; This function is called by:
 20213 ;;		_RotaryEncoder_ReadButtonISR
 20214 ;; This function uses a non-reentrant model
 20215 ;;
 20216                           
 20217  24B6                     i1_TMR3_ReadTimer:	
 20218                           ;psect for function i1_TMR3_ReadTimer
 20219                           
 20220                           
 20221                           ;mcc_generated_files/tmr3.c: 100:     uint16_t readVal;;mcc_generated_files/tmr3.c: 101:
      +                               uint8_t readValHigh;;mcc_generated_files/tmr3.c: 102:     uint8_t readValLow;;mcc_g
      +                          enerated_files/tmr3.c: 105:     readValLow = TMR3L;
 20222                           
 20223                           ;incstack = 0
 20224                           ; Regs used in i1_TMR3_ReadTimer: [wreg]
 20225  24B6  0028               	movlb	8	; select bank8
 20226  24B7  0811               	movf	17,w	;volatile
 20227  24B8  00F2               	movwf	??i1_TMR3_ReadTimer
 20228  24B9  0872               	movf	??i1_TMR3_ReadTimer,w
 20229  24BA  00FA               	movwf	i1TMR3_ReadTimer@readValLow
 20230                           
 20231                           ;mcc_generated_files/tmr3.c: 106:     readValHigh = TMR3H;
 20232  24BB  0812               	movf	18,w	;volatile
 20233  24BC  00F2               	movwf	??i1_TMR3_ReadTimer
 20234  24BD  0872               	movf	??i1_TMR3_ReadTimer,w
 20235  24BE  00F9               	movwf	i1TMR3_ReadTimer@readValHigh
 20236                           
 20237                           ;mcc_generated_files/tmr3.c: 108:     readVal = ((uint16_t)readValHigh << 8) | readValLo
      +                          w;
 20238  24BF  087A               	movf	i1TMR3_ReadTimer@readValLow,w
 20239  24C0  00F2               	movwf	??i1_TMR3_ReadTimer
 20240  24C1  01F3               	clrf	??i1_TMR3_ReadTimer+1
 20241  24C2  0879               	movf	i1TMR3_ReadTimer@readValHigh,w
 20242  24C3  00F4               	movwf	??i1_TMR3_ReadTimer+2
 20243  24C4  01F5               	clrf	??i1_TMR3_ReadTimer+3
 20244  24C5  0874               	movf	??i1_TMR3_ReadTimer+2,w
 20245  24C6  00F5               	movwf	??i1_TMR3_ReadTimer+3
 20246  24C7  01F4               	clrf	??i1_TMR3_ReadTimer+2
 20247  24C8  0872               	movf	??i1_TMR3_ReadTimer,w
 20248  24C9  0474               	iorwf	??i1_TMR3_ReadTimer+2,w
 20249  24CA  00F7               	movwf	i1TMR3_ReadTimer@readVal
 20250  24CB  0873               	movf	??i1_TMR3_ReadTimer+1,w
 20251  24CC  0475               	iorwf	??i1_TMR3_ReadTimer+3,w
 20252  24CD  00F8               	movwf	i1TMR3_ReadTimer@readVal+1
 20253                           
 20254                           ;mcc_generated_files/tmr3.c: 110:     return readVal;
 20255  24CE  0878               	movf	i1TMR3_ReadTimer@readVal+1,w
 20256  24CF  00F1               	movwf	?i1_TMR3_ReadTimer+1
 20257  24D0  0877               	movf	i1TMR3_ReadTimer@readVal,w
 20258  24D1  00F0               	movwf	?i1_TMR3_ReadTimer
 20259  24D2  0008               	return
 20260  24D3                     __end_ofi1_TMR3_ReadTimer:
 20261                           
 20262                           	psect	text80
 20263  234F                     __ptext80:	
 20264 ;; *************** function _IOCCF4_ISR *****************
 20265 ;; Defined at:
 20266 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 20267 ;; Parameters:    Size  Location     Type
 20268 ;;		None
 20269 ;; Auto vars:     Size  Location     Type
 20270 ;;		None
 20271 ;; Return value:  Size  Location     Type
 20272 ;;                  1    wreg      void 
 20273 ;; Registers used:
 20274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20275 ;; Tracked objects:
 20276 ;;		On entry : 0/0
 20277 ;;		On exit  : 0/0
 20278 ;;		Unchanged: 0/0
 20279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20284 ;;Total ram usage:        0 bytes
 20285 ;; Hardware stack levels used: 1
 20286 ;; Hardware stack levels required when called: 1
 20287 ;; This function calls:
 20288 ;;		Absolute function
 20289 ;;		_IOCCF4_DefaultInterruptHandler
 20290 ;;		_RotaryEncoder_ReadShaftISR
 20291 ;; This function is called by:
 20292 ;;		_PIN_MANAGER_IOC
 20293 ;; This function uses a non-reentrant model
 20294 ;;
 20295                           
 20296  234F                     _IOCCF4_ISR:	
 20297                           ;psect for function _IOCCF4_ISR
 20298                           
 20299                           
 20300                           ;mcc_generated_files/pin_manager.c: 195:     if(IOCCF4_InterruptHandler)
 20301                           
 20302                           ;incstack = 0
 20303                           ; Regs used in _IOCCF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20304  234F  0022               	movlb	2	; select bank2
 20305  2350  0853               	movf	_IOCCF4_InterruptHandler^(0+256),w
 20306  2351  0454               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 20307  2352  1903               	btfsc	3,2
 20308  2353  2B59               	goto	i1l4206
 20309                           
 20310                           ;mcc_generated_files/pin_manager.c: 196:     {;mcc_generated_files/pin_manager.c: 197:  
      +                                 IOCCF4_InterruptHandler();
 20311  2354  0854               	movf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 20312  2355  008A               	movwf	10
 20313  2356  0853               	movf	_IOCCF4_InterruptHandler^(0+256),w
 20314  2357  000A               	callw
 20315  2358  31A3               	pagesel	$
 20316  2359                     i1l4206:
 20317                           
 20318                           ;mcc_generated_files/pin_manager.c: 199:     IOCCFbits.IOCCF4 = 0;
 20319  2359  0027               	movlb	7	; select bank7
 20320  235A  1219               	bcf	25,4	;volatile
 20321  235B  0008               	return
 20322  235C                     __end_of_IOCCF4_ISR:
 20323                           
 20324                           	psect	text81
 20325  1A00                     __ptext81:	
 20326 ;; *************** function _IOCCF3_DefaultInterruptHandler *****************
 20327 ;; Defined at:
 20328 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 20329 ;; Parameters:    Size  Location     Type
 20330 ;;		None
 20331 ;; Auto vars:     Size  Location     Type
 20332 ;;		None
 20333 ;; Return value:  Size  Location     Type
 20334 ;;                  1    wreg      void 
 20335 ;; Registers used:
 20336 ;;		None
 20337 ;; Tracked objects:
 20338 ;;		On entry : 0/0
 20339 ;;		On exit  : 0/0
 20340 ;;		Unchanged: 0/0
 20341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20346 ;;Total ram usage:        0 bytes
 20347 ;; Hardware stack levels used: 1
 20348 ;; This function calls:
 20349 ;;		Nothing
 20350 ;; This function is called by:
 20351 ;;		_PIN_MANAGER_Initialize
 20352 ;;		_IOCCF3_ISR
 20353 ;; This function uses a non-reentrant model
 20354 ;;
 20355                           
 20356  1A00                     _IOCCF3_DefaultInterruptHandler:	
 20357                           ;psect for function _IOCCF3_DefaultInterruptHandler
 20358                           
 20359                           
 20360                           ;incstack = 0
 20361                           ; Regs used in _IOCCF3_DefaultInterruptHandler: []
 20362  1A00  0008               	return
 20363  1A01                     __end_of_IOCCF3_DefaultInterruptHandler:
 20364                           
 20365                           	psect	text82
 20366  1D00                     __ptext82:	
 20367 ;; *************** function _RotaryEncoder_ReadShaftISR *****************
 20368 ;; Defined at:
 20369 ;;		line 120 in file "rotaryEncoder.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;		None
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;  currentDirec    1    0        enum E192
 20374 ;; Return value:  Size  Location     Type
 20375 ;;                  1    wreg      void 
 20376 ;; Registers used:
 20377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20378 ;; Tracked objects:
 20379 ;;		On entry : 0/0
 20380 ;;		On exit  : 0/0
 20381 ;;		Unchanged: 0/0
 20382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20386 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20387 ;;Total ram usage:        4 bytes
 20388 ;; Hardware stack levels used: 1
 20389 ;; This function calls:
 20390 ;;		Nothing
 20391 ;; This function is called by:
 20392 ;;		_RotaryEncoder_Init
 20393 ;;		_IOCCF3_ISR
 20394 ;;		_IOCCF4_ISR
 20395 ;; This function uses a non-reentrant model
 20396 ;;
 20397                           
 20398  1D00                     _RotaryEncoder_ReadShaftISR:	
 20399                           ;psect for function _RotaryEncoder_ReadShaftISR
 20400                           
 20401                           
 20402                           ;rotaryEncoder.c: 122:     if( isRotaryEncoderEnabled )
 20403                           
 20404                           ;incstack = 0
 20405                           ; Regs used in _RotaryEncoder_ReadShaftISR: [wreg-fsr1h+status,2+status,0]
 20406  1D00  087D               	movf	_isRotaryEncoderEnabled,w
 20407  1D01  1903               	btfsc	3,2
 20408  1D02  0008               	return
 20409                           
 20410                           ;rotaryEncoder.c: 123:     {;rotaryEncoder.c: 125:         rot->shaft.vector = ( rot->sh
      +                          aft.vector << 2u ) & 0b00001100;
 20411  1D03  0020               	movlb	0	; select bank0
 20412  1D04  0861               	movf	_rot,w
 20413  1D05  3E0E               	addlw	14
 20414  1D06  0086               	movwf	6
 20415  1D07  3001               	movlw	1	; select bank2/3
 20416  1D08  0087               	movwf	7
 20417  1D09  0801               	movf	1,w
 20418  1D0A  00F0               	movwf	??_RotaryEncoder_ReadShaftISR
 20419  1D0B  3001               	movlw	1
 20420  1D0C                     u276_25:
 20421  1D0C  35F0               	lslf	??_RotaryEncoder_ReadShaftISR,f
 20422  1D0D  3EFF               	addlw	-1
 20423  1D0E  1D03               	skipz
 20424  1D0F  2D0C               	goto	u276_25
 20425  1D10  3570               	lslf	??_RotaryEncoder_ReadShaftISR,w
 20426  1D11  390C               	andlw	12
 20427  1D12  00F1               	movwf	??_RotaryEncoder_ReadShaftISR+1
 20428  1D13  0861               	movf	_rot,w
 20429  1D14  3E0E               	addlw	14
 20430  1D15  0086               	movwf	6
 20431  1D16  3001               	movlw	1	; select bank2/3
 20432  1D17  0087               	movwf	7
 20433  1D18  0871               	movf	??_RotaryEncoder_ReadShaftISR+1,w
 20434  1D19  0081               	movwf	1
 20435                           
 20436                           ;rotaryEncoder.c: 128:         rot->shaft.vector |= ( PORTCbits.RC4 ) ? 0x2u : 0x0u;
 20437  1D1A  1A0E               	btfsc	14,4	;volatile
 20438  1D1B  2D1F               	goto	i1l3922
 20439  1D1C  01F2               	clrf	_RotaryEncoder_ReadShaftISR$1369
 20440  1D1D  01F3               	clrf	_RotaryEncoder_ReadShaftISR$1369+1
 20441  1D1E  2D23               	goto	i1l3924
 20442  1D1F                     i1l3922:
 20443  1D1F  3002               	movlw	2
 20444  1D20  00F2               	movwf	_RotaryEncoder_ReadShaftISR$1369
 20445  1D21  3000               	movlw	0
 20446  1D22  00F3               	movwf	_RotaryEncoder_ReadShaftISR$1369+1
 20447  1D23                     i1l3924:
 20448  1D23  0872               	movf	_RotaryEncoder_ReadShaftISR$1369,w	;volatile
 20449  1D24  00F0               	movwf	??_RotaryEncoder_ReadShaftISR
 20450  1D25  0861               	movf	_rot,w
 20451  1D26  3E0E               	addlw	14
 20452  1D27  0086               	movwf	6
 20453  1D28  3001               	movlw	1	; select bank2/3
 20454  1D29  0087               	movwf	7
 20455  1D2A  0870               	movf	??_RotaryEncoder_ReadShaftISR,w
 20456  1D2B  0481               	iorwf	1,f
 20457                           
 20458                           ;rotaryEncoder.c: 129:         rot->shaft.vector |= ( PORTCbits.RC3 ) ? 0x1u : 0x0u;
 20459  1D2C  0C0E               	rrf	14,w	;volatile
 20460  1D2D  00F0               	movwf	??_RotaryEncoder_ReadShaftISR
 20461  1D2E  0CF0               	rrf	??_RotaryEncoder_ReadShaftISR,f
 20462  1D2F  0C70               	rrf	??_RotaryEncoder_ReadShaftISR,w
 20463  1D30  3901               	andlw	1
 20464  1D31  00F1               	movwf	??_RotaryEncoder_ReadShaftISR+1
 20465  1D32  0861               	movf	_rot,w
 20466  1D33  3E0E               	addlw	14
 20467  1D34  0086               	movwf	6
 20468  1D35  3001               	movlw	1	; select bank2/3
 20469  1D36  0087               	movwf	7
 20470  1D37  0871               	movf	??_RotaryEncoder_ReadShaftISR+1,w
 20471  1D38  0481               	iorwf	1,f
 20472  1D39  0861               	movf	_rot,w
 20473  1D3A  3E13               	addlw	19
 20474  1D3B  0086               	movwf	6
 20475  1D3C  3001               	movlw	1	; select bank2/3
 20476  1D3D  0087               	movwf	7
 20477  1D3E  0801               	movf	1,w
 20478                           
 20479                           ;rotaryEncoder.c: 135:         switch( rot->shaft.vector )
 20480  1D3F  2D71               	goto	i1l3936
 20481  1D40                     i1l3930:
 20482                           
 20483                           ;rotaryEncoder.c: 138:                 rot->shaft.counts++;
 20484  1D40  0861               	movf	_rot,w
 20485  1D41  3E0F               	addlw	15
 20486  1D42  0086               	movwf	6
 20487  1D43  3001               	movlw	1	; select bank2/3
 20488  1D44  0087               	movwf	7
 20489  1D45  3001               	movlw	1
 20490  1D46  0781               	addwf	1,f
 20491  1D47  3141               	addfsr 1,1
 20492  1D48  3000               	movlw	0
 20493  1D49  3D81               	addwfc	1,f
 20494  1D4A  3141               	addfsr 1,1
 20495  1D4B  3000               	movlw	0
 20496  1D4C  3D81               	addwfc	1,f
 20497  1D4D  3141               	addfsr 1,1
 20498  1D4E  3000               	movlw	0
 20499  1D4F  3D81               	addwfc	1,f
 20500                           
 20501                           ;rotaryEncoder.c: 139:                 rot->shaft.currentDirection = ROT_ENC_CW_DIR;
 20502  1D50  0861               	movf	_rot,w
 20503  1D51  3E13               	addlw	19
 20504  1D52  0086               	movwf	6
 20505  1D53  3001               	movlw	1	; select bank2/3
 20506  1D54  0087               	movwf	7
 20507  1D55  0181               	clrf	1
 20508                           
 20509                           ;rotaryEncoder.c: 140:                 break;
 20510  1D56  0008               	return
 20511  1D57                     i1l3932:
 20512                           
 20513                           ;rotaryEncoder.c: 142:                 rot->shaft.counts--;
 20514  1D57  0861               	movf	_rot,w
 20515  1D58  3E0F               	addlw	15
 20516  1D59  0086               	movwf	6
 20517  1D5A  3001               	movlw	1	; select bank2/3
 20518  1D5B  0087               	movwf	7
 20519  1D5C  30FF               	movlw	255
 20520  1D5D  0781               	addwf	1,f
 20521  1D5E  3141               	addfsr 1,1
 20522  1D5F  30FF               	movlw	255
 20523  1D60  3D81               	addwfc	1,f
 20524  1D61  3141               	addfsr 1,1
 20525  1D62  30FF               	movlw	255
 20526  1D63  3D81               	addwfc	1,f
 20527  1D64  3141               	addfsr 1,1
 20528  1D65  30FF               	movlw	255
 20529  1D66  3D81               	addwfc	1,f
 20530                           
 20531                           ;rotaryEncoder.c: 143:                 rot->shaft.currentDirection = ROT_ENC_CCW_DIR;
 20532  1D67  3001               	movlw	1
 20533  1D68  00F0               	movwf	??_RotaryEncoder_ReadShaftISR
 20534  1D69  0861               	movf	_rot,w
 20535  1D6A  3E13               	addlw	19
 20536  1D6B  0086               	movwf	6
 20537  1D6C  3001               	movlw	1	; select bank2/3
 20538  1D6D  0087               	movwf	7
 20539  1D6E  0870               	movf	??_RotaryEncoder_ReadShaftISR,w
 20540  1D6F  0081               	movwf	1
 20541                           
 20542                           ;rotaryEncoder.c: 144:                 break;
 20543  1D70  0008               	return
 20544  1D71                     i1l3936:
 20545  1D71  0861               	movf	_rot,w
 20546  1D72  3E0E               	addlw	14
 20547  1D73  0086               	movwf	6
 20548  1D74  3001               	movlw	1	; select bank2/3
 20549  1D75  0087               	movwf	7
 20550  1D76  0801               	movf	1,w
 20551  1D77  00F0               	movwf	??_RotaryEncoder_ReadShaftISR
 20552  1D78  01F1               	clrf	??_RotaryEncoder_ReadShaftISR+1
 20553                           
 20554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20555                           ; Switch size 1, requested type "simple"
 20556                           ; Number of cases is 1, Range of values is 0 to 0
 20557                           ; switch strategies available:
 20558                           ; Name         Instructions Cycles
 20559                           ; simple_byte            4     3 (average)
 20560                           ; direct_byte            8     6 (fixed)
 20561                           ; jumptable            260     6 (fixed)
 20562                           ;	Chosen strategy is simple_byte
 20563  1D79  0871               	movf	??_RotaryEncoder_ReadShaftISR+1,w
 20564  1D7A  3A00               	xorlw	0	; case 0
 20565  1D7B  1903               	skipnz
 20566  1D7C  2D7E               	goto	i1l6270
 20567  1D7D  2D86               	goto	i1l735
 20568  1D7E                     i1l6270:
 20569                           
 20570                           ; Switch size 1, requested type "simple"
 20571                           ; Number of cases is 2, Range of values is 4 to 8
 20572                           ; switch strategies available:
 20573                           ; Name         Instructions Cycles
 20574                           ; simple_byte            7     4 (average)
 20575                           ; direct_byte           19     9 (fixed)
 20576                           ; jumptable            263     9 (fixed)
 20577                           ;	Chosen strategy is simple_byte
 20578  1D7E  0870               	movf	??_RotaryEncoder_ReadShaftISR,w
 20579  1D7F  3A04               	xorlw	4	; case 4
 20580  1D80  1903               	skipnz
 20581  1D81  2D57               	goto	i1l3932
 20582  1D82  3A0C               	xorlw	12	; case 8
 20583  1D83  1903               	skipnz
 20584  1D84  2D40               	goto	i1l3930
 20585  1D85  2D86               	goto	i1l735
 20586  1D86                     i1l735:
 20587  1D86  0008               	return
 20588  1D87                     __end_of_RotaryEncoder_ReadShaftISR:
 20589                           
 20590                           	psect	text83
 20591  22A3                     __ptext83:	
 20592 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 20593 ;; Defined at:
 20594 ;;		line 212 in file "mcc_generated_files/pin_manager.c"
 20595 ;; Parameters:    Size  Location     Type
 20596 ;;		None
 20597 ;; Auto vars:     Size  Location     Type
 20598 ;;		None
 20599 ;; Return value:  Size  Location     Type
 20600 ;;                  1    wreg      void 
 20601 ;; Registers used:
 20602 ;;		None
 20603 ;; Tracked objects:
 20604 ;;		On entry : 0/0
 20605 ;;		On exit  : 0/0
 20606 ;;		Unchanged: 0/0
 20607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20612 ;;Total ram usage:        0 bytes
 20613 ;; Hardware stack levels used: 1
 20614 ;; This function calls:
 20615 ;;		Nothing
 20616 ;; This function is called by:
 20617 ;;		_PIN_MANAGER_Initialize
 20618 ;;		_IOCCF4_ISR
 20619 ;; This function uses a non-reentrant model
 20620 ;;
 20621                           
 20622  22A3                     _IOCCF4_DefaultInterruptHandler:	
 20623                           ;psect for function _IOCCF4_DefaultInterruptHandler
 20624                           
 20625                           
 20626                           ;incstack = 0
 20627                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 20628  22A3  0008               	return
 20629  22A4                     __end_of_IOCCF4_DefaultInterruptHandler:
 20630                           
 20631                           	psect	text84
 20632  2342                     __ptext84:	
 20633 ;; *************** function _IOCCF3_ISR *****************
 20634 ;; Defined at:
 20635 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;		None
 20638 ;; Auto vars:     Size  Location     Type
 20639 ;;		None
 20640 ;; Return value:  Size  Location     Type
 20641 ;;                  1    wreg      void 
 20642 ;; Registers used:
 20643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20644 ;; Tracked objects:
 20645 ;;		On entry : 0/0
 20646 ;;		On exit  : 0/0
 20647 ;;		Unchanged: 0/0
 20648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20653 ;;Total ram usage:        0 bytes
 20654 ;; Hardware stack levels used: 1
 20655 ;; Hardware stack levels required when called: 1
 20656 ;; This function calls:
 20657 ;;		Absolute function
 20658 ;;		_IOCCF3_DefaultInterruptHandler
 20659 ;;		_RotaryEncoder_ReadShaftISR
 20660 ;; This function is called by:
 20661 ;;		_PIN_MANAGER_IOC
 20662 ;; This function uses a non-reentrant model
 20663 ;;
 20664                           
 20665  2342                     _IOCCF3_ISR:	
 20666                           ;psect for function _IOCCF3_ISR
 20667                           
 20668                           
 20669                           ;mcc_generated_files/pin_manager.c: 165:     if(IOCCF3_InterruptHandler)
 20670                           
 20671                           ;incstack = 0
 20672                           ; Regs used in _IOCCF3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20673  2342  0022               	movlb	2	; select bank2
 20674  2343  0855               	movf	_IOCCF3_InterruptHandler^(0+256),w
 20675  2344  0456               	iorwf	(_IOCCF3_InterruptHandler+1)^(0+256),w
 20676  2345  1903               	btfsc	3,2
 20677  2346  2B4C               	goto	i1l4200
 20678                           
 20679                           ;mcc_generated_files/pin_manager.c: 166:     {;mcc_generated_files/pin_manager.c: 167:  
      +                                 IOCCF3_InterruptHandler();
 20680  2347  0856               	movf	(_IOCCF3_InterruptHandler+1)^(0+256),w
 20681  2348  008A               	movwf	10
 20682  2349  0855               	movf	_IOCCF3_InterruptHandler^(0+256),w
 20683  234A  000A               	callw
 20684  234B  31A3               	pagesel	$
 20685  234C                     i1l4200:
 20686                           
 20687                           ;mcc_generated_files/pin_manager.c: 169:     IOCCFbits.IOCCF3 = 0;
 20688  234C  0027               	movlb	7	; select bank7
 20689  234D  1199               	bcf	25,3	;volatile
 20690  234E  0008               	return
 20691  234F                     __end_of_IOCCF3_ISR:
 20692  007E                     btemp	set	126	;btemp
 20693  007E                     int$flags	set	126
 20694  007E                     wtemp0	set	126
 20695  23E8                     
 20696                           	psect	idloc
 20697                           
 20698                           ;Config register IDLOC0 @ 0x8000
 20699                           ;	unspecified, using default values
 20700  8000                     	org	32768
 20701  8000  3FFF               	dw	16383
 20702                           
 20703                           ;Config register IDLOC1 @ 0x8001
 20704                           ;	unspecified, using default values
 20705  8001                     	org	32769
 20706  8001  3FFF               	dw	16383
 20707                           
 20708                           ;Config register IDLOC2 @ 0x8002
 20709                           ;	unspecified, using default values
 20710  8002                     	org	32770
 20711  8002  3FFF               	dw	16383
 20712                           
 20713                           ;Config register IDLOC3 @ 0x8003
 20714                           ;	unspecified, using default values
 20715  8003                     	org	32771
 20716  8003  3FFF               	dw	16383
 20717                           
 20718                           	psect	config
 20719                           
 20720                           ;Config register CONFIG1 @ 0x8007
 20721                           ;	FEXTOSC External Oscillator mode Selection bits
 20722                           ;	FEXTOSC = OFF, Oscillator not enabled
 20723                           ;	Power-up default value for COSC bits
 20724                           ;	RSTOSC = HFINT32, HFINTOSC with 2x PLL (32MHz)
 20725                           ;	Clock Out Enable bit
 20726                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; I/O or oscillator function on OSC2
 20727                           ;	Clock Switch Enable bit
 20728                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 20729                           ;	Fail-Safe Clock Monitor Enable
 20730                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 20731  8007                     	org	32775
 20732  8007  3F8C               	dw	16268
 20733                           
 20734                           ;Config register CONFIG2 @ 0x8008
 20735                           ;	Master Clear Enable bit
 20736                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR; Weak pull-up enabled
 20737                           ;	Power-up Timer Enable bit
 20738                           ;	PWRTE = OFF, PWRT disabled
 20739                           ;	Watchdog Timer Enable bits
 20740                           ;	WDTE = OFF, WDT disabled; SWDTEN is ignored
 20741                           ;	Low-power BOR enable bit
 20742                           ;	LPBOREN = OFF, ULPBOR disabled
 20743                           ;	Brown-out Reset Enable bits
 20744                           ;	BOREN = OFF, Brown-out Reset disabled
 20745                           ;	Brown-out Reset Voltage selection bit
 20746                           ;	BORV = LOW, Brown-out voltage (Vbor) set to 2.45V
 20747                           ;	PPSLOCK bit One-Way Set Enable bit
 20748                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once; PPS registers remain l
      +                          ocked after one clear/set cycle
 20749                           ;	Stack Overflow/Underflow Reset Enable bit
 20750                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 20751                           ;	Debugger enable bit
 20752                           ;	DEBUG = OFF, Background debugger disabled
 20753  8008                     	org	32776
 20754  8008  3F33               	dw	16179
 20755                           
 20756                           ;Config register CONFIG3 @ 0x8009
 20757                           ;	User NVM self-write protection bits
 20758                           ;	WRT = OFF, Write protection off
 20759                           ;	Low Voltage Programming Enable bit
 20760                           ;	LVP = OFF, High Voltage on MCLR/VPP must be used for programming.
 20761  8009                     	org	32777
 20762  8009  1FFF               	dw	8191
 20763                           
 20764                           ;Config register CONFIG4 @ 0x800A
 20765                           ;	User NVM Program Memory Code Protection bit
 20766                           ;	CP = OFF, User NVM code protection disabled
 20767                           ;	Data NVM Memory Code Protection bit
 20768                           ;	CPD = OFF, Data NVM code protection disabled
 20769  800A                     	org	32778
 20770  800A  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    694
    Data        32
    BSS         74
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            79     60      70
    BANK1            80     27      55
    BANK2            80      0      55
    BANK3            80     35      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0
    BANK19            0      0       0
    BANK20            0      0       0
    BANK21            0      0       0
    BANK22            0      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    STATE_PatternMode$2399	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_Popcorn_Pattern_Hold(), Clock_Popcorn_Pattern(), Clock_CrossingRainbowPatternwithDelays(), Clock_CrossingRainbowPattern(), 
		 -> Clock_IterateSinglePixelByIndex(), 

    Clock_ForceRender$2392	PTR struct . size(2) Largest target is 420
		 -> downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    Clock_WriteTimeDigitValuesAndRenderScreen$2391	PTR struct . size(2) Largest target is 420
		 -> downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    ?_WS2812b_Initialize.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    memcpy@d1	PTR void  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), renderBuffer.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), 
		 -> upEncodedDigitsPixelValues(BIGRAM[420]), renderBuffer(BIGRAM[192]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), renderBuffer.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), 
		 -> upEncodedDigitsPixelValues(BIGRAM[420]), renderBuffer(BIGRAM[192]), 

    memcpy@s1	PTR const void  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 
		 -> currentDIGITrgbArray(BANK1[3]), currentBACKGROUNDrgbArray(BANK1[3]), WS2812b_SetPixelBlockConstantColor@rgbArray(BANK0[3]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 
		 -> currentDIGITrgbArray(BANK1[3]), currentBACKGROUNDrgbArray(BANK1[3]), WS2812b_SetPixelBlockConstantColor@rgbArray(BANK0[3]), 

    CRC16_Calculate16bitCRC@data	const PTR const unsigned char  size(2) Largest target is 8
		 -> APP_Initialize@eepromReadbackData(BANK1[8]), STATE_ChangeColorMode@eepromReadbackData(BANK3[8]), STATE_ChangeColorMode@backgroundSelection(BANK3[3]), STATE_ChangeColorMode@digitSelection(BANK3[3]), 

    Clock_ForceRender@t	const PTR const struct . size(2) Largest target is 4
		 -> STATE_ChangeColorMode@dColorTime(CODE[4]), 

    Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource	PTR const unsigned short  size(2) Largest target is 20
		 -> downDigitEncodings(CODE[20]), upDigitEncodings(CODE[20]), 

    Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer	const PTR struct . size(2) Largest target is 420
		 -> downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress	PTR unsigned char  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    Clock_WriteTimeDigitValuesAndRenderScreen@digits	const PTR const struct . size(1) Largest target is 4
		 -> Time_RenderInputTime@t(BANK1[4]), Time_RenderIfMinutesHaveChanged@t(BANK1[4]), 

    ledArray.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    rot	PTR volatile struct . size(1) Largest target is 26
		 -> rot@app$F1486(BANK3[26]), NULL(NULL[0]), 

    RotaryEncoder_Init@rotEncPtr	const PTR volatile struct . size(1) Largest target is 26
		 -> rot@app$F1486(BANK3[26]), 

    WS2812b_CopyPixelBufferArrayFromSource@src	PTR unsigned char  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    WS2812b_CopyPixelBufferArrayFromSource@dest	PTR unsigned char  size(2) Largest target is 192
		 -> renderBuffer.red(BIGRAM[1]), renderBuffer(BIGRAM[192]), 

    WS2812b_CopyPixelBufferArrayFromSource@startPixel	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_CopyPixelBufferArrayFromSource@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_CopyPixelBufferArrayFromSource@pixelSource	const PTR struct . size(2) Largest target is 420
		 -> downEncodedDigitsPixelValues(BIGRAM[420]), upEncodedDigitsPixelValues(BIGRAM[420]), 

    WS2812b_CopyPixelBufferArrayFromSource@strip	const PTR const struct . size(2) Largest target is 4
		 -> ledArray(BANK0[4]), 

    WS2812b_SetStripConstantColor@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_SetStripConstantColor@strip	const PTR struct . size(2) Largest target is 4
		 -> ledArray(BANK0[4]), 

    WS2812b_SetPixelBlockConstantColor@startPixelAddress	PTR unsigned char  size(2) Largest target is 192
		 -> renderBuffer.red(BIGRAM[1]), renderBuffer(BIGRAM[192]), 

    WS2812b_SetPixelBlockConstantColor@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_SetPixelBlockConstantColor@strip	const PTR const struct . size(2) Largest target is 4
		 -> ledArray(BANK0[4]), 

    sp__memcpy	PTR void  size(2) Largest target is 420
		 -> upEncodedDigitsPixelValues.red(BIGRAM[1]), downEncodedDigitsPixelValues.red(BIGRAM[1]), renderBuffer.red(BIGRAM[1]), downEncodedDigitsPixelValues(BIGRAM[420]), 
		 -> upEncodedDigitsPixelValues(BIGRAM[420]), renderBuffer(BIGRAM[192]), 

    WS2812b_SetPixelBlockFromRGBArray@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_SetSinglePixelColor@thisPixel	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_SetSinglePixelColor@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812b_SetSinglePixelColor@strip	const PTR struct . size(2) Largest target is 4
		 -> ledArray(BANK0[4]), 

    WS2812B_Render@thisPixel	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812B_Render@strip.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    WS2812B_Render@strip	const PTR const struct . size(2) Largest target is 4
		 -> ledArray(BANK0[4]), 

    WS2812b_Initialize@wasSetupSuccessful	const PTR _Bool  size(1) Largest target is 1
		 -> Clock_InitializeClockLEDs@returnVal(BANK0[1]), 

    WS2812b_Initialize@pxBuff	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    S1095$pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    array.pixelBuffer	PTR struct . size(2) Largest target is 192
		 -> renderBuffer(BIGRAM[192]), 

    patterns	PTR FTN()void [5] size(2) Largest target is 1
		 -> Clock_Popcorn_Pattern_Hold(), Clock_Popcorn_Pattern(), Clock_CrossingRainbowPatternwithDelays(), Clock_CrossingRainbowPattern(), 
		 -> Clock_IterateSinglePixelByIndex(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Time_IncrementSecondsISR(), TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Time_IncrementSecondsISR(), TMR5_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer1Interrupt(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer1Interrupt(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadButtonISR(), IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadButtonISR(), Absolute function(), IOCCF5_DefaultInterruptHandler(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadShaftISR(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadShaftISR(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadShaftISR(), IOCCF3_DefaultInterruptHandler(), 

    IOCCF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryEncoder_ReadShaftISR(), Absolute function(), IOCCF3_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR5_CallBack->_Time_IncrementSecondsISR
    _TMR1_ISR->_TMR1_WriteTimer
    _RotaryEncoder_ReadButtonISR->i1_TMR3_ReadTimer
    _IOCCF4_ISR->_RotaryEncoder_ReadShaftISR
    _IOCCF3_ISR->_RotaryEncoder_ReadShaftISR

Critical Paths under _main in BANK0

    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF3_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _Time_RenderIfMinutesHaveChanged->_Clock_WriteTimeDigitValuesAndRenderScreen
    _STATE_PatternMode->_Clock_Popcorn_Pattern
    _STATE_PatternMode->_Clock_Popcorn_Pattern_Hold
    _Clock_Popcorn_Pattern_Hold->_WS2812b_SetStripConstantColor
    _Clock_Popcorn_Pattern->_WS2812b_SetStripConstantColor
    _rand->___lmul
    _Clock_IterateSinglePixelByIndex->_WS2812b_SetStripConstantColor
    _Clock_CrossingRainbowPatternwithDelays->_WS2812b_SetSinglePixelColor
    _Clock_CrossingRainbowPattern->_WS2812b_SetSinglePixelColor
    _STATE_ChangeColorMode->_Clock_ForceRender
    _Time_RenderInputTime->_Clock_WriteTimeDigitValuesAndRenderScreen
    ___lwmod->_rand
    ___awmod->_rand
    ___awdiv->___awmod
    _Clock_WriteTimeDigitValuesAndRenderScreen->_Clock_FixDigit4LastThreePixels
    _Clock_ForceRender->_Clock_FixDigit4LastThreePixels
    _WS2812b_CopyPixelBufferArrayFromSource->_memcpy
    _Clock_FixDigit4LastThreePixels->_WS2812b_SetPixelBlockConstantColor
    _WS2812b_SetSinglePixelColor->___awmod
    _APP_Initialize->_Clock_PrerenderPixelAndBackgroundValues
    _Time_InitializeTimeModule->_TMR5_SetInterruptHandler
    _RotaryEncoder_Init->_IOCCF3_SetInterruptHandler
    _RotaryEncoder_Init->_IOCCF4_SetInterruptHandler
    _RotaryEncoder_Init->_IOCCF5_SetInterruptHandler
    _RotaryEncoder_Enable->_TMR3_ReadTimer
    _Clock_PrerenderPixelAndBackgroundValues->_WS2812b_SetStripConstantColor
    _WS2812b_SetStripConstantColor->_WS2812b_SetPixelBlockConstantColor
    _WS2812b_SetPixelBlockConstantColor->_memcpy
    _Clock_WriteDigitPixelValuesToLocalPxlBuffers->_memcpy
    _memcpy->___wmul
    _Clock_InitializeClockLEDs->_WS2812b_Initialize
    _Clock_SetDigitRGBArray->___wmul
    _Clock_SetBackgroundRGBArray->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _IOCCF5_ISR->_RotaryEncoder_ReadButtonISR

Critical Paths under _main in BANK1

    _main->_APP_TASKS
    _APP_TASKS->_Time_RenderIfMinutesHaveChanged
    _STATE_ChangeColorMode->_Time_RenderInputTime

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _APP_TASKS->_STATE_ChangeColorMode

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  672453
                     _APP_Initialize
                          _APP_TASKS
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     870
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0     174
           _TMR5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     522
         _IOCCF3_SetInterruptHandler
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _APP_TASKS                                            2     2      0  642661
                                             25 BANK1      2     2      0
_Clock_PrerenderPixelAndBackgroundVa
       _RotaryEncoder_GetSwitchState
_RotaryEncoder_HasButtonPressOccurre
              _STATE_ChangeColorMode
                  _STATE_PatternMode
    _Time_RenderIfMinutesHaveChanged
 ---------------------------------------------------------------------------------
 (2) _Time_RenderIfMinutesHaveChanged                     25    25      0  103629
                                              0 BANK1     25    25      0
_Clock_WriteTimeDigitValuesAndRender
       _RotaryEncoder_GetShaftCounts
                            ___awdiv
                            ___awmod
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _STATE_PatternMode                                    8     8      0  284001
                                              0 BANK1      8     8      0
       _Clock_CrossingRainbowPattern *
_Clock_CrossingRainbowPatternwithDel *
    _Clock_IterateSinglePixelByIndex *
              _Clock_Popcorn_Pattern *
         _Clock_Popcorn_Pattern_Hold *
       _RotaryEncoder_GetShaftCounts
 ---------------------------------------------------------------------------------
 (3) _Clock_Popcorn_Pattern_Hold                           5     5      0   67136
                                             54 BANK0      5     5      0
                     _WS2812B_Render
        _WS2812b_SetSinglePixelColor
      _WS2812b_SetStripConstantColor
                            ___awmod
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _Clock_Popcorn_Pattern                                5     5      0   67136
                                             54 BANK0      5     5      0
                     _WS2812B_Render
        _WS2812b_SetSinglePixelColor
      _WS2812b_SetStripConstantColor
                            ___awmod
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 6     4      2     676
                                             20 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     676
                                              8 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _Clock_IterateSinglePixelByIndex                      3     3      0   52475
                                             54 BANK0      3     3      0
                     _WS2812B_Render
        _WS2812b_SetSinglePixelColor
      _WS2812b_SetStripConstantColor
 ---------------------------------------------------------------------------------
 (3) _Clock_CrossingRainbowPatternwithDelays               8     8      0   48559
                                             44 BANK0      8     8      0
                     _WS2812B_Render
        _WS2812b_SetSinglePixelColor
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Clock_CrossingRainbowPattern                         8     8      0   48559
                                             44 BANK0      8     8      0
                     _WS2812B_Render
        _WS2812b_SetSinglePixelColor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _STATE_ChangeColorMode                               44    44      0  233270
                                             16 BANK1      8     8      0
                                              0 BANK3     35    35      0
            _CRC16_Calculate16bitCRC
                  _Clock_ForceRender
_Clock_PrerenderPixelAndBackgroundVa
        _Clock_SetBackgroundRGBArray
             _Clock_SetDigitRGBArray
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
       _RotaryEncoder_GetShaftCounts
_RotaryEncoder_HasButtonPressOccurre
       _Time_GetCurrentTimeInSeconds
               _Time_RenderInputTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Time_RenderInputTime                                16    11      5  102861
                                              0 BANK1     16    11      5
_Clock_WriteTimeDigitValuesAndRender
                            ___awdiv
                            ___awmod
                            ___lldiv
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    3472
                                             26 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     601
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     601
                                              8 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4   10513
                                             26 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1165
                                             33 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Clock_WriteTimeDigitValuesAndRenderScreen            9     9      0   85854
                                             50 BANK0      9     9      0
     _Clock_FixDigit4LastThreePixels
                     _WS2812B_Render
_WS2812b_CopyPixelBufferArrayFromSou
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Time_GetCurrentTimeInSeconds                         4     0      4       0
                                              8 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _RotaryEncoder_HasButtonPressOccurred                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RotaryEncoder_GetShaftCounts                         8     4      4      34
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3    1567
                                              8 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _Clock_ForceRender                                   12    10      2   85804
                                             50 BANK0     10     8      2
                                              0 BANK1      2     2      0
     _Clock_FixDigit4LastThreePixels
                     _WS2812B_Render
_WS2812b_CopyPixelBufferArrayFromSou
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _WS2812b_CopyPixelBufferArrayFromSource              18    10      8   19353
                                             26 BANK0     18    10      8
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _WS2812B_Render                                      10     8      2    1054
                                              8 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) _Clock_FixDigit4LastThreePixels                       4     4      0   50150
                                             46 BANK0      4     4      0
 _WS2812b_SetPixelBlockConstantColor
        _WS2812b_SetSinglePixelColor
 ---------------------------------------------------------------------------------
 (5) _WS2812b_SetSinglePixelColor                         11     4      7   31901
                                             33 BANK0     11     4      7
                            ___awmod (ARG)
                            ___lwmod (ARG)
                             ___wmul
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _RotaryEncoder_GetSwitchState                         2     2      0      23
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_Initialize                                      17    17      0   28922
                                              0 BANK1     16    16      0
            _CRC16_Calculate16bitCRC
          _Clock_InitializeClockLEDs
_Clock_PrerenderPixelAndBackgroundVa
                    _DATAEE_ReadByte
               _RotaryEncoder_Enable
                 _RotaryEncoder_Init
       _State_SetFunctionLookupTable
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
              _Time_EnableTimeModule
          _Time_InitializeTimeModule
 ---------------------------------------------------------------------------------
 (2) _Time_InitializeTimeModule                            0     0      0     174
           _TMR5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2     174
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Time_EnableTimeModule                                0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _State_SetFunctionLookupTable                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RotaryEncoder_Init                                   2     2      0     599
                                             10 BANK0      2     2      0
         _IOCCF3_SetInterruptHandler
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2     174
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF3_SetInterruptHandler                           2     0      2     174
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _RotaryEncoder_Enable                                 0     0      0      69
                     _TMR3_ReadTimer
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR3_ReadTimer                                      11     9      2      69
                                              8 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2    1502
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Clock_PrerenderPixelAndBackgroundValues              3     3      0   21738
                                             54 BANK0      3     3      0
_Clock_WriteDigitPixelValuesToLocalP
      _WS2812b_SetStripConstantColor
 ---------------------------------------------------------------------------------
 (4) _WS2812b_SetStripConstantColor                        8     3      5   19520
                                             46 BANK0      8     3      5
 _WS2812b_SetPixelBlockConstantColor
 ---------------------------------------------------------------------------------
 (5) _WS2812b_SetPixelBlockConstantColor                  20    11      9   17939
                                             26 BANK0     20    11      9
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4   14686
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Clock_WriteDigitPixelValuesToLocalPxlBuffers        12     8      4    2218
                                             26 BANK0     12     8      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              12     6      6    1558
                                             14 BANK0     12     6      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Clock_InitializeClockLEDs                           11     3      8    2386
                                             19 BANK0     11     3      8
        _Clock_SetBackgroundRGBArray
             _Clock_SetDigitRGBArray
                 _WS2812b_Initialize
 ---------------------------------------------------------------------------------
 (3) _WS2812b_Initialize                                  11     6      5     409
                                              8 BANK0     11     6      5
 ---------------------------------------------------------------------------------
 (3) _Clock_SetDigitRGBArray                               4     2      2     453
                                             14 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Clock_SetBackgroundRGBArray                          4     2      2     633
                                             14 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _CRC16_Calculate16bitCRC                             22    16      6    1464
                                              8 BANK0     22    16      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     711
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR5_ISR                                             0     0      0     240
                      _TMR5_CallBack
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR5_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR5_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
           _Time_IncrementSecondsISR *
 ---------------------------------------------------------------------------------
 (11) _Time_IncrementSecondsISR                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (11) _TMR5_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _Timer1Interrupt *
 ---------------------------------------------------------------------------------
 (11) _Timer1Interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0     231
                         _IOCCF3_ISR
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCCF5_ISR                                          0     0      0     181
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
        _RotaryEncoder_ReadButtonISR *
 ---------------------------------------------------------------------------------
 (11) _RotaryEncoder_ReadButtonISR                         8     8      0     181
                                              0 BANK0      8     8      0
                   i1_TMR3_ReadTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR3_ReadTimer                                   11     9      2      69
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (11) _IOCCF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IOCCF4_ISR                                          0     0      0      25
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
         _RotaryEncoder_ReadShaftISR *
 ---------------------------------------------------------------------------------
 (11) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IOCCF3_ISR                                          0     0      0      25
                   Absolute function *
     _IOCCF3_DefaultInterruptHandler *
         _RotaryEncoder_ReadShaftISR *
 ---------------------------------------------------------------------------------
 (11) _RotaryEncoder_ReadShaftISR                          5     5      0      25
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (11) _IOCCF3_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_Initialize
     _CRC16_Calculate16bitCRC
     _Clock_InitializeClockLEDs
       _Clock_SetBackgroundRGBArray
         ___wmul (ARG)
       _Clock_SetDigitRGBArray
         ___wmul (ARG)
       _WS2812b_Initialize
     _Clock_PrerenderPixelAndBackgroundValues
       _Clock_WriteDigitPixelValuesToLocalPxlBuffers
         _memcpy
           ___wmul (ARG)
       _WS2812b_SetStripConstantColor
         _WS2812b_SetPixelBlockConstantColor
           ___wmul
           _memcpy
     _DATAEE_ReadByte
     _RotaryEncoder_Enable
       _TMR3_ReadTimer
       _TMR3_StartTimer
     _RotaryEncoder_Init
       _IOCCF3_SetInterruptHandler
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _State_SetFunctionLookupTable
     _TMR1_SetInterruptHandler
     _TMR1_StartTimer
     _Time_EnableTimeModule
       _TMR5_StartTimer
     _Time_InitializeTimeModule
       _TMR5_SetInterruptHandler
   _APP_TASKS
     _Clock_PrerenderPixelAndBackgroundValues
     _RotaryEncoder_GetSwitchState
     _RotaryEncoder_HasButtonPressOccurred
     _STATE_ChangeColorMode
       _CRC16_Calculate16bitCRC
       _Clock_ForceRender
         _Clock_FixDigit4LastThreePixels
           _WS2812b_SetPixelBlockConstantColor
           _WS2812b_SetSinglePixelColor
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___lwmod (ARG)
               _rand (ARG)
             ___wmul (ARG)
             _rand (ARG)
         _WS2812B_Render
         _WS2812b_CopyPixelBufferArrayFromSource
           ___wmul
           _memcpy
         ___wmul
       _Clock_PrerenderPixelAndBackgroundValues
       _Clock_SetBackgroundRGBArray
       _Clock_SetDigitRGBArray
       _DATAEE_ReadByte
       _DATAEE_WriteByte
       _RotaryEncoder_GetShaftCounts
       _RotaryEncoder_HasButtonPressOccurred
       _Time_GetCurrentTimeInSeconds
       _Time_RenderInputTime
         _Clock_WriteTimeDigitValuesAndRenderScreen
           _Clock_FixDigit4LastThreePixels
           _WS2812B_Render
           _WS2812b_CopyPixelBufferArrayFromSource
           ___wmul
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___lldiv
         ___lwdiv
         ___lwmod
       ___wmul
     _STATE_PatternMode
       _Clock_CrossingRainbowPattern *
         _WS2812B_Render
         _WS2812b_SetSinglePixelColor
         ___wmul
       _Clock_CrossingRainbowPatternwithDelays *
         _WS2812B_Render
         _WS2812b_SetSinglePixelColor
         ___wmul
       _Clock_IterateSinglePixelByIndex *
         _WS2812B_Render
         _WS2812b_SetSinglePixelColor
         _WS2812b_SetStripConstantColor
       _Clock_Popcorn_Pattern *
         _WS2812B_Render
         _WS2812b_SetSinglePixelColor
         _WS2812b_SetStripConstantColor
         ___awmod
         ___lwmod
         _rand
       _Clock_Popcorn_Pattern_Hold *
         _WS2812B_Render
         _WS2812b_SetSinglePixelColor
         _WS2812b_SetStripConstantColor
         ___awmod
         ___lwmod
         _rand
       _RotaryEncoder_GetShaftCounts *
     _Time_RenderIfMinutesHaveChanged
       _Clock_WriteTimeDigitValuesAndRenderScreen
       _RotaryEncoder_GetShaftCounts
       ___awdiv
       ___awmod
       ___lldiv
       ___lmul
       ___lwdiv
       ___lwmod
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF3_SetInterruptHandler
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _PMD_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR3_Initialize
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF3_ISR
       Absolute function(Fake) *
       _IOCCF3_DefaultInterruptHandler *
       _RotaryEncoder_ReadShaftISR *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _RotaryEncoder_ReadShaftISR *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
       _RotaryEncoder_ReadButtonISR *
         i1_TMR3_ReadTimer
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Timer1Interrupt *
     _TMR1_WriteTimer
   _TMR5_ISR
     _TMR5_CallBack
       Absolute function(Fake) *
       _TMR5_DefaultInterruptHandler *
       _Time_IncrementSecondsISR *
     _TMR5_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7EF      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            4F      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               4F     3C      46       5       88.6%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1B      37       7       68.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      37       9       68.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     23      3D      11       76.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0      FF      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0      FF      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19               0      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20               0      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21               0      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22               0      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Nov 09 05:40:36 2022

                                                 _digit3StartPixel 28B0  
                                  ??_WS2812b_SetStripConstantColor 0054  
                                 __end_of_TMR5_SetInterruptHandler 22F3  
                   _Clock_WriteTimeDigitValuesAndRenderScreen$2391 0059  
                           __end_of_IOCCF4_DefaultInterruptHandler 22A4  
                                   _IOCCF4_DefaultInterruptHandler 22A3  
                                                     ___awdiv@sign 0048  
                                              ___wmul@multiplicand 002B  
                                                ??_TMR5_WriteTimer 0072  
                                  STATE_ChangeColorMode@maxRetries 01B4  
                                                              l602 1078  
                                                 _digit4StartPixel 28AE  
                                                              l614 10AA  
                                                              l526 13AA  
                                                              l631 10FC  
                                                              l471 08D2  
                                                              l626 10DD  
                                                              l484 09F0  
                                                              l398 252B  
                                                              l809 1CB9  
                                                              l819 1CFF  
                                                              l894 1285  
                                         ?_CRC16_Calculate16bitCRC 0029  
                   __end_of_WS2812b_CopyPixelBufferArrayFromSource 1C3E  
                         ??_WS2812b_CopyPixelBufferArrayFromSource 0043  
                          ?_WS2812b_CopyPixelBufferArrayFromSource 003B  
                           _WS2812b_CopyPixelBufferArrayFromSource 1BE1  
                                                  _timer1ReloadVal 00D5  
                                                              _app 0120  
                                                  WS2812B_Render@i 002D  
                                                  WS2812B_Render@j 0031  
                                                              _rot 0061  
                                                     ___awmod@sign 0041  
                                                              wreg 0009  
                               __end_of_IOCCF3_SetInterruptHandler 22CF  
                                       _IOCCF3_SetInterruptHandler 22C6  
                                      ??_Time_InitializeTimeModule 002B  
                                            ?_Time_RenderInputTime 00A0  
                                            Time_RenderInputTime@t 00AC  
                                                             l1152 2487  
                                                  _timer3ReloadVal 014D  
                                                             l5010 12C9  
                                                             l5112 1AF7  
                                                             l5018 130F  
                                                             l5130 1B1D  
                                                             l5122 1AFF  
                                                             l5106 1AEC  
                                                             l5202 2697  
                                                             l5028 135E  
                                                             l5124 1B0B  
                                                             l5220 25F4  
                                                             l6004 09E5  
                                                             l5054 1A9A  
                                                             l5134 1B26  
                                                             l5150 26E6  
                                                             l5214 25DC  
                                                             l6006 09E7  
                                                             l6110 1CA4  
                                                             l5048 1A98  
                                                             l5080 1B44  
                                                             l5216 25E8  
                                                             l5224 25FD  
                                                             l6008 09EC  
                                                             l6016 0A64  
                                                             l6120 1CBD  
                                                             l5058 1AB2  
                                                             l5138 1B2E  
                                                             l5162 26F3  
                                                             l5154 26ED  
                                                             l5090 1B72  
                                                             l5082 1B52  
                                                             l6130 1CDE  
                                                             l6114 1CAC  
                                                             l5308 23E2  
                                                             l5164 26FF  
                                                             l5172 2714  
                                                             l6060 0B0C  
                                                             l5500 0443  
                                                             l6132 1CE2  
                                                             l6116 1CAF  
                                                             l6140 1CEA  
                                                             l5094 1B7D  
                                                             l5190 2670  
                                                             l5430 0FF1  
                                                             l5502 0447  
                                                             l5176 271C  
                                                             l5168 270B  
                                                             l5192 267C  
                                                             l5352 1FFC  
                                                             l5432 0FF4  
                                                             l6136 1CE7  
                                                             l6128 1CC7  
                                                             l6082 1E4B  
                                                             l6066 0C18  
                                                             l5434 0FF8  
                                                             l6162 2326  
                                                             l3908 256B  
                                                             l4812 2589  
                                                             l4900 10B4  
                                                             l5444 00D6  
                                                             l5540 1C8A  
                                                             l6086 1ECA  
                                                             l4910 10E7  
                                                             l5198 268E  
                                                             l5366 2764  
                                                             l5542 1C92  
                                                             l4816 2481  
                                                             l5376 0C97  
                                                             l5464 020A  
                                                             l5536 1C70  
                                                             l6264 1CD2  
                                                             l4914 104A  
                                                             l5538 1C79  
                                                             l6266 1CF4  
                                                             l4908 10C2  
                                                             l5396 0DC6  
                                                             l4890 1082  
                                                             l5498 0440  
                                                             l4868 0859  
                                                             l4980 1E29  
                                                             l4964 1DB9  
                                                             l5684 13F0  
                                                             l5942 27FB  
                                                             l4974 1E04  
                                                             l4966 1DF4  
                                                             l5686 13F9  
                                                             l5936 27BE  
                                                             l4976 1E21  
                                                             l4888 105D  
                                                             l4984 100A  
                                                             l5688 140A  
                                                             l4898 1090  
                                                             l5970 08C9  
                                                             l5972 08CE  
                                                             l5980 0946  
                                                             l5956 089B  
                                                             l4988 1014  
                                                             l5992 09B9  
                                                             l5968 08C7  
                                                             _LATA 010C  
                                                             _LATC 010E  
                                                             u4035 1B02  
                                                             u4205 2673  
                                                             u3415 2488  
                                                             u4055 1B0C  
                                                             u4135 26F6  
                                                             u3425 248D  
                                                             u3505 0825  
                                                             u4065 1B16  
                                                             u4225 267D  
                                                             u4305 25F5  
                                                             u2730 2570  
                                                             u4075 1B1E  
                                                             u4155 2705  
                                                             u4235 2687  
                                                             u2740 2571  
                                                             u3525 0881  
                                                             u4165 270C  
                                                             u4245 268F  
                                                             u3614 10CE  
                                                             u3615 10CC  
                                                             u3465 1BA2  
                                                             u3554 1069  
                                                             u3555 1067  
                                                             u4275 25DF  
                                                             _PMD0 0911  
                                                             u3645 1059  
                                                             u3805 101C  
                                                             _PMD1 0912  
                                                             _PMD2 0913  
                                                             u4295 25EE  
                                                             _PMD3 0914  
                                                             u3584 109B  
                                                             _PMD4 0915  
                                                             u3585 1099  
                                                             _PMD5 0916  
                                                             u3675 1BFF  
                                                             u4635 1444  
                                                             u3925 27A8  
                                                             u3945 1B47  
                                                             u4755 27F9  
                                                             u3795 1015  
                                                             u3884 1AA6  
                                                             u3885 1AA4  
                                                             u3965 1B53  
                                                             u3975 1B67  
                                                             u4927 17F8  
                                                             u3985 1B73  
                                                             u4937 0455  
                                           ?_STATE_ChangeColorMode 0070  
                                                             u4947 274B  
                                                             u4957 0743  
                                                             u4967 0B8E  
                                                             u4977 1111  
                                                             _WPUA 020C  
                                                             _WPUC 020E  
                                                             _main 231E  
                                                             _rand 2769  
                                                             _seed 0147  
                                                             _row1 289E  
                                                             _row2 2885  
                                                             _row3 286A  
                                                             _row4 2878  
                                                             _row5 2892  
                                                             fsr0h 0005  
                                                             fsr1h 0007  
                                                             indf0 0000  
                                                             fsr0l 0004  
                                                             indf1 0001  
                                                             fsr1l 0006  
                                                             btemp 007E  
                                 ??_IOCCF5_DefaultInterruptHandler 0070  
                                  ?_IOCCF5_DefaultInterruptHandler 0070  
                             __end_of_Time_GetCurrentTimeInSeconds 23D1  
                                     _Time_GetCurrentTimeInSeconds 23C0  
                                         __end_ofi1_TMR3_ReadTimer 24D3  
                                                             start 0026  
                                                  _timer5ReloadVal 00D3  
                                     ??_Clock_Popcorn_Pattern_Hold 0057  
                                                  _TMR3_Initialize 23E4  
                                            _Clock_Popcorn_Pattern 1507  
                                       ??_TMR1_SetInterruptHandler 002B  
                                    __end_of_OSCILLATOR_Initialize 22FC  
                                           _Clock_SetDigitRGBArray 240B  
                          Clock_InitializeClockLEDs@backgroundBlue 003B  
                                                            ?_main 0070  
                                                            ?_rand 0035  
                                                  __end_of___awdiv 1B33  
                                                  __end_of___awmod 2721  
                                                  _TMR1_StartTimer 22A7  
                                                  __end_of___lldiv 1B86  
                                                  ___awdiv@divisor 0042  
                                                            _T1CON 001B  
                                                            _T3CON 0413  
                                                            _T5CON 041A  
                          __end_of_Clock_IterateSinglePixelByIndex 2769  
                                ??_Clock_IterateSinglePixelByIndex 0057  
                                 ?_Clock_IterateSinglePixelByIndex 0070  
                                  _Clock_IterateSinglePixelByIndex 2721  
                                                  __end_of___lwdiv 269C  
                                                            i1l242 001C  
                                                            i1l247 0024  
                                                            i1l239 0010  
                                                  __end_of___lwmod 2602  
                                                            i1l735 1D86  
                                                            i1l748 07ED  
                                                  ___awdiv@counter 0047  
                                                            _OSCEN 091D  
                                                            _TMR1H 001A  
                                                            _TMR3H 0412  
                                                            _TMR1L 0019  
                                                            _TMR3L 0411  
                                                            _TMR5H 0419  
                                                            _TMR5L 0418  
                                                            _TRISA 008C  
                                                            _TRISC 008E  
                                        TMR3_ReadTimer@readValHigh 0032  
              Clock_CrossingRainbowPatternwithDelays@rainbowRowIdx 005D  
                              STATE_ChangeColorMode@digitSelection 01B6  
                                             _RotaryEncoder_Enable 1A43  
                                              ___lmul@multiplicand 002D  
                                                 __end_of_TMR1_ISR 2376  
                                           _Clock_ForceRender$2392 00A0  
                                                 __end_of_TMR5_ISR 2383  
                                                  _DATAEE_ReadByte 23A1  
                                          __end_of_PIN_MANAGER_IOC 0800  
                                                   _WDT_Initialize 22AD  
                                                ??_Timer1Interrupt 0070  
                                          __end_of_TMR1_Initialize 2464  
                                                            pclath 000A  
                                                 ??_WS2812B_Render 002B  
                                                            status 0003  
                                                            wtemp0 007E  
                                                  _TMR1_WriteTimer 2383  
                                WS2812b_SetStripConstantColor@blue 0053  
                                                  _TMR5_Initialize 249A  
                             _Time_RenderIfMinutesHaveChanged$1035 00A5  
                                    ?_Time_GetCurrentTimeInSeconds 0029  
                                        _Time_InitializeTimeModule 22B6  
                                                  __initialization 002B  
               WS2812b_SetPixelBlockConstantColor@pixelStartOffset 003D  
                                                     __end_of_main 232A  
                                                     __end_of_rand 27B3  
                                                     __end_of_row1 28AA  
                                                     __end_of_row2 2892  
                                                     __end_of_row3 2878  
                                                     __end_of_row4 2885  
                                                     __end_of_row5 289E  
                                  __end_of_CRC16_Calculate16bitCRC 2800  
                         STATE_ChangeColorMode@backgroundSelection 01B9  
                                                __end_of_APP_TASKS 1D00  
                                      ?_INTERRUPT_InterruptManager 0070  
                                            _STATE_PatternMode$916 00A0  
                  __end_of_Clock_PrerenderPixelAndBackgroundValues 2634  
                        ??_Clock_PrerenderPixelAndBackgroundValues 0057  
                         ?_Clock_PrerenderPixelAndBackgroundValues 0070  
                          _Clock_PrerenderPixelAndBackgroundValues 2602  
                          WS2812b_SetPixelBlockConstantColor@F6641 013C  
                                                           ??_main 005D  
                                                           ??_rand 0037  
                            __end_of_WS2812b_SetStripConstantColor 25D5  
                                    _WS2812b_SetStripConstantColor 25A9  
                                         _TMR5_SetInterruptHandler 22EA  
                                                  _TMR3_StartTimer 22A4  
                                             _currentTimeInSeconds 00BB  
                                               Clock_ForceRender@t 0053  
                                    __end_of_Time_EnableTimeModule 0803  
                                            ?_RotaryEncoder_Enable 0070  
                                           __end_of_WDT_Initialize 22B1  
                                               _downDigitEncodings 2830  
                                           ??_Time_RenderInputTime 00A5  
                                         CRC16_Calculate16bitCRC@i 003B  
                         Clock_InitializeClockLEDs@backgroundGreen 003A  
                                         __end_of_upDigitEncodings 2858  
                                     ??_IOCCF4_SetInterruptHandler 002B  
                                                 ___awdiv@dividend 0044  
                          WS2812b_SetPixelBlockConstantColor@green 0042  
                                                           _ANSELA 018C  
                                                           _ANSELC 018E  
                                             _currentDIGITrgbArray 00CB  
                                                           _T1GCON 001C  
                                                           _T3GCON 0414  
                                                           _T5GCON 041B  
                                          TMR1_WriteTimer@timerVal 0070  
                          WS2812b_SetPixelBlockConstantColor@strip 003B  
                                                           _ODCONA 028C  
                                                           _ODCONC 028E  
                                                           i1l4200 234C  
                                                           i1l4212 2366  
                                                           i1l4206 2359  
                                                           i1l4242 238D  
                                          __end_of_TMR3_Initialize 23F7  
                                                           i1l4552 07F4  
                                                           i1l3930 1D40  
                                                           i1l3922 1D1F  
                                                           i1l4298 239C  
                                                           i1l3932 1D57  
                                                           i1l3924 1D23  
                                                           i1l4556 07FA  
                                                           i1l6270 1D7E  
                                                           i1l3936 1D71  
                                                           i1l3952 0798  
                                                           i1l3946 076E  
                                                           i1l6268 07E5  
                                                           i1l3948 0777  
                                                           i1l3958 07C0  
                                                           i1l3966 07DB  
                                                           i1l3894 1A39  
                                                           _INLVLA 038C  
                                                           _INLVLC 038E  
                                                           _CRCtbl 1800  
                                       ?_Clock_InitializeClockLEDs 0034  
                                                 ??_APP_Initialize 00A0  
                                                           u280_25 07B2  
                                                           u281_20 231B  
                                                           u276_25 1D0C  
                                                           u279_25 0794  
                                                           _OSCFRQ 091F  
                                                           _WDTCON 0097  
                                      i1TMR3_ReadTimer@readValHigh 0079  
                                           ?_Clock_Popcorn_Pattern 0070  
                   __end_of_Clock_CrossingRainbowPatternwithDelays 045D  
                         ??_Clock_CrossingRainbowPatternwithDelays 004D  
                          ?_Clock_CrossingRainbowPatternwithDelays 0070  
                           _Clock_CrossingRainbowPatternwithDelays 007B  
                                        Clock_SetDigitRGBArray@red 0032  
                             __end_of_TMR1_DefaultInterruptHandler 1001  
                                     _TMR1_DefaultInterruptHandler 1000  
                                                           ___lmul 1001  
                                          __end_of_TMR1_StartTimer 22AA  
                                         __end_of_digit1StartPixel 28B6  
                                                           ___wmul 247E  
                                 WS2812b_SetSinglePixelColor@green 0047  
                                                        ??___awdiv 0046  
                                                        ??___awmod 003F  
                               Time_RenderInputTime@setCurrentTime 00A4  
                                                        ??___lldiv 0031  
                                        Time_RenderInputTime@F6462 0134  
                                                        ??___lwdiv 002D  
                                                        ??___lwmod 003F  
                WS2812b_SetPixelBlockConstantColor@finalPixelIndex 0046  
                                 WS2812b_SetSinglePixelColor@strip 0042  
                                                           _memcpy 2580  
                                                 ___awdiv@quotient 0049  
                                                  ___awmod@divisor 003B  
                                                  ___awmod@counter 0040  
                                          __end_of_DATAEE_ReadByte 23B0  
                                         __end_of_digit2StartPixel 28B4  
                                                  _TMR5_StartTimer 22AA  
                                                   _PMD_Initialize 22BE  
                                                  ?_WDT_Initialize 0070  
                                        Time_RenderInputTime@hours 00AA  
                                      RotaryEncoder_Init@rotEncPtr 002C  
                                         __end_of_digit3StartPixel 28B2  
                         TMR5_SetInterruptHandler@InterruptHandler 0029  
                         TMR1_SetInterruptHandler@InterruptHandler 0029  
                       IOCCF5_SetInterruptHandler@InterruptHandler 0029  
                       IOCCF4_SetInterruptHandler@InterruptHandler 0029  
                       IOCCF3_SetInterruptHandler@InterruptHandler 0029  
                                                 ?_PIN_MANAGER_IOC 0070  
                WS2812b_CopyPixelBufferArrayFromSource@pixelSource 003D  
                                          __end_of_TMR1_WriteTimer 2392  
                                                     ??_IOCCF3_ISR 0074  
                                            __end_of_TMR1_CallBack 2307  
                                                     ??_IOCCF4_ISR 0074  
                                                     ??_IOCCF5_ISR 007B  
                             WS2812b_SetSinglePixelColor@thisPixel 004B  
                                                 ?_TMR1_Initialize 0070  
                                          __end_of_TMR5_Initialize 24B6  
                           Clock_InitializeClockLEDs@backgroundRed 0039  
                                                _SYSTEM_Initialize 241F  
                                          __end_of__initialization 0077  
                                __end_of_Clock_InitializeClockLEDs 2667  
                                         __end_of_digit4StartPixel 28B0  
                                               ?_SYSTEM_Initialize 0070  
                               __end_of_Clock_Popcorn_Pattern_Hold 0762  
                                       _Clock_Popcorn_Pattern_Hold 045D  
                                                  _TMR5_WriteTimer 2392  
                                                _STATE_PatternMode 1C3E  
                               WS2812b_SetStripConstantColor@green 0052  
                             __end_of_State_SetFunctionLookupTable 244A  
                                     _State_SetFunctionLookupTable 2434  
                                _Clock_CrossingRainbowPattern$2393 0052  
                                _Clock_CrossingRainbowPattern$2394 0053  
                                _Clock_CrossingRainbowPattern$2395 0054  
                                        _STATE_ChangeColorMode$990 01AE  
                                        _STATE_ChangeColorMode$993 01B0  
                                        _STATE_ChangeColorMode$994 01B2  
                                        _STATE_ChangeColorMode$989 01AC  
                               WS2812b_SetStripConstantColor@strip 004F  
               Time_RenderIfMinutesHaveChanged@minutesAtLastChange 00CE  
                        Clock_CrossingRainbowPattern@rainbowRowIdx 005F  
                                               ?_STATE_PatternMode 0070  
                                                   __pcstackCOMMON 0070  
                                                     __pidataBANK0 0003  
                                                     __pidataBANK1 22B1  
                                                     __pidataBANK3 2464  
                                              ??_SYSTEM_Initialize 002B  
                                          __end_of_TMR3_StartTimer 22A7  
                                                        ?_TMR1_ISR 0070  
                                    ?_TMR1_DefaultInterruptHandler 0070  
                                                        ?_TMR5_ISR 0070  
                                               _RotaryEncoder_Init 24F3  
                                                 _DATAEE_WriteByte 2513  
                                   ??_Time_GetCurrentTimeInSeconds 002D  
                                            __end_of_TMR5_CallBack 2312  
                                   ??_Clock_CrossingRainbowPattern 004D  
                                           __end_of_PMD_Initialize 22C6  
                                              ??_STATE_PatternMode 005C  
                                               __end_of_IOCCF3_ISR 234F  
                                               __end_of_IOCCF4_ISR 235C  
                                               __end_of_IOCCF5_ISR 2369  
                                           ??_RotaryEncoder_Enable 0034  
                                              ?_RotaryEncoder_Init 0070  
                           WS2812b_SetPixelBlockConstantColor@blue 0043  
                                          WS2812b_Initialize@array 0030  
                  Clock_WriteTimeDigitValuesAndRenderScreen@digits 005B  
                                          ??_STATE_ChangeColorMode 00B0  
                                   ?_WS2812b_SetStripConstantColor 004F  
                                      ?_IOCCF3_SetInterruptHandler 0029  
                                        __end_of_SYSTEM_Initialize 2434  
                                  WS2812b_SetSinglePixelColor@blue 0048  
                                                       __pbssBANK0 005D  
                                                       __pbssBANK1 00BB  
                                                       __pbssBANK2 0120  
                                                 ?_TMR3_Initialize 0070  
                                        __end_of_STATE_PatternMode 1C9D  
                      _Clock_CrossingRainbowPatternwithDelays$2396 0052  
                      _Clock_CrossingRainbowPatternwithDelays$2397 0053  
                      _Clock_CrossingRainbowPatternwithDelays$2398 0054  
                                             ??_RotaryEncoder_Init 002B  
                                          i1TMR3_ReadTimer@readVal 0077  
                                          _IOCCF3_InterruptHandler 0155  
                                                ?i1_TMR3_ReadTimer 0070  
                                                       __pmaintext 231E  
                                    WS2812b_Initialize@numElements 002B  
                                    ?_State_SetFunctionLookupTable 0070  
                                               ??i1_TMR3_ReadTimer 0072  
                                                          ?___lmul 0029  
                                                          ?___wmul 0029  
                                                 ?_TMR1_StartTimer 0070  
                                                       ??_TMR1_ISR 0072  
                                          __end_of_TMR5_StartTimer 22AD  
                                          ?_Clock_SetDigitRGBArray 002F  
                                                       ??_TMR5_ISR 0074  
                                                       __pintentry 0004  
                                                          ?_memcpy 002F  
                                                   ___lmul@product 0031  
                           __end_of_IOCCF5_DefaultInterruptHandler 1A02  
                                   _IOCCF5_DefaultInterruptHandler 1A01  
                            WS2812b_SetPixelBlockConstantColor@red 0041  
                                                  ?_PMD_Initialize 0070  
                                                  _Timer1Interrupt 2312  
                                        ?_Time_IncrementSecondsISR 0070  
                                                 ?_DATAEE_ReadByte 0029  
                                   WS2812b_SetSinglePixelColor@red 0046  
                                                          _OSCCON1 0919  
                                                          _OSCCON3 091B  
                                                          _NVMADRH 0892  
                                                          _NVMADRL 0891  
                                                          _NVMDATH 0894  
                                                          _OSCTUNE 091E  
                                                          _NVMDATL 0893  
                                                          _NVMCON2 0896  
                             __end_of_RotaryEncoder_GetShaftCounts 2557  
                                     _RotaryEncoder_GetShaftCounts 2535  
                               __end_of_IOCCF4_SetInterruptHandler 22D8  
                                       _IOCCF4_SetInterruptHandler 22CF  
                                                          _SLRCONA 030C  
                                                          _SLRCONC 030E  
                                 Clock_SetBackgroundRGBArray@green 002F  
                                 ??_IOCCF3_DefaultInterruptHandler 0070  
                                  ?_IOCCF3_DefaultInterruptHandler 0070  
              WS2812b_SetPixelBlockConstantColor@startPixelAddress 0048  
                                                 ?_TMR1_WriteTimer 0070  
                                          __end_of_TMR5_WriteTimer 23A1  
                                      Clock_SetDigitRGBArray@green 002F  
                                                 ?_TMR5_Initialize 0070  
                                             DATAEE_WriteByte@bAdd 0029  
                         Time_RenderInputTime@currentTimeInMinutes 00A8  
                                       Clock_SetDigitRGBArray@blue 0030  
                                     ?_Clock_SetBackgroundRGBArray 002F  
                                     ?_RotaryEncoder_ReadButtonISR 0070  
                                   __end_of_Clock_SetDigitRGBArray 241F  
                                       ??_TMR5_SetInterruptHandler 002B  
                                       STATE_ChangeColorMode@F6682 0142  
                                       STATE_ChangeColorMode@F6690 013F  
                                                          ___awdiv 1AE1  
                                                          ___awmod 26DB  
                                                 ?_TMR3_StartTimer 0070  
                                                          ___lldiv 1B33  
                                                          ___lwdiv 2667  
                                                          ___lwmod 25D5  
                                                          __ptext1 241F  
                                                          __ptext2 22AD  
                                                          __ptext3 249A  
                                                          __ptext4 23E4  
                                                          __ptext5 244A  
                                                          __ptext6 22BE  
                                                          __ptext7 269C  
                                                          __ptext8 22F3  
                                                          __ptext9 1C9D  
                                     ?_WS2812b_SetSinglePixelColor 0042  
                                   ??_TMR1_DefaultInterruptHandler 0070  
                                                        _T1CONbits 001B  
                                                        _APP_TASKS 1C9D  
                                            _OSCILLATOR_Initialize 22F3  
                                              WS2812B_Render@strip 0029  
                                                        _T3CONbits 0413  
                                                 ___awmod@dividend 003D  
                                         ??_PIN_MANAGER_Initialize 002B  
                                        ?_TMR1_SetInterruptHandler 0029  
                                                        _T5CONbits 041A  
                                                        _IOCCFbits 0399  
                                                        _IOCCNbits 0398  
                                                        _IOCCPbits 0397  
          Clock_WriteDigitPixelValuesToLocalPxlBuffers@pixelBuffer 003B  
                                                          clrloop0 232B  
                                    ?_RotaryEncoder_GetShaftCounts 0029  
                                             end_of_initialization 0077  
                                     ??_RotaryEncoder_ReadShaftISR 0070  
                                          ??_Clock_Popcorn_Pattern 0057  
                                      ??_Clock_InitializeClockLEDs 003C  
                                                          memcpy@d 0037  
                          STATE_ChangeColorMode@eepromReadbackData 01A4  
                                                          memcpy@n 0033  
                                                          memcpy@s 0039  
                                                          init_ram 2336  
                                                          initloop 2337  
                                                  ___lldiv@divisor 0029  
                                                  ___lldiv@counter 0036  
                                          __end_of_Timer1Interrupt 231E  
                                            TMR3_ReadTimer@readVal 0030  
                               Clock_InitializeClockLEDs@digitBlue 0038  
                                    ??_Clock_SetBackgroundRGBArray 0031  
                                    ??_RotaryEncoder_ReadButtonISR 0021  
                                                 ?_TMR5_StartTimer 0070  
                                    STATE_PatternMode@patternIndex 00BF  
                                                 _rainbowRGBValues 2858  
                                   ??_State_SetFunctionLookupTable 0029  
                                                 ??_WDT_Initialize 0029  
                            WS2812b_SetSinglePixelColor@pixelIndex 0044  
                                                        _PORTCbits 000E  
                                            _TMR5_InterruptHandler 014B  
                                 APP_Initialize@eepromReadbackData 00A8  
                                                       ?_APP_TASKS 0070  
                                    ??_WS2812b_SetSinglePixelColor 0049  
                                          _IOCCF4_InterruptHandler 0153  
                                            _Time_EnableTimeModule 0800  
                                     ??_IOCCF5_SetInterruptHandler 002B  
                                         __end_of_DATAEE_WriteByte 2535  
                                          _CRC16_Calculate16bitCRC 27B3  
                                                 ?_TMR5_WriteTimer 0070  
                                         APP_Initialize@maxRetries 00A6  
                                          TMR5_WriteTimer@timerVal 0070  
                                                   __end_of_CRCtbl 1A00  
                                      Time_RenderInputTime@minutes 00AB  
                                      ?_Clock_Popcorn_Pattern_Hold 0070  
                                                   _TMR3_ReadTimer 24D3  
                       WS2812b_SetPixelBlockConstantColor@rgbArray 004A  
              Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit1 0066  
              Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit2 00D2  
              Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit3 00D1  
              Clock_WriteTimeDigitValuesAndRenderScreen@lastDigit4 00D0  
                               Clock_InitializeClockLEDs@returnVal 003E  
                                                   __end_of___lmul 1031  
                                                   __end_of___wmul 249A  
                                        _Clock_InitializeClockLEDs 2634  
                                       __end_of_WS2812b_Initialize 2580  
                             WS2812b_Initialize@wasSetupSuccessful 002D  
                                   STATE_ChangeColorMode@rotCounts 01BE  
                             __end_of_RotaryEncoder_GetSwitchState 23C0  
                                     _RotaryEncoder_GetSwitchState 23B0  
                                                   __end_of_memcpy 25A9  
                                           ?_OSCILLATOR_Initialize 0070  
                     RotaryEncoder_ReadButtonISR@positiveWidth_cts 0025  
                                        _currentBACKGROUNDrgbArray 00C8  
                                              start_initialization 002B  
                             __end_of_TMR5_DefaultInterruptHandler 0003  
                                     _TMR5_DefaultInterruptHandler 0002  
                                    __end_of_STATE_ChangeColorMode 0C3E  
             Time_RenderIfMinutesHaveChanged@isSwitchPressHrMnMode 00A4  
                                 STATE_ChangeColorMode@arrayRowIdx 01C2  
                                 ??_Clock_FixDigit4LastThreePixels 004F  
                                  ?_Clock_FixDigit4LastThreePixels 0070  
                                           __end_of_TMR3_ReadTimer 24F3  
                                   ??_RotaryEncoder_GetShaftCounts 002D  
                                              DATAEE_ReadByte@bAdd 0029  
                                 __end_of_Time_IncrementSecondsISR 1A43  
                                         WS2812b_Initialize@pxBuff 0029  
                                                 ??_PMD_Initialize 0029  
                                                 ?_Timer1Interrupt 0070  
                                                         ??___lmul 0031  
                                                         ??___wmul 002D  
                                                      __pdataBANK0 0066  
                                                      __pdataBANK1 00CE  
                                                      __pdataBANK3 01C3  
                                                         ??_memcpy 0035  
                                     _downEncodedDigitsPixelValues 23E8  
                                       _upEncodedDigitsPixelValues 258C  
               WS2812b_CopyPixelBufferArrayFromSource@startAddress 003F  
                                                      ??_APP_TASKS 00B9  
                                                      __pbssBIGRAM 23E8  
                                    ?_RotaryEncoder_GetSwitchState 0070  
                 Time_RenderIfMinutesHaveChanged@thisTimeInSeconds 00B1  
            WS2812b_CopyPixelBufferArrayFromSource@numPixelsToCopy 0041  
                                                      __pbssCOMMON 007B  
                                           ?_Time_EnableTimeModule 0070  
                                                        ___latbits 0003  
                                                    __pcstackBANK0 0021  
                                                    __pcstackBANK1 00A0  
                                                    __pcstackBANK3 01A0  
                                        ??_CRC16_Calculate16bitCRC 002F  
                                      ?_IOCCF4_SetInterruptHandler 0029  
                             Clock_Popcorn_Pattern_Hold@numRenders 0145  
                                    ?_TMR5_DefaultInterruptHandler 0070  
                               __end_of_RotaryEncoder_ReadShaftISR 1D87  
                                       _RotaryEncoder_ReadShaftISR 1D00  
                              WS2812b_SetPixelBlockConstantColor@i 004D  
                        WS2812b_CopyPixelBufferArrayFromSource@src 004B  
                          __end_of_Time_RenderIfMinutesHaveChanged 1507  
                                 ?_Time_RenderIfMinutesHaveChanged 0070  
                                ??_Time_RenderIfMinutesHaveChanged 00A0  
                                  _Time_RenderIfMinutesHaveChanged 1366  
                             __end_of_Clock_CrossingRainbowPattern 1000  
                                     _Clock_CrossingRainbowPattern 0C3E  
              Time_RenderIfMinutesHaveChanged@currentTimeInMinutes 00AF  
                      Time_RenderIfMinutesHaveChanged@minutesDelta 00A9  
                                                  ?_TMR3_ReadTimer 0029  
      Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingCounter 0045  
                                                        __pnvBANK1 00D3  
                                                        __pnvBANK2 014B  
                       __end_of_WS2812b_SetPixelBlockConstantColor 0884  
                             ??_WS2812b_SetPixelBlockConstantColor 0044  
                              ?_WS2812b_SetPixelBlockConstantColor 003B  
                               _WS2812b_SetPixelBlockConstantColor 0803  
                                          _IOCCF5_InterruptHandler 0151  
                                                 ___lwdiv@dividend 002B  
                                           _PIN_MANAGER_Initialize 269C  
                                                    _rot@app$F1486 01C3  
                                 STATE_ChangeColorMode@currentTime 01A0  
                         RotaryEncoder_GetSwitchState@currentState 002A  
                           __end_of_IOCCF3_DefaultInterruptHandler 1A01  
                                   _IOCCF3_DefaultInterruptHandler 1A00  
                                 __end_of_TMR1_SetInterruptHandler 22EA  
                                                         ?___awdiv 0042  
                                                         ?___awmod 003B  
                                                         ?___lldiv 0029  
                                                         ?___lwdiv 0029  
                                                         ?___lwmod 003B  
             __end_of_Clock_WriteDigitPixelValuesToLocalPxlBuffers 1AE1  
                   ??_Clock_WriteDigitPixelValuesToLocalPxlBuffers 003F  
                    ?_Clock_WriteDigitPixelValuesToLocalPxlBuffers 003B  
                     _Clock_WriteDigitPixelValuesToLocalPxlBuffers 1A91  
                                     ??_INTERRUPT_InterruptManager 007B  
                               Clock_IterateSinglePixelByIndex@idx 00C5  
                              APP_TASKS@wasSwitchPressedInTimeMode 00C7  
                             Clock_InitializeClockLEDs@numElements 0034  
                               __end_of_IOCCF5_SetInterruptHandler 22E1  
                                       _IOCCF5_SetInterruptHandler 22D8  
                                                 ___lwdiv@quotient 002F  
                                 ??_IOCCF4_DefaultInterruptHandler 0070  
                                  ?_IOCCF4_DefaultInterruptHandler 0070  
                                         __end_of_rainbowRGBValues 286A  
                                                    _TMR1_CallBack 22FC  
                                                   ___wmul@product 002D  
                                                         _LATCbits 010E  
                                    __end_of_Clock_Popcorn_Pattern 1800  
                                    ?_Clock_CrossingRainbowPattern 0070  
                                                        clear_ram0 232A  
                                                         _PIE0bits 0090  
                                                         _PIE1bits 0091  
                                                         _PIE4bits 0094  
                                      CRC16_Calculate16bitCRC@data 0029  
                                           _isRotaryEncoderEnabled 007D  
                                      CRC16_Calculate16bitCRC@seed 002D  
                                                         _PIR0bits 0010  
                                                         _PIR1bits 0011  
                                      CRC16_Calculate16bitCRC@size 002B  
                                                         _PIR3bits 0013  
                                                         _PIR4bits 0014  
                                Clock_InitializeClockLEDs@digitRed 0036  
                                                   _WS2812B_Render 1031  
                                         _Time_IncrementSecondsISR 1A02  
                                                         _TMR1_ISR 2369  
                                                         _TMR5_ISR 2376  
                                                ??_PIN_MANAGER_IOC 007B  
                                Time_RenderInputTime@timeInSeconds 00A0  
                                                    _TMR5_CallBack 2307  
                                                ??_TMR1_Initialize 002B  
                                         TMR3_ReadTimer@readValLow 0033  
                                                ___wmul@multiplier 0029  
                __end_of_Clock_WriteTimeDigitValuesAndRenderScreen 1366  
                      ??_Clock_WriteTimeDigitValuesAndRenderScreen 0053  
                       ?_Clock_WriteTimeDigitValuesAndRenderScreen 0070  
                        _Clock_WriteTimeDigitValuesAndRenderScreen 1242  
                           Time_RenderIfMinutesHaveChanged@minutes 00AE  
                      WS2812b_CopyPixelBufferArrayFromSource@strip 003B  
                                        ?_TMR5_SetInterruptHandler 0029  
                                            DATAEE_WriteByte@bData 002B  
                                       ?_Time_InitializeTimeModule 0070  
                            Clock_CrossingRainbowPattern@thisIndex 007B  
                                 Time_RenderIfMinutesHaveChanged@t 00B5  
                                 WS2812b_SetStripConstantColor@red 0051  
                     __end_of_RotaryEncoder_HasButtonPressOccurred 23E4  
                           ??_RotaryEncoder_HasButtonPressOccurred 0029  
                            ?_RotaryEncoder_HasButtonPressOccurred 0070  
                             _RotaryEncoder_HasButtonPressOccurred 23D1  
                                   ??_RotaryEncoder_GetSwitchState 0029  
                                                ___lmul@multiplier 0029  
                                                   ?_TMR1_CallBack 0070  
                                                ?_DATAEE_WriteByte 0029  
                                                     _renderBuffer 2730  
                                   ??_TMR5_DefaultInterruptHandler 0070  
                                               ??_DATAEE_WriteByte 002C  
                                           __end_of_WS2812B_Render 1121  
                                                        memcpy@tmp 0036  
                                       i1TMR3_ReadTimer@readValLow 007A  
                                                   _APP_Initialize 1E46  
                                     __end_of_Time_RenderInputTime 2000  
                 WS2812b_SetPixelBlockConstantColor@numPixelsToSet 003F  
                                          WS2812B_Render@thisPixel 002F  
                                          ??_OSCILLATOR_Initialize 0029  
                                         STATE_ChangeColorMode@crc 01BC  
                                  _RotaryEncoder_ReadShaftISR$1369 0072  
                                                   ?_TMR5_CallBack 0070  
                                                   _colorRGBArrays 2800  
                                                ??_TMR3_Initialize 0029  
                                         _TMR1_SetInterruptHandler 22E1  
                                            _TMR1_InterruptHandler 014F  
                                                 i1_TMR3_ReadTimer 24B6  
                          __end_ofSTATE_ChangeColorMode@dColorTime 28AE  
                                  STATE_ChangeColorMode@dColorTime 28AA  
                                                  ___lwdiv@divisor 0029  
       Clock_WriteDigitPixelValuesToLocalPxlBuffers@encodingSource 003D  
                                                  ___lwdiv@counter 002E  
                                                         _ledArray 0062  
                                                         __ptext10 1366  
                                                         __ptext11 1C3E  
                                                         __ptext20 1F14  
                                                         __ptext12 1507  
                                                         __ptext21 25D5  
                                                         __ptext13 007B  
                                                       _T1GCONbits 001C  
                                                         __ptext30 2513  
                                                         __ptext22 2667  
                                                         __ptext14 0C3E  
                                                         __ptext31 1121  
                                                         __ptext23 1B33  
                                                         __ptext15 2721  
                                                         __ptext40 0800  
                                                         __ptext32 1BE1  
                                                         __ptext24 26DB  
                                                         __ptext16 045D  
                                                         __ptext41 22AA  
                                                         __ptext33 1031  
                                                         __ptext25 1AE1  
                                                         __ptext17 2769  
                                                         __ptext50 22A4  
                                                         __ptext42 22A7  
                                                         __ptext34 1D87  
                                                         __ptext26 1242  
                                                         __ptext18 1001  
                                                         __ptext51 24D3  
                                                         __ptext43 22E1  
                                                         __ptext35 1B86  
                                                         __ptext27 23C0  
                                                         __ptext19 0884  
                                                         __ptext60 2557  
                                                         __ptext52 23A1  
                                                         __ptext44 2434  
                                                         __ptext36 23B0  
                                                         __ptext28 23D1  
                                                         __ptext61 240B  
                                                         __ptext53 2602  
                                                         __ptext45 24F3  
                                                         __ptext37 1E46  
                                                         __ptext29 2535  
                                                         __ptext70 2369  
                                                         __ptext62 23F7  
                                                         __ptext54 25A9  
                                                         __ptext46 22D8  
                                                         __ptext38 22B6  
                                                         __ptext71 2383  
                                                         __ptext63 27B3  
                                                         __ptext55 0803  
                                                         __ptext47 22CF  
                                                         __ptext39 22EA  
                                                         __ptext80 234F  
                                                         __ptext72 22FC  
                                                         __ptext56 247E  
                                                         __ptext48 22C6  
                                                         __ptext81 1A00  
                                                         __ptext73 1000  
                                                         __ptext65 2376  
                                                         __ptext57 1A91  
                                                         __ptext49 1A43  
                                                         __ptext82 1D00  
                                                         __ptext74 2312  
                                                         __ptext66 2392  
                                                         __ptext58 2580  
                                                         __ptext83 22A3  
                                                         __ptext75 07EE  
                                                         __ptext67 2307  
                                                         __ptext59 2634  
                                                         __ptext84 2342  
                                                         __ptext76 235C  
                                                         __ptext68 0002  
                                                         __ptext77 1A01  
                                                         __ptext69 1A02  
                                                         __ptext78 0762  
                                                         __ptext79 24B6  
                                __end_of_Time_InitializeTimeModule 22BE  
                                               _WS2812b_Initialize 2557  
                                     ??_IOCCF3_SetInterruptHandler 002B  
                                                ??_TMR1_StartTimer 0029  
                                                       _T3GCONbits 0414  
                                          _WS2812b_Initialize$1153 002F  
                                      DATAEE_WriteByte@GIEBitValue 002C  
                                                       _IOCCF3_ISR 2342  
                                                       _IOCCF4_ISR 234F  
                                                       _IOCCF5_ISR 235C  
                                         ??_Clock_SetDigitRGBArray 0031  
Clock_WriteDigitPixelValuesToLocalPxlBuffers@thisDigitStartAddress 0043  
                                                       _T5GCONbits 041B  
                                              ?_WS2812b_Initialize 0029  
                              __end_of_Clock_SetBackgroundRGBArray 240B  
                                      _Clock_SetBackgroundRGBArray 23F7  
                                                ??_DATAEE_ReadByte 002B  
                              __end_of_RotaryEncoder_ReadButtonISR 07EE  
                                      _RotaryEncoder_ReadButtonISR 0762  
                                                         _patterns 012A  
                                           __end_of_APP_Initialize 1F14  
                                                  ?_WS2812B_Render 0029  
                 WS2812b_CopyPixelBufferArrayFromSource@startPixel 0047  
                                       CRC16_Calculate16bitCRC@crc 003D  
                      RotaryEncoder_ReadButtonISR@currentTimestamp 0027  
                                           __end_of_colorRGBArrays 2830  
                             Time_RenderIfMinutesHaveChanged@F6453 0138  
                                       __end_of_downDigitEncodings 2844  
                                                         int$flags 007E  
                               __end_of_INTERRUPT_InterruptManager 0026  
                                       _INTERRUPT_InterruptManager 0004  
                           __end_of_Clock_FixDigit4LastThreePixels 1E46  
                                   _Clock_FixDigit4LastThreePixels 1D87  
                                                _Clock_ForceRender 1121  
                       WS2812b_CopyPixelBufferArrayFromSource@dest 0049  
                                                ??_TMR1_WriteTimer 0072  
                              __end_of_WS2812b_SetSinglePixelColor 1BE1  
                                      _WS2812b_SetSinglePixelColor 1B86  
                                          ??_Time_EnableTimeModule 0029  
                                                ??_TMR5_Initialize 002B  
                                               ?_Clock_ForceRender 0053  
                                             ??_WS2812b_Initialize 002E  
                                  Clock_SetBackgroundRGBArray@blue 0030  
                  Clock_CrossingRainbowPatternwithDelays@thisIndex 00C3  
                                                       _INTCONbits 000B  
                       RotaryEncoder_GetShaftCounts@thisCountValue 002D  
                             Time_RenderIfMinutesHaveChanged@hours 00AD  
                                                      _NVMCON1bits 0895  
                                                         memcpy@d1 002F  
                                                         memcpy@s1 0031  
                                                   __pstringtext10 28B0  
                                                   __pstringtext11 28B2  
                                                   __pstringtext12 28B4  
                                                   __pstringtext13 2830  
                                                   __pstringtext14 2844  
                                                   __pstringtext15 28AA  
                                              ??_Clock_ForceRender 0055  
                        Clock_FixDigit4LastThreePixels@digit4Value 0052  
                                                  ??_TMR1_CallBack 0070  
                                       STATE_PatternMode@rotCounts 00A4  
                                                 ??_TMR3_ReadTimer 002B  
                                      ?_RotaryEncoder_ReadShaftISR 0070  
                                                ??_TMR3_StartTimer 0029  
                                                         intlevel1 0000  
                                            _STATE_ChangeColorMode 0884  
                                                 ___lwmod@dividend 003D  
                                                 ___lldiv@dividend 002D  
                                          ?_PIN_MANAGER_Initialize 0070  
                                     __end_of_RotaryEncoder_Enable 1A91  
                                                  ?_APP_Initialize 0070  
                                        __end_of_Clock_ForceRender 1242  
                                                 _upDigitEncodings 2844  
                                                  ??_TMR5_CallBack 0074  
                              Clock_InitializeClockLEDs@digitGreen 0037  
                                   Clock_SetBackgroundRGBArray@red 0032  
                                                    __pstringtext1 1800  
                                                    __pstringtext2 2800  
                                                    __pstringtext3 2858  
                                                    __pstringtext4 286A  
                                                    __pstringtext5 2878  
                                                    __pstringtext6 2885  
                                                    __pstringtext7 2892  
                                                    __pstringtext8 289E  
                                                    __pstringtext9 28AE  
         Clock_WriteDigitPixelValuesToLocalPxlBuffers@digitCounter 0041  
                                                 ___lldiv@quotient 0032  
                                                  ___lwmod@divisor 003B  
                                                  ___lwmod@counter 0040  
                                                 _digit1StartPixel 28B4  
                                      ?_IOCCF5_SetInterruptHandler 0029  
                                             _Time_RenderInputTime 1F14  
                                                ??_TMR5_StartTimer 0029  
                                                      ?_IOCCF3_ISR 0070  
                                                      ?_IOCCF4_ISR 0070  
                                                      ?_IOCCF5_ISR 0070  
                                   __end_of_PIN_MANAGER_Initialize 26DB  
                                       __end_of_RotaryEncoder_Init 2513  
                                       ??_Time_IncrementSecondsISR 0070  
                                                  _PIN_MANAGER_IOC 07EE  
                                                 _digit2StartPixel 28B2  
                                                  _TMR1_Initialize 244A  
